//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type DataFlowDebugSessionQueryByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current DataFlowDebugSessionQueryByFactoryResponse.
	PageResponse() DataFlowDebugSessionQueryByFactoryResponse
}

type dataFlowDebugSessionQueryByFactoryPager struct {
	client    *DataFlowDebugSessionClient
	current   DataFlowDebugSessionQueryByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DataFlowDebugSessionQueryByFactoryResponse) (*azcore.Request, error)
}

func (p *dataFlowDebugSessionQueryByFactoryPager) Err() error {
	return p.err
}

func (p *dataFlowDebugSessionQueryByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QueryDataFlowDebugSessionsResponse.NextLink == nil || len(*p.current.QueryDataFlowDebugSessionsResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.queryByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.queryByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataFlowDebugSessionQueryByFactoryPager) PageResponse() DataFlowDebugSessionQueryByFactoryResponse {
	return p.current
}

type DataFlowsListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current DataFlowsListByFactoryResponse.
	PageResponse() DataFlowsListByFactoryResponse
}

type dataFlowsListByFactoryPager struct {
	client    *DataFlowsClient
	current   DataFlowsListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DataFlowsListByFactoryResponse) (*azcore.Request, error)
}

func (p *dataFlowsListByFactoryPager) Err() error {
	return p.err
}

func (p *dataFlowsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataFlowListResponse.NextLink == nil || len(*p.current.DataFlowListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataFlowsListByFactoryPager) PageResponse() DataFlowsListByFactoryResponse {
	return p.current
}

type DatasetsListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current DatasetsListByFactoryResponse.
	PageResponse() DatasetsListByFactoryResponse
}

type datasetsListByFactoryPager struct {
	client    *DatasetsClient
	current   DatasetsListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatasetsListByFactoryResponse) (*azcore.Request, error)
}

func (p *datasetsListByFactoryPager) Err() error {
	return p.err
}

func (p *datasetsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *datasetsListByFactoryPager) PageResponse() DatasetsListByFactoryResponse {
	return p.current
}

type FactoriesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current FactoriesListByResourceGroupResponse.
	PageResponse() FactoriesListByResourceGroupResponse
}

type factoriesListByResourceGroupPager struct {
	client    *FactoriesClient
	current   FactoriesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FactoriesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *factoriesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *factoriesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *factoriesListByResourceGroupPager) PageResponse() FactoriesListByResourceGroupResponse {
	return p.current
}

type FactoriesListPager interface {
	azcore.Pager
	// PageResponse returns the current FactoriesListResponse.
	PageResponse() FactoriesListResponse
}

type factoriesListPager struct {
	client    *FactoriesClient
	current   FactoriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FactoriesListResponse) (*azcore.Request, error)
}

func (p *factoriesListPager) Err() error {
	return p.err
}

func (p *factoriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *factoriesListPager) PageResponse() FactoriesListResponse {
	return p.current
}

type IntegrationRuntimesListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationRuntimesListByFactoryResponse.
	PageResponse() IntegrationRuntimesListByFactoryResponse
}

type integrationRuntimesListByFactoryPager struct {
	client    *IntegrationRuntimesClient
	current   IntegrationRuntimesListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationRuntimesListByFactoryResponse) (*azcore.Request, error)
}

func (p *integrationRuntimesListByFactoryPager) Err() error {
	return p.err
}

func (p *integrationRuntimesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationRuntimeListResponse.NextLink == nil || len(*p.current.IntegrationRuntimeListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationRuntimesListByFactoryPager) PageResponse() IntegrationRuntimesListByFactoryResponse {
	return p.current
}

type LinkedServicesListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current LinkedServicesListByFactoryResponse.
	PageResponse() LinkedServicesListByFactoryResponse
}

type linkedServicesListByFactoryPager struct {
	client    *LinkedServicesClient
	current   LinkedServicesListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LinkedServicesListByFactoryResponse) (*azcore.Request, error)
}

func (p *linkedServicesListByFactoryPager) Err() error {
	return p.err
}

func (p *linkedServicesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedServiceListResponse.NextLink == nil || len(*p.current.LinkedServiceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *linkedServicesListByFactoryPager) PageResponse() LinkedServicesListByFactoryResponse {
	return p.current
}

type ManagedPrivateEndpointsListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedPrivateEndpointsListByFactoryResponse.
	PageResponse() ManagedPrivateEndpointsListByFactoryResponse
}

type managedPrivateEndpointsListByFactoryPager struct {
	client    *ManagedPrivateEndpointsClient
	current   ManagedPrivateEndpointsListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedPrivateEndpointsListByFactoryResponse) (*azcore.Request, error)
}

func (p *managedPrivateEndpointsListByFactoryPager) Err() error {
	return p.err
}

func (p *managedPrivateEndpointsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedPrivateEndpointListResponse.NextLink == nil || len(*p.current.ManagedPrivateEndpointListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedPrivateEndpointsListByFactoryPager) PageResponse() ManagedPrivateEndpointsListByFactoryResponse {
	return p.current
}

type ManagedVirtualNetworksListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedVirtualNetworksListByFactoryResponse.
	PageResponse() ManagedVirtualNetworksListByFactoryResponse
}

type managedVirtualNetworksListByFactoryPager struct {
	client    *ManagedVirtualNetworksClient
	current   ManagedVirtualNetworksListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedVirtualNetworksListByFactoryResponse) (*azcore.Request, error)
}

func (p *managedVirtualNetworksListByFactoryPager) Err() error {
	return p.err
}

func (p *managedVirtualNetworksListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedVirtualNetworkListResponse.NextLink == nil || len(*p.current.ManagedVirtualNetworkListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedVirtualNetworksListByFactoryPager) PageResponse() ManagedVirtualNetworksListByFactoryResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResponse.NextLink == nil || len(*p.current.OperationListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type PipelinesListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current PipelinesListByFactoryResponse.
	PageResponse() PipelinesListByFactoryResponse
}

type pipelinesListByFactoryPager struct {
	client    *PipelinesClient
	current   PipelinesListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PipelinesListByFactoryResponse) (*azcore.Request, error)
}

func (p *pipelinesListByFactoryPager) Err() error {
	return p.err
}

func (p *pipelinesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineListResponse.NextLink == nil || len(*p.current.PipelineListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *pipelinesListByFactoryPager) PageResponse() PipelinesListByFactoryResponse {
	return p.current
}

type PrivateEndPointConnectionsListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndPointConnectionsListByFactoryResponse.
	PageResponse() PrivateEndPointConnectionsListByFactoryResponse
}

type privateEndPointConnectionsListByFactoryPager struct {
	client    *PrivateEndPointConnectionsClient
	current   PrivateEndPointConnectionsListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndPointConnectionsListByFactoryResponse) (*azcore.Request, error)
}

func (p *privateEndPointConnectionsListByFactoryPager) Err() error {
	return p.err
}

func (p *privateEndPointConnectionsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResponse.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndPointConnectionsListByFactoryPager) PageResponse() PrivateEndPointConnectionsListByFactoryResponse {
	return p.current
}

type TriggersListByFactoryPager interface {
	azcore.Pager
	// PageResponse returns the current TriggersListByFactoryResponse.
	PageResponse() TriggersListByFactoryResponse
}

type triggersListByFactoryPager struct {
	client    *TriggersClient
	current   TriggersListByFactoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TriggersListByFactoryResponse) (*azcore.Request, error)
}

func (p *triggersListByFactoryPager) Err() error {
	return p.err
}

func (p *triggersListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerListResponse.NextLink == nil || len(*p.current.TriggerListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *triggersListByFactoryPager) PageResponse() TriggersListByFactoryResponse {
	return p.current
}
