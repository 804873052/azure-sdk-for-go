//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package subnets_test

import (
	"context"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/scenario_test"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

var (
	ctx               context.Context
	cred              azcore.TokenCredential
	pathToPackage     = "sdk/resourcemanager/network/armnetwork/scenario_test/subnets/testdata"
	options           *arm.ClientOptions
	resourceGroup     *armresources.ResourceGroup
	resourceName      string
	location          = scenario_test.GetEnv("LOCATION", "eastus")
	resourceGroupName = scenario_test.GetEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId    = scenario_test.GetEnv("SUBSCRIPTION_ID", scenario_test.GetEnv("AZURE_SUBSCRIPTION_ID", ""))
)

func TestSubnets(t *testing.T) {
	// Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
	// Clenup for test
	t.Cleanup(func() {
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
		scenario_test.StopRecording(t)
	})
	prepare(t)
	scenarioSubnets(t)
	cleanup(t)
}

func prepare(t *testing.T) {
	// From step Generate_Unique_Name
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"resourceName": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"name": map[string]interface{}{
					"type": "string",
					"metadata": map[string]interface{}{
						"description": "Name of the Resource Group.",
					},
					"value": "[concat('sw',uniqueString(resourceGroup().id))]",
				},
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Generate_Unique_Name", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)
	}
}

func scenarioSubnets(t *testing.T) {
	virtualNetworkName := "scenarios_vn"
	// From step VirtualNetwork_BeginCreateOrUpdat
	virtualNetworksClient := armnetwork.NewVirtualNetworksClient(subscriptionId, cred, options)
	{
		virtualNetworksClientCreateOrUpdatePollerResponse, err := virtualNetworksClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			virtualNetworkName,
			armnetwork.VirtualNetwork{
				Location: to.StringPtr(location),
				Properties: &armnetwork.VirtualNetworkPropertiesFormat{
					AddressSpace: &armnetwork.AddressSpace{
						AddressPrefixes: []*string{
							to.StringPtr("10.0.0.0/16")},
					},
					FlowTimeoutInMinutes: to.Int32Ptr(10),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response armnetwork.VirtualNetworksClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = virtualNetworksClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if virtualNetworksClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = virtualNetworksClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = virtualNetworksClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.VirtualNetworksClientCreateOrUpdateResult)
	}

	// From step Subnets_BeginCreateOrUpdate
	subnetsClient := armnetwork.NewSubnetsClient(subscriptionId, cred, options)
	{
		subnetsClientCreateOrUpdatePollerResponse, err := subnetsClient.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			virtualNetworkName,
			"subnet1",
			armnetwork.Subnet{
				Properties: &armnetwork.SubnetPropertiesFormat{
					AddressPrefix: to.StringPtr("10.0.0.0/16"),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response armnetwork.SubnetsClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = subnetsClientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if subnetsClientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = subnetsClientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = subnetsClientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.SubnetsClientCreateOrUpdateResult)
	}

	// From step Subnets_Get
	{
		subnetsClientGetResponse, err := subnetsClient.Get(ctx,
			resourceGroupName,
			virtualNetworkName,
			"subnet1",
			&armnetwork.SubnetsClientGetOptions{Expand: nil})
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", subnetsClientGetResponse.SubnetsClientGetResult)
	}

	// From step Subnets_List
	{
		subnetsClientListPager := subnetsClient.List(resourceGroupName,
			virtualNetworkName,
			nil)
		for subnetsClientListPager.NextPage(ctx) {
			if err := subnetsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range subnetsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Subnets_Delete
	{
		subnetsClientDeletePollerResponse, err := subnetsClient.BeginDelete(ctx,
			resourceGroupName,
			virtualNetworkName,
			"subnet1",
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = subnetsClientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if subnetsClientDeletePollerResponse.Poller.Done() {
					_, err = subnetsClientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = subnetsClientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}
}

func cleanup(t *testing.T) {
}
