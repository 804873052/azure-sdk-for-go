//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PolicyPricingsClient contains the methods for the PolicyPricings group.
// Don't use this type directly, use NewPolicyPricingsClient() instead.
type PolicyPricingsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewPolicyPricingsClient creates a new instance of PolicyPricingsClient with the specified values.
func NewPolicyPricingsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *PolicyPricingsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &PolicyPricingsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginCreateOrUpdate - This operation creates or updates a policy pricing with the given scope and name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) BeginCreateOrUpdate(ctx context.Context, scope string, policyPricingName string, parameters PolicyPricing, options *PolicyPricingsBeginCreateOrUpdateOptions) (PolicyPricingsCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, scope, policyPricingName, parameters, options)
	if err != nil {
		return PolicyPricingsCreateOrUpdatePollerResponse{}, err
	}
	result := PolicyPricingsCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("PolicyPricingsClient.CreateOrUpdate", "", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return PolicyPricingsCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &PolicyPricingsCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - This operation creates or updates a policy pricing with the given scope and name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) createOrUpdate(ctx context.Context, scope string, policyPricingName string, parameters PolicyPricing, options *PolicyPricingsBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, scope, policyPricingName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PolicyPricingsClient) createOrUpdateCreateRequest(ctx context.Context, scope string, policyPricingName string, parameters PolicyPricing, options *PolicyPricingsBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyPricings/{policyPricingName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyPricingName == "" {
		return nil, errors.New("parameter policyPricingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyPricingName}", url.PathEscape(policyPricingName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *PolicyPricingsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - This operation deletes a policy pricing, given its name and the scope it was created in. The scope of a policy pricing is the part of its
// ID preceding
// '/providers/Microsoft.Authorization/policyPricings/{policyPricingName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) BeginDelete(ctx context.Context, scope string, policyPricingName string, options *PolicyPricingsBeginDeleteOptions) (PolicyPricingsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, scope, policyPricingName, options)
	if err != nil {
		return PolicyPricingsDeletePollerResponse{}, err
	}
	result := PolicyPricingsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("PolicyPricingsClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return PolicyPricingsDeletePollerResponse{}, err
	}
	result.Poller = &PolicyPricingsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - This operation deletes a policy pricing, given its name and the scope it was created in. The scope of a policy pricing is the part of its ID
// preceding
// '/providers/Microsoft.Authorization/policyPricings/{policyPricingName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) deleteOperation(ctx context.Context, scope string, policyPricingName string, options *PolicyPricingsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, scope, policyPricingName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PolicyPricingsClient) deleteCreateRequest(ctx context.Context, scope string, policyPricingName string, options *PolicyPricingsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyPricings/{policyPricingName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyPricingName == "" {
		return nil, errors.New("parameter policyPricingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyPricingName}", url.PathEscape(policyPricingName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *PolicyPricingsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - This operation retrieves a single policy pricing, given its name and the scope it was created at.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) Get(ctx context.Context, scope string, policyPricingName string, options *PolicyPricingsGetOptions) (PolicyPricingsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, policyPricingName, options)
	if err != nil {
		return PolicyPricingsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyPricingsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyPricingsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PolicyPricingsClient) getCreateRequest(ctx context.Context, scope string, policyPricingName string, options *PolicyPricingsGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyPricings/{policyPricingName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyPricingName == "" {
		return nil, errors.New("parameter policyPricingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyPricingName}", url.PathEscape(policyPricingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicyPricingsClient) getHandleResponse(resp *http.Response) (PolicyPricingsGetResponse, error) {
	result := PolicyPricingsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyPricing); err != nil {
		return PolicyPricingsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PolicyPricingsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - This operation retrieves the list of all policy pricings associated with the given subscription and the management group ancestors.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) List(options *PolicyPricingsListOptions) *PolicyPricingsListPager {
	return &PolicyPricingsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp PolicyPricingsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyPricingListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *PolicyPricingsClient) listCreateRequest(ctx context.Context, options *PolicyPricingsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyPricings"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicyPricingsClient) listHandleResponse(resp *http.Response) (PolicyPricingsListResponse, error) {
	result := PolicyPricingsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyPricingListResult); err != nil {
		return PolicyPricingsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PolicyPricingsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListForManagementGroup - This operation retrieves the list of all policy pricings associated with the given subscription and the management group ancestors.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyPricingsClient) ListForManagementGroup(managementGroupID string, options *PolicyPricingsListForManagementGroupOptions) *PolicyPricingsListForManagementGroupPager {
	return &PolicyPricingsListForManagementGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listForManagementGroupCreateRequest(ctx, managementGroupID, options)
		},
		advancer: func(ctx context.Context, resp PolicyPricingsListForManagementGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyPricingListResult.NextLink)
		},
	}
}

// listForManagementGroupCreateRequest creates the ListForManagementGroup request.
func (client *PolicyPricingsClient) listForManagementGroupCreateRequest(ctx context.Context, managementGroupID string, options *PolicyPricingsListForManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyPricings"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listForManagementGroupHandleResponse handles the ListForManagementGroup response.
func (client *PolicyPricingsClient) listForManagementGroupHandleResponse(resp *http.Response) (PolicyPricingsListForManagementGroupResponse, error) {
	result := PolicyPricingsListForManagementGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyPricingListResult); err != nil {
		return PolicyPricingsListForManagementGroupResponse{}, err
	}
	return result, nil
}

// listForManagementGroupHandleError handles the ListForManagementGroup error response.
func (client *PolicyPricingsClient) listForManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
