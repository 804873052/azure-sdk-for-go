//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armworkloadmonitor_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetDefault.json
func ExampleHealthMonitorsClient_NewListPager_getMonitorListWithDefaultValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", &armworkloadmonitor.HealthMonitorsClientListOptions{Filter: nil,
		Expand: nil,
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorList = armworkloadmonitor.HealthMonitorList{
		// 	Value: []*armworkloadmonitor.HealthMonitor{
		// 		{
		// 			Name: to.Ptr("root"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("root"),
		// 				MonitorType: to.Ptr("root"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr(""),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("logical-disks"),
		// 				MonitorType: to.Ptr("logical-disks"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks|C@3A"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:"),
		// 				MonitorType: to.Ptr("logical-disks|*"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				ParentMonitorName: to.Ptr("logical-disks"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks|C@3A|free-space"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				ParentMonitorName: to.Ptr("logical-disks|C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("cpu-utilization"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("cpu-utilization"),
		// 				MonitorType: to.Ptr("cpu-utilization"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("memory"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("memory"),
		// 				MonitorType: to.Ptr("memory"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("memory|available"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory|available"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("memory|available"),
		// 				MonitorType: to.Ptr("memory|available"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("memory"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetExpanded.json
func ExampleHealthMonitorsClient_NewListPager_getMonitorListWithExpandedValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", &armworkloadmonitor.HealthMonitorsClientListOptions{Filter: nil,
		Expand: to.Ptr("evidence,configuration"),
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorList = armworkloadmonitor.HealthMonitorList{
		// 	Value: []*armworkloadmonitor.HealthMonitor{
		// 		{
		// 			Name: to.Ptr("root"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-15T17:01:46Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				Evidence: map[string]any{
		// 					"memberMonitors":[]any{
		// 						map[string]any{
		// 							"monitorName": "logical-disks",
		// 							"state": "critical",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 						map[string]any{
		// 							"monitorName": "memory",
		// 							"state": "healthy",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 						map[string]any{
		// 							"monitorName": "cpu-utilization",
		// 							"state": "warning",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 					},
		// 					"reason":map[string]any{
		// 						"Code": float64(1100),
		// 						"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 				},
		// 				MonitorName: to.Ptr("root"),
		// 				MonitorType: to.Ptr("root"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr(""),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-15T17:01:46Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"memberMonitors":[]any{
		// 						map[string]any{
		// 							"monitorName": "logical-disks|C:",
		// 							"state": "critical",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 					},
		// 					"reason":map[string]any{
		// 						"Code": float64(1100),
		// 						"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 				},
		// 				MonitorName: to.Ptr("logical-disks"),
		// 				MonitorType: to.Ptr("logical-disks"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks|C@3A"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:28:44Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"memberMonitors":[]any{
		// 						map[string]any{
		// 							"monitorName": "logical-disks|C:|free-space",
		// 							"state": "critical",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 					},
		// 					"reason":map[string]any{
		// 						"Code": float64(1100),
		// 						"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 				},
		// 				MonitorName: to.Ptr("logical-disks|C:"),
		// 				MonitorType: to.Ptr("logical-disks|*"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				ParentMonitorName: to.Ptr("logical-disks"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("logical-disks|C@3A|free-space"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:28:44Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"Code": float64(2100),
		// 						"Message": "Collected samples met critical condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:23:25.823Z",
		// 							"value": float64(4),
		// 						},
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(5),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Max",
		// 						"lookbackSecs": float64(120),
		// 						"maxSamples": float64(1),
		// 						"minSamples": float64(1),
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				ParentMonitorName: to.Ptr("logical-disks|C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("cpu-utilization"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/cpu-utilization"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:30:28Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"Code": float64(2200),
		// 						"Message": "Collected samples met warning condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:21:25.819Z",
		// 							"value": float64(75),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:22:25.822Z",
		// 							"value": float64(80),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:23:25.82Z",
		// 							"value": float64(83),
		// 						},
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": ">",
		// 							"threshold": float64(90),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Min",
		// 						"lookbackSecs": float64(240),
		// 						"maxSamples": float64(3),
		// 						"minSamples": float64(2),
		// 						"warningCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": ">",
		// 							"threshold": float64(70),
		// 						},
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("cpu-utilization"),
		// 				MonitorType: to.Ptr("cpu-utilization"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("memory"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:29:28Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"memberMonitors":[]any{
		// 						map[string]any{
		// 							"monitorName": "memory|available",
		// 							"state": "healthy",
		// 							"timestamp": "2020-10-20T13:24:14.742Z",
		// 						},
		// 					},
		// 					"reason":map[string]any{
		// 						"Code": float64(1100),
		// 						"Message": "Aggregate monitor state evaluated to the worst state of its member monitors.",
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 				},
		// 				MonitorName: to.Ptr("memory"),
		// 				MonitorType: to.Ptr("memory"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("root"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("memory|available"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/memory|available"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-09-07T21:29:28Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"Code": float64(2300),
		// 						"Message": "Collected samples met healthy condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:21:25.82Z",
		// 							"value": float64(73.27),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:22:25.822Z",
		// 							"value": float64(77.28),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T13:23:25.821Z",
		// 							"value": float64(60.95),
		// 						},
		// 					},
		// 				},
		// 				LastReportedTimestamp: to.Ptr("2020-10-20T16:05:12Z"),
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(100),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Max",
		// 						"lookbackSecs": float64(240),
		// 						"maxSamples": float64(3),
		// 						"minSamples": float64(2),
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("memory|available"),
		// 				MonitorType: to.Ptr("memory|available"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr("memory"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorList_GetFiltered.json
func ExampleHealthMonitorsClient_NewListPager_getMonitorListWithFilteredValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", &armworkloadmonitor.HealthMonitorsClientListOptions{Filter: to.Ptr("monitorName eq 'root'"),
		Expand: nil,
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorList = armworkloadmonitor.HealthMonitorList{
		// 	Value: []*armworkloadmonitor.HealthMonitor{
		// 		{
		// 			Name: to.Ptr("root"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/root"),
		// 			Properties: &armworkloadmonitor.HealthMonitorProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
		// 				MonitorName: to.Ptr("root"),
		// 				MonitorType: to.Ptr("root"),
		// 				MonitoredObject: to.Ptr(""),
		// 				ParentMonitorName: to.Ptr(""),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetDefault.json
func ExampleHealthMonitorsClient_Get_getMonitorWithDefaultValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewHealthMonitorsClient().Get(ctx, "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A|free-space", &armworkloadmonitor.HealthMonitorsClientGetOptions{Expand: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.HealthMonitor = armworkloadmonitor.HealthMonitor{
	// 	Name: to.Ptr("logical-disks|C@3A|free-space"),
	// 	Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
	// 	ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
	// 	Properties: &armworkloadmonitor.HealthMonitorProperties{
	// 		CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
	// 		CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
	// 		EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
	// 		LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
	// 		MonitorName: to.Ptr("logical-disks|C:|free-space"),
	// 		MonitorType: to.Ptr("logical-disks|*|free-space"),
	// 		MonitoredObject: to.Ptr("C:"),
	// 		ParentMonitorName: to.Ptr("logical-disks|C:"),
	// 		PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/Monitor_GetExpanded.json
func ExampleHealthMonitorsClient_Get_getMonitorWithExpandedValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewHealthMonitorsClient().Get(ctx, "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A|free-space", &armworkloadmonitor.HealthMonitorsClientGetOptions{Expand: to.Ptr("evidence")})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.HealthMonitor = armworkloadmonitor.HealthMonitor{
	// 	Name: to.Ptr("logical-disks|C@3A|free-space"),
	// 	Type: to.Ptr("Microsoft.WorkloadMonitor/monitors"),
	// 	ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space"),
	// 	Properties: &armworkloadmonitor.HealthMonitorProperties{
	// 		CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
	// 		CurrentStateFirstObservedTimestamp: to.Ptr("2020-02-15T20:20:1.5765757Z"),
	// 		EvaluationTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
	// 		Evidence: map[string]any{
	// 			"reason":map[string]any{
	// 				"code": float64(2200),
	// 				"message": "Collected samples met warning condition for this monitor.",
	// 			},
	// 			"samples":[]any{
	// 				map[string]any{
	// 					"timestamp": "2020-03-24T20:51:00.6058242Z",
	// 					"value": float64(7.019),
	// 				},
	// 				map[string]any{
	// 					"timestamp": "2020-03-24T21:51:00.6058242Z",
	// 					"value": float64(6.019),
	// 				},
	// 			},
	// 		},
	// 		LastReportedTimestamp: to.Ptr("2020-02-15T20:20:18.5765757Z"),
	// 		MonitorName: to.Ptr("logical-disks|C:|free-space"),
	// 		MonitorType: to.Ptr("logical-disks|*|free-space"),
	// 		MonitoredObject: to.Ptr("C:"),
	// 		ParentMonitorName: to.Ptr("logical-disks|C:"),
	// 		PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetDefault.json
func ExampleHealthMonitorsClient_NewListStateChangesPager_getMonitorStateChangesWithDefaultValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListStateChangesPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A", &armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: nil,
		Expand:            nil,
		StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-19T19:24:14Z"); return t }()),
		EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-20T01:24:14Z"); return t }()),
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorStateChangeList = armworkloadmonitor.HealthMonitorStateChangeList{
		// 	Value: []*armworkloadmonitor.HealthMonitorStateChange{
		// 		{
		// 			Name: to.Ptr("1578514818"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-19T19:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-19T19:24:14Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("1578255618"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T01:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("1578255618"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T01:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T01:24:14Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetExpanded.json
func ExampleHealthMonitorsClient_NewListStateChangesPager_getMonitorStateChangesWithExpandedValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListStateChangesPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A", &armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: nil,
		Expand:            to.Ptr("evidence,configuration"),
		StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-19T07:22:25.824Z"); return t }()),
		EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-21T13:22:25.822Z"); return t }()),
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorStateChangeList = armworkloadmonitor.HealthMonitorStateChangeList{
		// 	Value: []*armworkloadmonitor.HealthMonitorStateChange{
		// 		{
		// 			Name: to.Ptr("1578514818"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"code": float64(2200),
		// 						"message": "Collected samples met warning condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T07:21:25.823Z",
		// 							"value": float64(7.9),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-20T07:22:25.824Z",
		// 							"value": float64(5.7),
		// 						},
		// 					},
		// 				},
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(5),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Max",
		// 						"lookbackSecs": float64(120),
		// 						"maxSamples": float64(1),
		// 						"minSamples": float64(1),
		// 						"warningCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(8),
		// 						},
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("1578255618"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-19T19:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T13:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"code": float64(2200),
		// 						"message": "Collected samples met warning condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-19T19:21:25.822Z",
		// 							"value": float64(6.7),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-19T19:22:25.822Z",
		// 							"value": float64(7),
		// 						},
		// 					},
		// 				},
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(5),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Max",
		// 						"lookbackSecs": float64(120),
		// 						"maxSamples": float64(1),
		// 						"minSamples": float64(1),
		// 						"warningCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(8),
		// 						},
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("1578255618"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
		// 				Evidence: map[string]any{
		// 					"reason":map[string]any{
		// 						"code": float64(2300),
		// 						"message": "Collected samples met healthy condition for this monitor.",
		// 					},
		// 					"samples":[]any{
		// 						map[string]any{
		// 							"timestamp": "2020-10-19T19:21:25.822Z",
		// 							"value": float64(9),
		// 						},
		// 						map[string]any{
		// 							"timestamp": "2020-10-19T19:22:25.822Z",
		// 							"value": float64(10.6),
		// 						},
		// 					},
		// 				},
		// 				MonitorConfiguration: map[string]any{
		// 					"isEnabled": true,
		// 					"monitorConfiguration":map[string]any{
		// 						"criticalCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(5),
		// 						},
		// 						"evaluationFrequencySecs": float64(60),
		// 						"evaluationType": "Max",
		// 						"lookbackSecs": float64(120),
		// 						"maxSamples": float64(1),
		// 						"minSamples": float64(1),
		// 						"warningCondition":map[string]any{
		// 							"isEnabled": true,
		// 							"operator": "<",
		// 							"threshold": float64(8),
		// 						},
		// 					},
		// 				},
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorHistory_GetFiltered.json
func ExampleHealthMonitorsClient_NewListStateChangesPager_getMonitorStateChangesWithFilteredValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewHealthMonitorsClient().NewListStateChangesPager("bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A|free-space", &armworkloadmonitor.HealthMonitorsClientListStateChangesOptions{Filter: to.Ptr("isHeartbeat eq false"),
		Expand:            nil,
		StartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-04T20:20:18.5765757Z"); return t }()),
		EndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-09T20:20:18.5765757Z"); return t }()),
	})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.HealthMonitorStateChangeList = armworkloadmonitor.HealthMonitorStateChangeList{
		// 	Value: []*armworkloadmonitor.HealthMonitorStateChange{
		// 		{
		// 			Name: to.Ptr("1578514818"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T07:24:14Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("1578255618"),
		// 			Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
		// 			ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578255618"),
		// 			Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
		// 				CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateHealthy),
		// 				CurrentStateFirstObservedTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
		// 				EvaluationTimestamp: to.Ptr("2020-10-20T19:24:14Z"),
		// 				MonitorName: to.Ptr("logical-disks|C:|free-space"),
		// 				MonitorType: to.Ptr("logical-disks|*|free-space"),
		// 				MonitoredObject: to.Ptr("C:"),
		// 				PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetDefault.json
func ExampleHealthMonitorsClient_GetStateChange_getMonitorStateChangeWithDefaultValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewHealthMonitorsClient().GetStateChange(ctx, "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A", "1584316800", &armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions{Expand: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.HealthMonitorStateChange = armworkloadmonitor.HealthMonitorStateChange{
	// 	Name: to.Ptr("1578514818"),
	// 	Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
	// 	ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
	// 	Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
	// 		CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
	// 		CurrentStateFirstObservedTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
	// 		EvaluationTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
	// 		MonitorName: to.Ptr("logical-disks|C:|free-space"),
	// 		MonitorType: to.Ptr("logical-disks|*|free-space"),
	// 		MonitoredObject: to.Ptr("C:"),
	// 		PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetExpanded.json
func ExampleHealthMonitorsClient_GetStateChange_getMonitorStateChangeWithExpandedValues() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewHealthMonitorsClient().GetStateChange(ctx, "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A", "1584316800", &armworkloadmonitor.HealthMonitorsClientGetStateChangeOptions{Expand: to.Ptr("evidence")})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.HealthMonitorStateChange = armworkloadmonitor.HealthMonitorStateChange{
	// 	Name: to.Ptr("1578514818"),
	// 	Type: to.Ptr("Microsoft.WorkloadMonitor/monitors/history"),
	// 	ID: to.Ptr("/subscriptions/bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21/resourceGroups/tugamidiAlerts/providers/Microsoft.Compute/virtualMachines/linuxEUS/providers/Microsoft.WorkloadMonitor/monitors/logical-disks|C@3A|free-space/history/1578514818"),
	// 	Properties: &armworkloadmonitor.HealthMonitorStateChangeProperties{
	// 		CurrentMonitorState: to.Ptr(armworkloadmonitor.HealthStateWarning),
	// 		CurrentStateFirstObservedTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
	// 		EvaluationTimestamp: to.Ptr("2020-01-07T20:20:18.5765757Z"),
	// 		Evidence: map[string]any{
	// 			"reason":map[string]any{
	// 				"Code": float64(2200),
	// 				"Message": "Collected samples met warning condition for this monitor.",
	// 			},
	// 			"samples":[]any{
	// 				map[string]any{
	// 					"timestamp": "2020-10-20T13:23:25.823Z",
	// 					"value": float64(87.1828),
	// 				},
	// 			},
	// 		},
	// 		MonitorName: to.Ptr("logical-disks|C:|free-space"),
	// 		MonitorType: to.Ptr("logical-disks|*|free-space"),
	// 		MonitoredObject: to.Ptr("C:"),
	// 		PreviousMonitorState: to.Ptr(armworkloadmonitor.HealthStateCritical),
	// 	},
	// }
}
