//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armworkloadmonitor_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadmonitor/armworkloadmonitor"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d55b8005f05b040b852c15e74a0f3e36494a15e1/specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/OperationList_Get.json
func ExampleOperationsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armworkloadmonitor.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewOperationsClient().NewListPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.OperationList = armworkloadmonitor.OperationList{
		// 	Value: []*armworkloadmonitor.Operation{
		// 		{
		// 			Name: to.Ptr("Microsoft.WorkloadMonitor/operations/read"),
		// 			Display: &armworkloadmonitor.OperationDisplay{
		// 				Description: to.Ptr("Gets a list of the supported operations"),
		// 				Operation: to.Ptr("Get operations"),
		// 				Provider: to.Ptr("Microsoft.WorkloadMonitor"),
		// 				Resource: to.Ptr("Operations"),
		// 			},
		// 			Origin: to.Ptr("user, system"),
		// 		},
		// 		{
		// 			Name: to.Ptr("Microsoft.WorkloadMonitor/monitors/read"),
		// 			Display: &armworkloadmonitor.OperationDisplay{
		// 				Description: to.Ptr("Gets monitors and their current health state"),
		// 				Operation: to.Ptr("Get monitors"),
		// 				Provider: to.Ptr("Microsoft.WorkloadMonitor"),
		// 				Resource: to.Ptr("Monitors"),
		// 			},
		// 			Origin: to.Ptr("user, system"),
		// 		},
		// 		{
		// 			Name: to.Ptr("Microsoft.WorkloadMonitor/monitors/history/read"),
		// 			Display: &armworkloadmonitor.OperationDisplay{
		// 				Description: to.Ptr("Gets the history of health changes of a specific monitor"),
		// 				Operation: to.Ptr("Get monitor history"),
		// 				Provider: to.Ptr("Microsoft.WorkloadMonitor"),
		// 				Resource: to.Ptr("Monitors"),
		// 			},
		// 			Origin: to.Ptr("user, system"),
		// 		},
		// 		{
		// 			Name: to.Ptr("Microsoft.WorkloadMonitor/register/action"),
		// 			Display: &armworkloadmonitor.OperationDisplay{
		// 				Description: to.Ptr("Registers subscription with Microsoft.WorkloadMonitor resource provider"),
		// 				Operation: to.Ptr("Register Subscription for VMHealth"),
		// 				Provider: to.Ptr("Microsoft.WorkloadMonitor"),
		// 				Resource: to.Ptr("WorkloadMonitor Register Subscription"),
		// 			},
		// 			Origin: to.Ptr("user, system"),
		// 		},
		// 		{
		// 			Name: to.Ptr("Microsoft.WorkloadMonitor/unregister/action"),
		// 			Display: &armworkloadmonitor.OperationDisplay{
		// 				Description: to.Ptr("Unregisters subscription with Microsoft.WorkloadMonitor resource provider"),
		// 				Operation: to.Ptr("Unregister Subscription for VMHealth"),
		// 				Provider: to.Ptr("Microsoft.WorkloadMonitor"),
		// 				Resource: to.Ptr("WorkloadMonitor Register Subscription"),
		// 			},
		// 			Origin: to.Ptr("user, system"),
		// 	}},
		// }
	}
}
