//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestack/armazurestack"
)

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/List.json
func ExampleProductsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group>",
		"<registration-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Product.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Get.json
func ExampleProductsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group>",
		"<registration-name>",
		"<product-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Product.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/Post.json
func ExampleProductsClient_ListDetails() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	_, err = client.ListDetails(ctx,
		"<resource-group>",
		"<registration-name>",
		"<product-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/ListPost.json
func ExampleProductsClient_GetProducts() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	_, err = client.GetProducts(ctx,
		"<resource-group>",
		"<registration-name>",
		"<product-name>",
		&armazurestack.ProductsGetProductsOptions{DeviceConfiguration: nil})
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/GetPost.json
func ExampleProductsClient_GetProduct() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	res, err := client.GetProduct(ctx,
		"<resource-group>",
		"<registration-name>",
		"<product-name>",
		&armazurestack.ProductsGetProductOptions{DeviceConfiguration: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Product.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/azurestack/resource-manager/Microsoft.AzureStack/preview/2020-06-01-preview/examples/Product/UploadLog.json
func ExampleProductsClient_UploadLog() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armazurestack.NewProductsClient("<subscription-id>", cred, nil)
	res, err := client.UploadLog(ctx,
		"<resource-group>",
		"<registration-name>",
		"<product-name>",
		&armazurestack.ProductsUploadLogOptions{MarketplaceProductLogUpdate: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("ProductLog.ID: %s\n", *res.ID)
}
