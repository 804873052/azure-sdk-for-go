//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v4"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v4/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	ctx := context.Background()
	fakeServer := fake.OperationsServer{}
	client, err := armcontainerservice.NewOperationsClient(testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewOperationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/Operation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations for the container service resource provider"},
	})

	exampleRes := armcontainerservice.OperationListResult{
		Value: []*armcontainerservice.OperationValue{
			{
				Name: to.Ptr("Microsoft.ContainerService/locations/operations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the status of an asynchronous operation"),
					Operation:   to.Ptr("Get Operation"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Operation"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/locations/orchestrators/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Lists the supported orchestrators"),
					Operation:   to.Ptr("List Orchestrators"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Orchestrator"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/locations/osOptions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets OS options"),
					Operation:   to.Ptr("Get OS Options"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("OSOptions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/operations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Lists operations available on Microsoft.ContainerService resource provider"),
					Operation:   to.Ptr("List Available Container Service Operations"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Available Container Service Operations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/register/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Registers Subscription with Microsoft.ContainerService resource provider"),
					Operation:   to.Ptr("Register Subscription for Container Service"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Container Service Register Subscription"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/unregister/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Unregisters Subscription with Microsoft.ContainerService resource provider"),
					Operation:   to.Ptr("Unregister Subscription for Container Service"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Container Service Unregister Subscription"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/locations/operationresults/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the status of an asynchronous operation result"),
					Operation:   to.Ptr("Get Operation Result"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("OperationResult"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/containerServices/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a container service"),
					Operation:   to.Ptr("Get Container Service"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Container Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/containerServices/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new container service or updates an existing one"),
					Operation:   to.Ptr("Create or Update Container Service"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Container Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/containerServices/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes a container service"),
					Operation:   to.Ptr("Delete Container Service"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Container Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a managed cluster"),
					Operation:   to.Ptr("Get Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new managed cluster or updates an existing one"),
					Operation:   to.Ptr("Create or Update Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes a managed cluster"),
					Operation:   to.Ptr("Delete Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/start/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Starts a managed cluster"),
					Operation:   to.Ptr("Start Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/stop/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Stops a managed cluster"),
					Operation:   to.Ptr("Stop Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets a maintenance configuration"),
					Operation:   to.Ptr("Get a maintenance configuration"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Maintenance Configurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new MaintenanceConfiguration or updates an existing one"),
					Operation:   to.Ptr("Create or Update maintenance configuratio"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Maintenance Configurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes a maintenance configuration"),
					Operation:   to.Ptr("Delete Maintenance Configuration"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Maintenance Configurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets an agent pool"),
					Operation:   to.Ptr("Get Agent Pool"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Agent Pools"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new agent pool or updates an existing one"),
					Operation:   to.Ptr("Create or Update Agent Pool"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Agent Pools"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes an agent pool"),
					Operation:   to.Ptr("Delete Agent Pool"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Agent Pools"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeProfiles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the upgrade profile of the Agent Pool"),
					Operation:   to.Ptr("Get Agent Pool UpgradeProfile"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Agent Pools"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeNodeImageVersion/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Upgrade the node image version of agent pool"),
					Operation:   to.Ptr("Upgrade agent pool node image version"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Agent Pools"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/availableAgentPoolVersions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the available agent pool versions of the cluster"),
					Operation:   to.Ptr("Get Available Agent Pool Versions"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/accessProfiles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a managed cluster access profile by role name"),
					Operation:   to.Ptr("Get Managed Cluster AccessProfile"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/accessProfiles/listCredential/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a managed cluster access profile by role name using list credential"),
					Operation:   to.Ptr("Get Managed Cluster AccessProfile by List Credential"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/upgradeProfiles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the upgrade profile of the cluster"),
					Operation:   to.Ptr("Get UpgradeProfile"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("UpgradeProfile"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterAdminCredential/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("List the clusterAdmin credential of a managed cluster"),
					Operation:   to.Ptr("List clusterAdmin credential"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterUserCredential/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("List the clusterUser credential of a managed cluster"),
					Operation:   to.Ptr("List clusterUser credential"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/listClusterMonitoringUserCredential/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("List the clusterMonitoringUser credential of a managed cluster"),
					Operation:   to.Ptr("List clusterMonitoringUser credential"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetServicePrincipalProfile/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reset the service principal profile of a managed cluster"),
					Operation:   to.Ptr("Reset service principal profile"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resolvePrivateLinkServiceId/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Resolve the private link service id of a managed cluster"),
					Operation:   to.Ptr("Resolve private link service id"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetAADProfile/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reset the AAD profile of a managed cluster"),
					Operation:   to.Ptr("Reset AAD profile"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rotateClusterCertificates/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Rotate certificates of a managed cluster"),
					Operation:   to.Ptr("Rotate certificates of the cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/runCommand/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Run user issued command against managed kubernetes server."),
					Operation:   to.Ptr("RunCommand"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/commandResults/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Retrieve result from previous issued command."),
					Operation:   to.Ptr("CommandResult"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/diagnosticSettings/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get the diagnostic setting for a managed cluster resource"),
					Operation:   to.Ptr("Read Diagnostic Setting"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/diagnosticSettings/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates or updates the diagnostic setting for a managed cluster resource"),
					Operation:   to.Ptr("Write Diagnostic Setting"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Clusters"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/detectors/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get Managed Cluster Detector"),
					Operation:   to.Ptr("Get Managed Cluster Detector"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Managed Cluster Detector"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/diagnosticsState/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the diagnostics state of the cluster"),
					Operation:   to.Ptr("Get Diagnostics State"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Diagnostics State"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnectionsApproval/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Determines if user is allowed to approve a private endpoint connection"),
					Operation:   to.Ptr("Approve Private Endpoint Connections"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Approve Private Endpoint Connections"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get private endpoint connection"),
					Operation:   to.Ptr("Get private endpoint connection"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Private Endpoint Connections"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Approve or Reject a private endpoint connection"),
					Operation:   to.Ptr("Update private endpoint connection"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Private Endpoint Connections"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/privateEndpointConnections/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Delete private endpoint connection"),
					Operation:   to.Ptr("Delete private endpoint connection"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Private Endpoint Connections"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets an extension addon"),
					Operation:   to.Ptr("Get an extension addon"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("ExtensionAddons"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new extension addon or updates an existing one"),
					Operation:   to.Ptr("Create or Update extension addon"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("ExtensionAddons"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensionaddons/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes an extension addon"),
					Operation:   to.Ptr("Delete an extension addon"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("ExtensionAddons"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/snapshots/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a snapshot"),
					Operation:   to.Ptr("Get Snapshot"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Snapshots"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/snapshots/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new snapshot"),
					Operation:   to.Ptr("Create Snapshot"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Snapshots"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/snapshots/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes a snapshot"),
					Operation:   to.Ptr("Delete Snapshot"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Snapshots"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get eventgrid filter"),
					Operation:   to.Ptr("Get eventgrid filter"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("EventGridFilters"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Create or Update eventgrid filter"),
					Operation:   to.Ptr("Create or Update eventgrid filter"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("EventGridFilters"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/eventGridFilters/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Delete an eventgrid filter"),
					Operation:   to.Ptr("Delete an eventgrid filter"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("EventGridFilters"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads initializerconfigurations"),
					Operation:   to.Ptr("Gets/List initializerconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Initializerconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes initializerconfigurations"),
					Operation:   to.Ptr("Creates/Updates initializerconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Initializerconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/initializerconfigurations/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes/DeletesCollection initializerconfigurations resource"),
					Operation:   to.Ptr("Initializerconfigurations"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Initializerconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads mutatingwebhookconfigurations"),
					Operation:   to.Ptr("Gets/List mutatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Mutatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes mutatingwebhookconfigurations"),
					Operation:   to.Ptr("Creates/Updates mutatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Mutatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/mutatingwebhookconfigurations/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes mutatingwebhookconfigurations"),
					Operation:   to.Ptr("Deletes/DeletesCollection mutatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Mutatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads validatingwebhookconfigurations"),
					Operation:   to.Ptr("Gets/List validatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Validatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes validatingwebhookconfigurations"),
					Operation:   to.Ptr("Creates/Updates validatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Validatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/admissionregistration.k8s.io/validatingwebhookconfigurations/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes validatingwebhookconfigurations"),
					Operation:   to.Ptr("Deletes/DeletesCollection validatingwebhookconfigurations resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Validatingwebhookconfigurations"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads customresourcedefinitions"),
					Operation:   to.Ptr("Gets/List customresourcedefinitions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Customresourcedefinitions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes customresourcedefinitions"),
					Operation:   to.Ptr("Creates/Updates customresourcedefinitions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Customresourcedefinitions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiextensions.k8s.io/customresourcedefinitions/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes customresourcedefinitions"),
					Operation:   to.Ptr("Deletes/DeletesCollection customresourcedefinitions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Customresourcedefinitions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservices"),
					Operation:   to.Ptr("Gets/List apiservices resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiservices"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes apiservices"),
					Operation:   to.Ptr("Creates/Updates apiservices resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiservices"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apiregistration.k8s.io/apiservices/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes apiservices"),
					Operation:   to.Ptr("Deletes/DeletesCollection apiservices resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiservices"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads controllerrevisions"),
					Operation:   to.Ptr("Gets/List controllerrevisions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Controllerrevisions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes controllerrevisions"),
					Operation:   to.Ptr("Creates/Updates controllerrevisions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Controllerrevisions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/controllerrevisions/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes controllerrevisions"),
					Operation:   to.Ptr("Deletes/DeletesCollection controllerrevisions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Controllerrevisions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads daemonsets"),
					Operation:   to.Ptr("Gets/List daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes daemonsets"),
					Operation:   to.Ptr("Creates/Updates daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/daemonsets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes daemonsets"),
					Operation:   to.Ptr("Deletes/DeletesCollection daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads deployments"),
					Operation:   to.Ptr("Gets/List deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes deployments"),
					Operation:   to.Ptr("Creates/Updates deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/deployments/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes deployments"),
					Operation:   to.Ptr("Deletes/DeletesCollection deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads replicasets"),
					Operation:   to.Ptr("Gets/List replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes replicasets"),
					Operation:   to.Ptr("Creates/Updates replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/replicasets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes replicasets"),
					Operation:   to.Ptr("Deletes/DeletesCollection replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads statefulsets"),
					Operation:   to.Ptr("Gets/List statefulsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Statefulsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes statefulsets"),
					Operation:   to.Ptr("Creates/Updates statefulsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Statefulsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apps/statefulsets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes statefulsets"),
					Operation:   to.Ptr("Deletes/DeletesCollection statefulsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Statefulsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authentication.k8s.io/tokenreviews/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes tokenreviews"),
					Operation:   to.Ptr("Creates/Updates tokenreviews resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Tokenreviews"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/localsubjectaccessreviews/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes localsubjectaccessreviews"),
					Operation:   to.Ptr("Creates/Updates localsubjectaccessreviews resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Localsubjectaccessreviews"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/selfsubjectaccessreviews/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes selfsubjectaccessreviews"),
					Operation:   to.Ptr("Creates/Updates selfsubjectaccessreviews resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Selfsubjectaccessreviews"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/selfsubjectrulesreviews/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes selfsubjectrulesreviews"),
					Operation:   to.Ptr("Creates/Updates selfsubjectrulesreviews resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Selfsubjectrulesreviews"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authorization.k8s.io/subjectaccessreviews/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes subjectaccessreviews"),
					Operation:   to.Ptr("Creates/Updates subjectaccessreviews resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Subjectaccessreviews"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads horizontalpodautoscalers"),
					Operation:   to.Ptr("Gets/List horizontalpodautoscalers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Horizontalpodautoscalers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes horizontalpodautoscalers"),
					Operation:   to.Ptr("Creates/Updates horizontalpodautoscalers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Horizontalpodautoscalers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes horizontalpodautoscalers"),
					Operation:   to.Ptr("Deletes/DeletesCollection horizontalpodautoscalers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Horizontalpodautoscalers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads cronjobs"),
					Operation:   to.Ptr("Gets/List cronjobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Cronjobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes cronjobs"),
					Operation:   to.Ptr("Creates/Updates cronjobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Cronjobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/cronjobs/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes cronjobs"),
					Operation:   to.Ptr("Deletes/DeletesCollection cronjobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Cronjobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads jobs"),
					Operation:   to.Ptr("Gets/List jobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Jobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes jobs"),
					Operation:   to.Ptr("Creates/Updates jobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Jobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/batch/jobs/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes jobs"),
					Operation:   to.Ptr("Deletes/DeletesCollection jobs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Jobs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads certificatesigningrequests"),
					Operation:   to.Ptr("Gets/List certificatesigningrequests resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Certificatesigningrequests"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes certificatesigningrequests"),
					Operation:   to.Ptr("Creates/Updates certificatesigningrequests resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Certificatesigningrequests"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/certificates.k8s.io/certificatesigningrequests/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes certificatesigningrequests"),
					Operation:   to.Ptr("Deletes/DeletesCollection certificatesigningrequests resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Certificatesigningrequests"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads leases"),
					Operation:   to.Ptr("Gets/List leases resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Leases"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes leases"),
					Operation:   to.Ptr("Creates/Updates leases resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Leases"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes leases"),
					Operation:   to.Ptr("Deletes/DeletesCollection leases resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Leases"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/bindings/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes bindings"),
					Operation:   to.Ptr("Creates/Updates bindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Bindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads componentstatuses"),
					Operation:   to.Ptr("Gets/List componentstatuses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Componentstatuses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes componentstatuses"),
					Operation:   to.Ptr("Creates/Updates componentstatuses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Componentstatuses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/componentstatuses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes componentstatuses"),
					Operation:   to.Ptr("Deletes/DeletesCollection componentstatuses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Componentstatuses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads configmaps"),
					Operation:   to.Ptr("Gets/List configmaps resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Configmaps"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes configmaps"),
					Operation:   to.Ptr("Creates/Updates configmaps resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Configmaps"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/configmaps/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes configmaps"),
					Operation:   to.Ptr("Deletes/DeletesCollection configmaps resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Configmaps"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads endpoints"),
					Operation:   to.Ptr("Gets/List endpoints resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Endpoints"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes endpoints"),
					Operation:   to.Ptr("Creates/Updates endpoints resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Endpoints"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/endpoints/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes endpoints"),
					Operation:   to.Ptr("Deletes/DeletesCollection endpoints resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Endpoints"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads events"),
					Operation:   to.Ptr("Gets/List events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes events"),
					Operation:   to.Ptr("Creates/Updates events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes events"),
					Operation:   to.Ptr("Deletes/DeletesCollection events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads limitranges"),
					Operation:   to.Ptr("Gets/List limitranges resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Limitranges"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes limitranges"),
					Operation:   to.Ptr("Creates/Updates limitranges resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Limitranges"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/limitranges/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes limitranges"),
					Operation:   to.Ptr("Deletes/DeletesCollection limitranges resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Limitranges"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads namespaces"),
					Operation:   to.Ptr("Gets/List namespaces resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Namespaces"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes namespaces"),
					Operation:   to.Ptr("Creates/Updates namespaces resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Namespaces"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/namespaces/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes namespaces"),
					Operation:   to.Ptr("Deletes/DeletesCollection namespaces resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Namespaces"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads nodes"),
					Operation:   to.Ptr("Gets/List nodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Nodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes nodes"),
					Operation:   to.Ptr("Creates/Updates nodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Nodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/nodes/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes nodes"),
					Operation:   to.Ptr("Deletes/DeletesCollection nodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Nodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads persistentvolumeclaims"),
					Operation:   to.Ptr("Gets/List persistentvolumeclaims resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumeclaims"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes persistentvolumeclaims"),
					Operation:   to.Ptr("Creates/Updates persistentvolumeclaims resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumeclaims"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumeclaims/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes persistentvolumeclaims"),
					Operation:   to.Ptr("Deletes/DeletesCollection persistentvolumeclaims resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumeclaims"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads persistentvolumes"),
					Operation:   to.Ptr("Gets/List persistentvolumes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes persistentvolumes"),
					Operation:   to.Ptr("Creates/Updates persistentvolumes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/persistentvolumes/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes persistentvolumes"),
					Operation:   to.Ptr("Deletes/DeletesCollection persistentvolumes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Persistentvolumes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads pods"),
					Operation:   to.Ptr("Gets/List pods resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Pods"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes pods"),
					Operation:   to.Ptr("Creates/Updates pods resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Pods"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes pods"),
					Operation:   to.Ptr("Deletes/DeletesCollection pods resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Pods"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/pods/exec/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Exec into pods resource"),
					Operation:   to.Ptr("Exec into pods resource "),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Pods"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads podtemplates"),
					Operation:   to.Ptr("Gets/List podtemplates resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podtemplates"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes podtemplates"),
					Operation:   to.Ptr("Creates/Updates podtemplates resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podtemplates"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/podtemplates/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes podtemplates"),
					Operation:   to.Ptr("Deletes/DeletesCollection podtemplates resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podtemplates"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads replicationcontrollers"),
					Operation:   to.Ptr("Gets/List replicationcontrollers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicationcontrollers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes replicationcontrollers"),
					Operation:   to.Ptr("Creates/Updates replicationcontrollers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicationcontrollers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/replicationcontrollers/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes replicationcontrollers"),
					Operation:   to.Ptr("Deletes/DeletesCollection replicationcontrollers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicationcontrollers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads resourcequotas"),
					Operation:   to.Ptr("Gets/List resourcequotas resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Resourcequotas"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes resourcequotas"),
					Operation:   to.Ptr("Creates/Updates resourcequotas resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Resourcequotas"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resourcequotas/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes resourcequotas"),
					Operation:   to.Ptr("Deletes/DeletesCollection resourcequotas resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Resourcequotas"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads secrets"),
					Operation:   to.Ptr("Gets/List secrets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Secrets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes secrets"),
					Operation:   to.Ptr("Creates/Updates secrets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Secrets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/secrets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes secrets"),
					Operation:   to.Ptr("Deletes/DeletesCollection secrets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Secrets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads serviceaccounts"),
					Operation:   to.Ptr("Gets/List serviceaccounts resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Serviceaccounts"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes serviceaccounts"),
					Operation:   to.Ptr("Creates/Updates serviceaccounts resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Serviceaccounts"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes serviceaccounts"),
					Operation:   to.Ptr("Deletes/DeletesCollection serviceaccounts resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Serviceaccounts"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads services"),
					Operation:   to.Ptr("Gets/List services resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes services"),
					Operation:   to.Ptr("Creates/Updates services resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/services/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes services"),
					Operation:   to.Ptr("Deletes/DeletesCollection services resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Services"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads events"),
					Operation:   to.Ptr("Gets/List events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes events"),
					Operation:   to.Ptr("Creates/Updates events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/events.k8s.io/events/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes events"),
					Operation:   to.Ptr("Deletes/DeletesCollection events resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads daemonsets"),
					Operation:   to.Ptr("Gets/List daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes daemonsets"),
					Operation:   to.Ptr("Creates/Updates daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/daemonsets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes daemonsets"),
					Operation:   to.Ptr("Deletes/DeletesCollection daemonsets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Daemonsets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads deployments"),
					Operation:   to.Ptr("Gets/List deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes deployments"),
					Operation:   to.Ptr("Creates/Updates deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/deployments/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes deployments"),
					Operation:   to.Ptr("Deletes/DeletesCollection deployments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Deployments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ingresses"),
					Operation:   to.Ptr("Gets/List ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes ingresses"),
					Operation:   to.Ptr("Creates/Updates ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/ingresses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes ingresses"),
					Operation:   to.Ptr("Deletes/DeletesCollection ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads networkpolicies"),
					Operation:   to.Ptr("Gets/List networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes networkpolicies"),
					Operation:   to.Ptr("Creates/Updates networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/networkpolicies/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes networkpolicies"),
					Operation:   to.Ptr("Deletes/DeletesCollection networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads podsecuritypolicies"),
					Operation:   to.Ptr("Gets/List podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes podsecuritypolicies"),
					Operation:   to.Ptr("Creates/Updates podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/podsecuritypolicies/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes podsecuritypolicies"),
					Operation:   to.Ptr("Deletes/DeletesCollection podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads replicasets"),
					Operation:   to.Ptr("Gets/List replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes replicasets"),
					Operation:   to.Ptr("Creates/Updates replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/extensions/replicasets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes replicasets"),
					Operation:   to.Ptr("Deletes/DeletesCollection replicasets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Replicasets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics.k8s.io/pods/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads pods"),
					Operation:   to.Ptr("Gets/List pods resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Pods"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics.k8s.io/nodes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads nodes"),
					Operation:   to.Ptr("Gets/List nodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Nodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads networkpolicies"),
					Operation:   to.Ptr("Gets/List networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes networkpolicies"),
					Operation:   to.Ptr("Creates/Updates networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes networkpolicies"),
					Operation:   to.Ptr("Deletes/DeletesCollection networkpolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networkpolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ingresses"),
					Operation:   to.Ptr("Gets/List ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes ingresses"),
					Operation:   to.Ptr("Creates/Updates ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes ingresses"),
					Operation:   to.Ptr("Deletes/DeletesCollection ingresses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ingresses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads runtimeclasses"),
					Operation:   to.Ptr("Gets/List runtimeclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Runtimeclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes runtimeclasses"),
					Operation:   to.Ptr("Creates/Updates runtimeclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Runtimeclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/node.k8s.io/runtimeclasses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes runtimeclasses"),
					Operation:   to.Ptr("Deletes/DeletesCollection runtimeclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Runtimeclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/api/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads api"),
					Operation:   to.Ptr("Gets/List api resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Api"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/api/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads api/v1"),
					Operation:   to.Ptr("Gets/List api/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Api/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apis"),
					Operation:   to.Ptr("Gets/List apis resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apis"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads admissionregistration.k8s.io"),
					Operation:   to.Ptr("Gets/List admissionregistration.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Admissionregistration.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads admissionregistration.k8s.io/v1"),
					Operation:   to.Ptr("Gets/List admissionregistration.k8s.io/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Admissionregistration.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/admissionregistration.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads admissionregistration.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List admissionregistration.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Admissionregistration.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiextensions.k8s.io"),
					Operation:   to.Ptr("Gets/List apiextensions.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiextensions.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiextensions.k8s.io/v1"),
					Operation:   to.Ptr("Gets/List apiextensions.k8s.io/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiextensions.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiextensions.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiextensions.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List apiextensions.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiextensions.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiregistration.k8s.io"),
					Operation:   to.Ptr("Gets/List apiregistration.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiregistration.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiregistration.k8s.io/v1"),
					Operation:   to.Ptr("Gets/List apiregistration.k8s.io/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiregistration.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apiregistration.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiregistration.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List apiregistration.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apiregistration.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apps"),
					Operation:   to.Ptr("Gets/List apps resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apps"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apps/v1"),
					Operation:   to.Ptr("Gets/List apps/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apps/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apps/v1beta1"),
					Operation:   to.Ptr("Gets/List apps/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apps/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/apps/v1beta2/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apps/v1beta2"),
					Operation:   to.Ptr("Gets/List apps/v1beta2 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Apps/V1beta2"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authentication.k8s.io"),
					Operation:   to.Ptr("Gets/List authentication.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authentication.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authentication.k8s.io/v1"),
					Operation:   to.Ptr("Gets/List authentication.k8s.io/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authentication.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authentication.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authentication.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List authentication.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authentication.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authorization.k8s.io"),
					Operation:   to.Ptr("Gets/List authorization.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authorization.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authorization.k8s.io/v1"),
					Operation:   to.Ptr("Gets/List authorization.k8s.io/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authorization.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/authorization.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads authorization.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List authorization.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Authorization.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoscaling"),
					Operation:   to.Ptr("Gets/List autoscaling resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Autoscaling"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoscaling/v1"),
					Operation:   to.Ptr("Gets/List autoscaling/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Autoscaling/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v2beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoscaling/v2beta1"),
					Operation:   to.Ptr("Gets/List autoscaling/v2beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Autoscaling/V2beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/autoscaling/v2beta2/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoscaling/v2beta2"),
					Operation:   to.Ptr("Gets/List autoscaling/v2beta2 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Autoscaling/V2beta2"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads batch"),
					Operation:   to.Ptr("Gets/List batch resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Batch"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads batch/v1"),
					Operation:   to.Ptr("Gets/List batch/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Batch/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/batch/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads batch/v1beta1"),
					Operation:   to.Ptr("Gets/List batch/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Batch/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/certificates.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads certificates.k8s.io"),
					Operation:   to.Ptr("Gets/List certificates.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Certificates.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/certificates.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads certificates.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List certificates.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Certificates.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads coordination.k8s.io"),
					Operation:   to.Ptr("Gets/List coordination.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Coordination.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads coordination/v1"),
					Operation:   to.Ptr("Gets/List coordination/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Coordination.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/coordination.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads coordination.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List coordination.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Coordination.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/events.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads events.k8s.io"),
					Operation:   to.Ptr("Gets/List events.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/events.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads events.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List events.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Events.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/extensions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads extensions"),
					Operation:   to.Ptr("Gets/List extensions resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Extensions"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/extensions/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads extensions/v1beta1"),
					Operation:   to.Ptr("Gets/List extensions/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Extensions/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/metrics.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads metrics.k8s.io"),
					Operation:   to.Ptr("Gets/List metrics.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Metrics.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/metrics.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads metrics.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List metrics.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Metrics.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads networking.k8s.io"),
					Operation:   to.Ptr("Gets/List networking.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networking.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads networking/v1"),
					Operation:   to.Ptr("Gets/List networking/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networking.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/networking.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads networking.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List networking.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Networking.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/node.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads node.k8s.io"),
					Operation:   to.Ptr("Gets/List node.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Node.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/node.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads node.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List node.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Node.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/policy/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads policy"),
					Operation:   to.Ptr("Gets/List policy resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Policy"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/policy/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads policy/v1beta1"),
					Operation:   to.Ptr("Gets/List policy/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Policy/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads rbac.authorization.k8s.io"),
					Operation:   to.Ptr("Gets/List rbac.authorization.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rbac.Authorization.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads rbac.authorization/v1"),
					Operation:   to.Ptr("Gets/List rbac.authorization/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rbac.Authorization.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/rbac.authorization.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads rbac.authorization.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List rbac.authorization.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rbac.Authorization.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads scheduling.k8s.io"),
					Operation:   to.Ptr("Gets/List scheduling.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Scheduling.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads scheduling/v1"),
					Operation:   to.Ptr("Gets/List scheduling/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Scheduling.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/scheduling.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads scheduling.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List scheduling.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Scheduling.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads storage.k8s.io"),
					Operation:   to.Ptr("Gets/List storage.k8s.io resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storage.K8s.Io"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/v1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads storage/v1"),
					Operation:   to.Ptr("Gets/List storage/v1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storage.K8s.Io/V1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/apis/storage.k8s.io/v1beta1/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads storage.k8s.io/v1beta1"),
					Operation:   to.Ptr("Gets/List storage.k8s.io/v1beta1 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storage.K8s.Io/V1beta1"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads healthz"),
					Operation:   to.Ptr("Gets/List healthz resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/autoregister-completion/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoregister-completion"),
					Operation:   to.Ptr("Gets/List autoregister-completion resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Autoregister-Completion"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/etcd/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads etcd"),
					Operation:   to.Ptr("Gets/List etcd resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Etcd"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/log/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads log"),
					Operation:   to.Ptr("Gets/List log resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Log"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/ping/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ping"),
					Operation:   to.Ptr("Gets/List ping resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Ping"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-openapi-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-openapi-controller"),
					Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Openapi-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-registration-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-registration-controller"),
					Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Registration-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/apiservice-status-available-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-status-available-controller"),
					Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Apiservice-Status-Available-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/bootstrap-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-controller"),
					Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/ca-registration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ca-registration"),
					Operation:   to.Ptr("Gets/List ca-registration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Ca-Registration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/crd-informer-synced/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads crd-informer-synced"),
					Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Crd-Informer-Synced"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/generic-apiserver-start-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads generic-apiserver-start-informers"),
					Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Generic-Apiserver-Start-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/kube-apiserver-autoregistration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads kube-apiserver-autoregistration"),
					Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Kube-Apiserver-Autoregistration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/rbac/bootstrap-roles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-roles"),
					Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-system-priority-classes"),
					Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Bootstrap-System-Priority-Classes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-apiextensions-controllers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-controllers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Start-Apiextensions-Controllers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-apiextensions-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-informers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Start-Apiextensions-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-kube-aggregator-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-aggregator-informers"),
					Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Start-Kube-Aggregator-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/healthz/poststarthook/start-kube-apiserver-admission-initializer/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
					Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Healthz/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads livez"),
					Operation:   to.Ptr("Gets/List livez resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/autoregister-completion/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoregister-completion"),
					Operation:   to.Ptr("Gets/List autoregister-completion resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Autoregister-Completion"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/etcd/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads etcd"),
					Operation:   to.Ptr("Gets/List etcd resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Etcd"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/log/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads log"),
					Operation:   to.Ptr("Gets/List log resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Log"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/ping/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ping"),
					Operation:   to.Ptr("Gets/List ping resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Ping"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-openapi-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-openapi-controller"),
					Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Openapi-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-registration-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-registration-controller"),
					Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Registration-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/apiservice-status-available-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-status-available-controller"),
					Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Apiservice-Status-Available-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/bootstrap-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-controller"),
					Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/ca-registration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ca-registration"),
					Operation:   to.Ptr("Gets/List ca-registration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Ca-Registration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/crd-informer-synced/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads crd-informer-synced"),
					Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Crd-Informer-Synced"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/generic-apiserver-start-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads generic-apiserver-start-informers"),
					Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Generic-Apiserver-Start-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/kube-apiserver-autoregistration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads kube-apiserver-autoregistration"),
					Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Kube-Apiserver-Autoregistration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/rbac/bootstrap-roles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-roles"),
					Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-system-priority-classes"),
					Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Bootstrap-System-Priority-Classes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-apiextensions-controllers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-controllers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Start-Apiextensions-Controllers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-apiextensions-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-informers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Start-Apiextensions-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-kube-aggregator-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-aggregator-informers"),
					Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Start-Kube-Aggregator-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/livez/poststarthook/start-kube-apiserver-admission-initializer/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
					Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Livez/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/logs/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads logs"),
					Operation:   to.Ptr("Gets/List logs resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Logs"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/metrics/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads metrics"),
					Operation:   to.Ptr("Gets/List metrics resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Metrics"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/openapi/v2/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads v2"),
					Operation:   to.Ptr("Gets/List v2 resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Openapi/V2"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads readyz"),
					Operation:   to.Ptr("Gets/List readyz resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/autoregister-completion/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads autoregister-completion"),
					Operation:   to.Ptr("Gets/List autoregister-completion resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Autoregister-Completion"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/etcd/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads etcd"),
					Operation:   to.Ptr("Gets/List etcd resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Etcd"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/log/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads log"),
					Operation:   to.Ptr("Gets/List log resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Log"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/ping/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ping"),
					Operation:   to.Ptr("Gets/List ping resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Ping"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-openapi-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-openapi-controller"),
					Operation:   to.Ptr("Gets/List apiservice-openapi-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Openapi-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-registration-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-registration-controller"),
					Operation:   to.Ptr("Gets/List apiservice-registration-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Registration-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/apiservice-status-available-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads apiservice-status-available-controller"),
					Operation:   to.Ptr("Gets/List apiservice-status-available-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Apiservice-Status-Available-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/bootstrap-controller/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-controller"),
					Operation:   to.Ptr("Gets/List bootstrap-controller resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-Controller"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/ca-registration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ca-registration"),
					Operation:   to.Ptr("Gets/List ca-registration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Ca-Registration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/crd-informer-synced/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads crd-informer-synced"),
					Operation:   to.Ptr("Gets/List crd-informer-synced resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Crd-Informer-Synced"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/generic-apiserver-start-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads generic-apiserver-start-informers"),
					Operation:   to.Ptr("Gets/List generic-apiserver-start-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Generic-Apiserver-Start-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/kube-apiserver-autoregistration/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads kube-apiserver-autoregistration"),
					Operation:   to.Ptr("Gets/List kube-apiserver-autoregistration resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Kube-Apiserver-Autoregistration"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/rbac/bootstrap-roles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-roles"),
					Operation:   to.Ptr("Gets/List bootstrap-roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/scheduling/bootstrap-system-priority-classes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads bootstrap-system-priority-classes"),
					Operation:   to.Ptr("Gets/List bootstrap-system-priority-classes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Bootstrap-System-Priority-Classes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-apiextensions-controllers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-controllers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-controllers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Start-Apiextensions-Controllers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-apiextensions-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-apiextensions-informers"),
					Operation:   to.Ptr("Gets/List start-apiextensions-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Start-Apiextensions-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-kube-aggregator-informers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-aggregator-informers"),
					Operation:   to.Ptr("Gets/List start-kube-aggregator-informers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Start-Kube-Aggregator-Informers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/poststarthook/start-kube-apiserver-admission-initializer/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads start-kube-apiserver-admission-initializer"),
					Operation:   to.Ptr("Gets/List start-kube-apiserver-admission-initializer resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Poststarthook/Start-Kube-Apiserver-Admission-Initializer"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/readyz/shutdown/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads shutdown"),
					Operation:   to.Ptr("Gets/List shutdown resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Readyz/Shutdown"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/resetMetrics/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads resetMetrics"),
					Operation:   to.Ptr("Gets/List resetMetrics resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Resetmetrics"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/swagger-ui/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads swagger-ui"),
					Operation:   to.Ptr("Gets/List swagger-ui resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Swagger-Ui"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/swagger-api/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads swagger-api"),
					Operation:   to.Ptr("Gets/List swagger-api resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Swagger-Api"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/ui/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads ui"),
					Operation:   to.Ptr("Gets/List ui resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Ui"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/version/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads version"),
					Operation:   to.Ptr("Gets/List version resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Version"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads poddisruptionbudgets"),
					Operation:   to.Ptr("Gets/List poddisruptionbudgets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Poddisruptionbudgets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes poddisruptionbudgets"),
					Operation:   to.Ptr("Creates/Updates poddisruptionbudgets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Poddisruptionbudgets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes poddisruptionbudgets"),
					Operation:   to.Ptr("Deletes/DeletesCollection poddisruptionbudgets resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Poddisruptionbudgets"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads podsecuritypolicies"),
					Operation:   to.Ptr("Gets/List podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes podsecuritypolicies"),
					Operation:   to.Ptr("Creates/Updates podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes podsecuritypolicies"),
					Operation:   to.Ptr("Deletes/DeletesCollection podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads clusterrolebindings"),
					Operation:   to.Ptr("Gets/List clusterrolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterrolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes clusterrolebindings"),
					Operation:   to.Ptr("Creates/Updates clusterrolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterrolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterrolebindings/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes clusterrolebindings"),
					Operation:   to.Ptr("Deletes/DeletesCollection clusterrolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterrolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads clusterroles"),
					Operation:   to.Ptr("Gets/List clusterroles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterroles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes clusterroles"),
					Operation:   to.Ptr("Creates/Updates clusterroles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterroles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes clusterroles"),
					Operation:   to.Ptr("Deletes/DeletesCollection clusterroles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterroles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads rolebindings"),
					Operation:   to.Ptr("Gets/List rolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes rolebindings"),
					Operation:   to.Ptr("Creates/Updates rolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/rolebindings/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes rolebindings"),
					Operation:   to.Ptr("Deletes/DeletesCollection rolebindings resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Rolebindings"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads roles"),
					Operation:   to.Ptr("Gets/List roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes roles"),
					Operation:   to.Ptr("Creates/Updates roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes roles"),
					Operation:   to.Ptr("Deletes/DeletesCollection roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads priorityclasses"),
					Operation:   to.Ptr("Gets/List priorityclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Priorityclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes priorityclasses"),
					Operation:   to.Ptr("Creates/Updates priorityclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Priorityclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/scheduling.k8s.io/priorityclasses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes priorityclasses"),
					Operation:   to.Ptr("Deletes/DeletesCollection priorityclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Priorityclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/policy/podsecuritypolicies/use/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Use action on podsecuritypolicies"),
					Operation:   to.Ptr("Use podsecuritypolicies resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Podsecuritypolicies"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/bind/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Binds clusterroles"),
					Operation:   to.Ptr("Bind clusterroles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterroles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/clusterroles/escalate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Escalates"),
					Operation:   to.Ptr("Escalate clusterroles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Clusterroles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/bind/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Binds roles"),
					Operation:   to.Ptr("Bind roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/rbac.authorization.k8s.io/roles/escalate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Escalates roles"),
					Operation:   to.Ptr("Escalate roles resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Roles"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/serviceaccounts/impersonate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Impersonate serviceaccounts"),
					Operation:   to.Ptr("Impersonate serviceaccounts resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Serviceaccounts"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/users/impersonate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Impersonate users"),
					Operation:   to.Ptr("Impersonate users resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Users"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/groups/impersonate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Impersonate groups"),
					Operation:   to.Ptr("Impersonate groups resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Groups"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/authentication.k8s.io/userextras/impersonate/action"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Impersonate userextras"),
					Operation:   to.Ptr("Impersonate userextras resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Userextras"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads storageclasses"),
					Operation:   to.Ptr("Gets/List storageclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storageclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes storageclasses"),
					Operation:   to.Ptr("Creates/Updates storageclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storageclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/storageclasses/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes storageclasses"),
					Operation:   to.Ptr("Deletes/DeletesCollection storageclasses resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Storageclasses"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads volumeattachments"),
					Operation:   to.Ptr("Gets/List volumeattachments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Volumeattachments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes volumeattachments"),
					Operation:   to.Ptr("Creates/Updates volumeattachments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Volumeattachments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/volumeattachments/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes volumeattachments"),
					Operation:   to.Ptr("Deletes/DeletesCollection volumeattachments resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Volumeattachments"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads csidrivers"),
					Operation:   to.Ptr("Gets/List csidrivers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csidrivers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes csidrivers"),
					Operation:   to.Ptr("Creates/Updates csidrivers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csidrivers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csidrivers/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes csidrivers"),
					Operation:   to.Ptr("Deletes/DeletesCollection csidrivers resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csidrivers"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Reads csinodes"),
					Operation:   to.Ptr("Gets/List csinodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csinodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Writes csinodes"),
					Operation:   to.Ptr("Creates/Updates csinodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csinodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/storage.k8s.io/csinodes/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Deletes csinodes"),
					Operation:   to.Ptr("Deletes/DeletesCollection csinodes resource"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Csinodes"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/metricDefinitions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the available metrics for Managed Cluster"),
					Operation:   to.Ptr("Read Managed Cluster metric definitions"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("The metric definition of Managed Cluster"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/managedClusters/providers/Microsoft.Insights/logDefinitions/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Gets the available logs for Managed Cluster"),
					Operation:   to.Ptr("Read Managed Cluster log definitions"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("The log definition of Managed Cluster"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a Open Shift Managed Cluster"),
					Operation:   to.Ptr("Get Open Shift Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Managed Cluster"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new Open Shift Managed Cluster or updates an existing one"),
					Operation:   to.Ptr("Create or Update Open Shift Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Managed Cluster"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftManagedClusters/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Delete a Open Shift Managed Cluster"),
					Operation:   to.Ptr("Delete Open Shift Managed Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Managed Cluster"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/read"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Get a Open Shift Cluster"),
					Operation:   to.Ptr("Get Open Shift Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Cluster"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/write"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Creates a new Open Shift Cluster or updates an existing one"),
					Operation:   to.Ptr("Create or Update Open Shift Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Cluster"),
				},
				Origin: to.Ptr("user,system"),
			},
			{
				Name: to.Ptr("Microsoft.ContainerService/openShiftClusters/delete"),
				Display: &armcontainerservice.OperationValueDisplay{
					Description: to.Ptr("Delete a Open Shift Cluster"),
					Operation:   to.Ptr("Delete Open Shift Cluster"),
					Provider:    to.Ptr("Microsoft Container Service"),
					Resource:    to.Ptr("Open Shift Cluster"),
				},
				Origin: to.Ptr("user,system"),
			}},
	}

	fakeServer.NewListPager = func(options *armcontainerservice.OperationsClientListOptions) (resp azfake.PagerResponder[armcontainerservice.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armcontainerservice.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.OperationsClientListResponse{OperationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/Operation_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationListResult))
	}
}

func (testsuite *FakeTestSuite) TestManagedClusters_GetOSOptions() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ContainerServiceGetOSOptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Container Service OS Options"},
	})
	var exampleLocation string
	exampleLocation = "location1"

	exampleRes := armcontainerservice.OSOptionProfile{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.ContainerService/locations/osOptions"),
		ID:   to.Ptr("/subscriptions/subid1/providers/Microsoft.ContainerService/locations/location1/osOptions/default"),
		Properties: &armcontainerservice.OSOptionPropertyList{
			OSOptionPropertyList: []*armcontainerservice.OSOptionProperty{
				{
					EnableFipsImage: to.Ptr(false),
					OSType:          to.Ptr("Linux"),
				},
				{
					EnableFipsImage: to.Ptr(false),
					OSType:          to.Ptr("Windows"),
				}},
		},
	}

	fakeServer.GetOSOptions = func(ctx context.Context, location string, options *armcontainerservice.ManagedClustersClientGetOSOptionsOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetOSOptionsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetOSOptionsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetOSOptionsResponse{OSOptionProfile: exampleRes}, nil)
		return
	}
	res, err := client.GetOSOptions(ctx, "location1", &armcontainerservice.ManagedClustersClientGetOSOptionsOptions{ResourceType: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ContainerServiceGetOSOptions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OSOptionProfile))
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListKubernetesVersions() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/KubernetesVersions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Kubernetes Versions"},
	})
	var exampleLocation string
	exampleLocation = "location1"

	exampleRes := armcontainerservice.KubernetesVersionListResult{
		Values: []*armcontainerservice.KubernetesVersion{
			{
				Capabilities: &armcontainerservice.KubernetesVersionCapabilities{
					SupportPlan: []*armcontainerservice.KubernetesSupportPlan{
						to.Ptr(armcontainerservice.KubernetesSupportPlanKubernetesOfficial)},
				},
				PatchVersions: map[string]*armcontainerservice.KubernetesPatchVersion{
					"1.23.12": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.23.15"),
							to.Ptr("1.24.6"),
							to.Ptr("1.24.9")},
					},
					"1.23.15": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.24.6"),
							to.Ptr("1.24.9")},
					},
				},
				Version: to.Ptr("1.23"),
			},
			{
				Capabilities: &armcontainerservice.KubernetesVersionCapabilities{
					SupportPlan: []*armcontainerservice.KubernetesSupportPlan{
						to.Ptr(armcontainerservice.KubernetesSupportPlanKubernetesOfficial)},
				},
				PatchVersions: map[string]*armcontainerservice.KubernetesPatchVersion{
					"1.24.6": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.24.9"),
							to.Ptr("1.25.4"),
							to.Ptr("1.25.5")},
					},
					"1.24.9": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.25.4"),
							to.Ptr("1.25.5")},
					},
				},
				Version: to.Ptr("1.24"),
			},
			{
				Capabilities: &armcontainerservice.KubernetesVersionCapabilities{
					SupportPlan: []*armcontainerservice.KubernetesSupportPlan{
						to.Ptr(armcontainerservice.KubernetesSupportPlanKubernetesOfficial)},
				},
				PatchVersions: map[string]*armcontainerservice.KubernetesPatchVersion{
					"1.25.4": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.25.5"),
							to.Ptr("1.26.0")},
					},
					"1.25.5": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{
							to.Ptr("1.26.0")},
					},
				},
				Version: to.Ptr("1.25"),
			},
			{
				Capabilities: &armcontainerservice.KubernetesVersionCapabilities{
					SupportPlan: []*armcontainerservice.KubernetesSupportPlan{
						to.Ptr(armcontainerservice.KubernetesSupportPlanKubernetesOfficial)},
				},
				PatchVersions: map[string]*armcontainerservice.KubernetesPatchVersion{
					"1.26.0": &armcontainerservice.KubernetesPatchVersion{
						Upgrades: []*string{},
					},
				},
				Version: to.Ptr("1.26"),
			}},
	}

	fakeServer.ListKubernetesVersions = func(ctx context.Context, location string, options *armcontainerservice.ManagedClustersClientListKubernetesVersionsOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientListKubernetesVersionsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientListKubernetesVersionsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientListKubernetesVersionsResponse{KubernetesVersionListResult: exampleRes}, nil)
		return
	}
	res, err := client.ListKubernetesVersions(ctx, "location1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/KubernetesVersions_List.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.KubernetesVersionListResult))
}

func (testsuite *FakeTestSuite) TestManagedClusters_List() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Managed Clusters"},
	})

	exampleRes := armcontainerservice.ManagedClusterListResult{
		Value: []*armcontainerservice.ManagedCluster{
			{
				Name:     to.Ptr("clustername1"),
				Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
				ID:       to.Ptr("/subscriptions/subid1/providers/Microsoft.ContainerService/managedClusters"),
				Location: to.Ptr("location1"),
				Tags: map[string]*string{
					"archv2": to.Ptr(""),
					"tier":   to.Ptr("production"),
				},
				Properties: &armcontainerservice.ManagedClusterProperties{
					AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
						{
							Count:                      to.Ptr[int32](3),
							CurrentOrchestratorVersion: to.Ptr("1.9.6"),
							MaxPods:                    to.Ptr[int32](110),
							OrchestratorVersion:        to.Ptr("1.9.6"),
							OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
							ProvisioningState:          to.Ptr("Succeeded"),
							VMSize:                     to.Ptr("Standard_DS1_v2"),
							Name:                       to.Ptr("nodepool1"),
						}},
					CurrentKubernetesVersion: to.Ptr("1.9.6"),
					DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
					DNSPrefix:                to.Ptr("dnsprefix1"),
					EnableRBAC:               to.Ptr(false),
					Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
					KubernetesVersion:        to.Ptr("1.9.6"),
					LinuxProfile: &armcontainerservice.LinuxProfile{
						AdminUsername: to.Ptr("azureuser"),
						SSH: &armcontainerservice.SSHConfiguration{
							PublicKeys: []*armcontainerservice.SSHPublicKey{
								{
									KeyData: to.Ptr("keydata"),
								}},
						},
					},
					MaxAgentPools: to.Ptr[int32](1),
					NetworkProfile: &armcontainerservice.NetworkProfile{
						DNSServiceIP:  to.Ptr("10.0.0.10"),
						NetworkPlugin: to.Ptr(armcontainerservice.NetworkPluginKubenet),
						PodCidr:       to.Ptr("10.244.0.0/16"),
						ServiceCidr:   to.Ptr("10.0.0.0/16"),
					},
					NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
					ProvisioningState: to.Ptr("Succeeded"),
					ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
						ClientID: to.Ptr("clientid"),
					},
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcontainerservice.ManagedClustersClientListOptions) (resp azfake.PagerResponder[armcontainerservice.ManagedClustersClientListResponse]) {
		resp = azfake.PagerResponder[armcontainerservice.ManagedClustersClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.ManagedClustersClientListResponse{ManagedClusterListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ManagedClusterListResult))
	}
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Clusters by Resource Group"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rg1"

	exampleRes := armcontainerservice.ManagedClusterListResult{
		Value: []*armcontainerservice.ManagedCluster{
			{
				Name:     to.Ptr("clustername1"),
				Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
				ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters"),
				Location: to.Ptr("location1"),
				Tags: map[string]*string{
					"archv2": to.Ptr(""),
					"tier":   to.Ptr("production"),
				},
				Properties: &armcontainerservice.ManagedClusterProperties{
					AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
						{
							Count:                      to.Ptr[int32](3),
							CurrentOrchestratorVersion: to.Ptr("1.9.6"),
							MaxPods:                    to.Ptr[int32](110),
							OrchestratorVersion:        to.Ptr("1.9.6"),
							OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
							ProvisioningState:          to.Ptr("Succeeded"),
							VMSize:                     to.Ptr("Standard_DS1_v2"),
							Name:                       to.Ptr("nodepool1"),
						}},
					CurrentKubernetesVersion: to.Ptr("1.9.6"),
					DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
					DNSPrefix:                to.Ptr("dnsprefix1"),
					EnableRBAC:               to.Ptr(false),
					Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
					KubernetesVersion:        to.Ptr("1.9.6"),
					LinuxProfile: &armcontainerservice.LinuxProfile{
						AdminUsername: to.Ptr("azureuser"),
						SSH: &armcontainerservice.SSHConfiguration{
							PublicKeys: []*armcontainerservice.SSHPublicKey{
								{
									KeyData: to.Ptr("keydata"),
								}},
						},
					},
					MaxAgentPools: to.Ptr[int32](1),
					NetworkProfile: &armcontainerservice.NetworkProfile{
						DNSServiceIP:  to.Ptr("10.0.0.10"),
						NetworkPlugin: to.Ptr(armcontainerservice.NetworkPluginKubenet),
						PodCidr:       to.Ptr("10.244.0.0/16"),
						ServiceCidr:   to.Ptr("10.0.0.0/16"),
					},
					NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
					ProvisioningState: to.Ptr("Succeeded"),
					ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
						ClientID: to.Ptr("clientid"),
					},
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcontainerservice.ManagedClustersClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcontainerservice.ManagedClustersClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcontainerservice.ManagedClustersClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.ManagedClustersClientListByResourceGroupResponse{ManagedClusterListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager("rg1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ManagedClusterListResult))
	}
}

func (testsuite *FakeTestSuite) TestManagedClusters_GetUpgradeProfile() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGetUpgradeProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Upgrade Profile for Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.ManagedClusterUpgradeProfile{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/upgradeprofiles"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/upgradeprofiles/default"),
		Properties: &armcontainerservice.ManagedClusterUpgradeProfileProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterPoolUpgradeProfile{
				{
					Name:              to.Ptr("agent"),
					KubernetesVersion: to.Ptr("1.7.7"),
					OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
					Upgrades: []*armcontainerservice.ManagedClusterPoolUpgradeProfileUpgradesItem{
						{
							KubernetesVersion: to.Ptr("1.7.9"),
						},
						{
							IsPreview:         to.Ptr(true),
							KubernetesVersion: to.Ptr("1.7.11"),
						}},
				}},
			ControlPlaneProfile: &armcontainerservice.ManagedClusterPoolUpgradeProfile{
				Name:              to.Ptr("master"),
				KubernetesVersion: to.Ptr("1.7.7"),
				OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
				Upgrades: []*armcontainerservice.ManagedClusterPoolUpgradeProfileUpgradesItem{
					{
						IsPreview:         to.Ptr(true),
						KubernetesVersion: to.Ptr("1.7.9"),
					},
					{
						KubernetesVersion: to.Ptr("1.7.11"),
					}},
			},
		},
	}

	fakeServer.GetUpgradeProfile = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientGetUpgradeProfileOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetUpgradeProfileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetUpgradeProfileResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetUpgradeProfileResponse{ManagedClusterUpgradeProfile: exampleRes}, nil)
		return
	}
	res, err := client.GetUpgradeProfile(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGetUpgradeProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedClusterUpgradeProfile))
}

func (testsuite *FakeTestSuite) TestManagedClusters_GetAccessProfile() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGetAccessProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleRoleName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleRoleName = "clusterUser"

	exampleRes := armcontainerservice.ManagedClusterAccessProfile{
		Name:     to.Ptr("clusterUser"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters/AccessProfiles"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/accessProfiles/clusterUser"),
		Location: to.Ptr("location1"),
		Properties: &armcontainerservice.AccessProfile{
			KubeConfig: []byte("a3ViZUNvbmZpZzE="),
		},
	}

	fakeServer.GetAccessProfile = func(ctx context.Context, resourceGroupName string, resourceName string, roleName string, options *armcontainerservice.ManagedClustersClientGetAccessProfileOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetAccessProfileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleRoleName, roleName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetAccessProfileResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetAccessProfileResponse{ManagedClusterAccessProfile: exampleRes}, nil)
		return
	}
	res, err := client.GetAccessProfile(ctx, "rg1", "clustername1", "clusterUser", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGetAccessProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedClusterAccessProfile))
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListClusterAdminCredentials() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterAdminCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.CredentialResults{
		Kubeconfigs: []*armcontainerservice.CredentialResult{
			{
				Name:  to.Ptr("credentialName1"),
				Value: []byte("Y3JlZGVudGlhbFZhbHVlMQ=="),
			}},
	}

	fakeServer.ListClusterAdminCredentials = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientListClusterAdminCredentialsOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientListClusterAdminCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientListClusterAdminCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientListClusterAdminCredentialsResponse{CredentialResults: exampleRes}, nil)
		return
	}
	res, err := client.ListClusterAdminCredentials(ctx, "rg1", "clustername1", &armcontainerservice.ManagedClustersClientListClusterAdminCredentialsOptions{ServerFqdn: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterAdminCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialResults))
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListClusterUserCredentials() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterUserCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.CredentialResults{
		Kubeconfigs: []*armcontainerservice.CredentialResult{
			{
				Name:  to.Ptr("credentialName1"),
				Value: []byte("Y3JlZGVudGlhbFZhbHVlMQ=="),
			}},
	}

	fakeServer.ListClusterUserCredentials = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientListClusterUserCredentialsOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientListClusterUserCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientListClusterUserCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientListClusterUserCredentialsResponse{CredentialResults: exampleRes}, nil)
		return
	}
	res, err := client.ListClusterUserCredentials(ctx, "rg1", "clustername1", &armcontainerservice.ManagedClustersClientListClusterUserCredentialsOptions{ServerFqdn: nil,
		Format: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterUserCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialResults))
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListClusterMonitoringUserCredentials() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterMonitoringUserCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.CredentialResults{
		Kubeconfigs: []*armcontainerservice.CredentialResult{
			{
				Name:  to.Ptr("credentialName1"),
				Value: []byte("Y3JlZGVudGlhbFZhbHVlMQ=="),
			}},
	}

	fakeServer.ListClusterMonitoringUserCredentials = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsResponse{CredentialResults: exampleRes}, nil)
		return
	}
	res, err := client.ListClusterMonitoringUserCredentials(ctx, "rg1", "clustername1", &armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsOptions{ServerFqdn: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersListClusterMonitoringUserCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialResults))
}

func (testsuite *FakeTestSuite) TestManagedClusters_Get() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					MaxPods:                    to.Ptr[int32](110),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					UpgradeSettings: &armcontainerservice.AgentPoolUpgradeSettings{
						MaxSurge: to.Ptr("33%"),
					},
					VMSize: to.Ptr("Standard_DS1_v2"),
					Name:   to.Ptr("nodepool1"),
				}},
			AzurePortalFQDN:          to.Ptr("dnsprefix1-abcd1234.portal.hcp.eastus.azmk8s.io"),
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnableRBAC:               to.Ptr(false),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					OutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileOutboundIPs{
						PublicIPs: []*armcontainerservice.ResourceReference{
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/customeroutboundip1"),
							},
							{
								ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/customeroutboundip2"),
							}},
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientGetOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))
}

func (testsuite *FakeTestSuite) TestManagedClusters_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Snapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster using an agent pool snapshot"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.ManagedCluster
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:  to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count: to.Ptr[int32](3),
					CreationData: &armcontainerservice.CreationData{
						SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
					},
					EnableFIPS:         to.Ptr(true),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes := armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:  to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count: to.Ptr[int32](3),
					CreationData: &armcontainerservice.CreationData{
						SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
					},
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableFIPS:                 to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(false),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:  to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count: to.Ptr[int32](3),
					CreationData: &armcontainerservice.CreationData{
						SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
					},
					EnableFIPS:         to.Ptr(true),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Snapshot.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Snapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_ManagedNATGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with AKS-managed NAT gateway as outbound type"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(false),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				NatGatewayProfile: &armcontainerservice.ManagedClusterNATGatewayProfile{
					ManagedOutboundIPProfile: &armcontainerservice.ManagedClusterManagedOutboundIPProfile{
						Count: to.Ptr[int32](2),
					},
				},
				OutboundType: to.Ptr(armcontainerservice.OutboundTypeManagedNATGateway),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(false),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP:    to.Ptr("10.0.0.10"),
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NatGatewayProfile: &armcontainerservice.ManagedClusterNATGatewayProfile{
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](4),
					ManagedOutboundIPProfile: &armcontainerservice.ManagedClusterManagedOutboundIPProfile{
						Count: to.Ptr[int32](2),
					},
				},
				NetworkPlugin: to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:  to.Ptr(armcontainerservice.OutboundTypeManagedNATGateway),
				PodCidr:       to.Ptr("10.244.0.0/16"),
				ServiceCidr:   to.Ptr("10.0.0.0/16"),
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(false),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				NatGatewayProfile: &armcontainerservice.ManagedClusterNATGatewayProfile{
					ManagedOutboundIPProfile: &armcontainerservice.ManagedClusterManagedOutboundIPProfile{
						Count: to.Ptr[int32](2),
					},
				},
				OutboundType: to.Ptr(armcontainerservice.OutboundTypeManagedNATGateway),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_ManagedNATGateway.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_ManagedNATGateway.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_AzureKeyvaultSecretsProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Azure KeyVault Secrets Provider Addon"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{
				"azureKeyvaultSecretsProvider": &armcontainerservice.ManagedClusterAddonProfile{
					Config: map[string]*string{
						"enableSecretRotation": to.Ptr("true"),
						"rotationPollInterval": to.Ptr("2m"),
					},
					Enabled: to.Ptr(true),
				},
			},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{
				"azureKeyvaultSecretsProvider": &armcontainerservice.ManagedClusterAddonProfile{
					Config: map[string]*string{
						"enableSecretRotation": to.Ptr("true"),
						"rotationPollInterval": to.Ptr("2m"),
					},
					Enabled: to.Ptr(true),
				},
			},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					MaxPods:                to.Ptr[int32](110),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:       to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:    to.Ptr("1.9.6"),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:      to.Ptr("Succeeded"),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:       to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				ServiceCidr:     to.Ptr("10.0.0.0/16"),
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{
				"azureKeyvaultSecretsProvider": &armcontainerservice.ManagedClusterAddonProfile{
					Config: map[string]*string{
						"enableSecretRotation": to.Ptr("true"),
						"rotationPollInterval": to.Ptr("2m"),
					},
					Enabled: to.Ptr(true),
				},
			},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_AzureKeyvaultSecretsProvider.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_AzureKeyvaultSecretsProvider.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Dedicated Host Group"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					HostGroupID:        to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:               to.Ptr[int32](3),
					EnableNodePublicIP:  to.Ptr(true),
					HostGroupID:         to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
					MaxPods:             to.Ptr[int32](110),
					NodeImageVersion:    to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion: to.Ptr("1.9.6"),
					OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:   to.Ptr("Succeeded"),
					VMSize:              to.Ptr("Standard_DS2_v2"),
					Name:                to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			Fqdn:                    to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:       to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					HostGroupID:        to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DedicatedHostGroup.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with EncryptionAtHost enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableEncryptionAtHost:     to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnabledFIPS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with FIPS enabled OS"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableFIPS:         to.Ptr(true),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableFIPS:                 to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(false),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableFIPS:         to.Ptr(true),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(false),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnabledFIPS.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnabledFIPS.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_GPUMIG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with GPUMIG"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG3G),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_ND96asr_v4"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					GpuInstanceProfile:         to.Ptr(armcontainerservice.GPUInstanceProfileMIG3G),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_ND96asr_v4"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG3G),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_ND96asr_v4"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_GPUMIG.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_GPUMIG.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_HTTPProxy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with HTTP proxy configured"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_HTTPProxy.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_HTTPProxy.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Premium.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with LongTermSupport"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			SupportPlan: to.Ptr(armcontainerservice.KubernetesSupportPlanAKSLongTermSupport),
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBase),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierPremium),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableEncryptionAtHost:     to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			Fqdn:                    to.Ptr("dnsprefix1-ee788a1f.hcp.location1.azmk8s.io"),
			KubernetesVersion:       to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			PrivateFQDN:       to.Ptr("dnsprefix1-aae7e0f0.5cef6058-b6b5-414d-8cb1-4bd14eb0b15c.privatelink.location1.azmk8s.io"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			SupportPlan: to.Ptr(armcontainerservice.KubernetesSupportPlanAKSLongTermSupport),
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBase),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierPremium),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			SupportPlan: to.Ptr(armcontainerservice.KubernetesSupportPlanAKSLongTermSupport),
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUNameBase),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierPremium),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Premium.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Premium.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_NodePublicIPPrefix.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Node Public IP Prefix"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                 to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                to.Ptr[int32](3),
					EnableNodePublicIP:   to.Ptr(true),
					Mode:                 to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodePublicIPPrefixID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix"),
					OSType:               to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:               to.Ptr("Standard_DS2_v2"),
					Name:                 to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					NodePublicIPPrefixID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                 to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                to.Ptr[int32](3),
					EnableNodePublicIP:   to.Ptr(true),
					Mode:                 to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodePublicIPPrefixID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix"),
					OSType:               to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:               to.Ptr("Standard_DS2_v2"),
					Name:                 to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_NodePublicIPPrefix.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_NodePublicIPPrefix.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_OSSKU.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with OSSKU"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSSKU:              to.Ptr(armcontainerservice.OSSKUAzureLinux),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSSKU:                      to.Ptr(armcontainerservice.OSSKUAzureLinux),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSSKU:              to.Ptr(armcontainerservice.OSSKUAzureLinux),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			HTTPProxyConfig: &armcontainerservice.ManagedClusterHTTPProxyConfig{
				HTTPProxy:  to.Ptr("http://myproxy.server.com:8080"),
				HTTPSProxy: to.Ptr("https://myproxy.server.com:8080"),
				NoProxy: []*string{
					to.Ptr("localhost"),
					to.Ptr("127.0.0.1")},
				TrustedCa: to.Ptr("Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U="),
			},
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_OSSKU.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_OSSKU.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PPG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with PPG"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                      to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                     to.Ptr[int32](3),
					EnableNodePublicIP:        to.Ptr(true),
					Mode:                      to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
					ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
					VMSize:                    to.Ptr("Standard_DS2_v2"),
					Name:                      to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					ProximityPlacementGroupID:  to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                      to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                     to.Ptr[int32](3),
					EnableNodePublicIP:        to.Ptr(true),
					Mode:                      to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
					ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
					VMSize:                    to.Ptr("Standard_DS2_v2"),
					Name:                      to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PPG.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PPG.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PodIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with PodIdentity enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			PodIdentityProfile: &armcontainerservice.ManagedClusterPodIdentityProfile{
				AllowNetworkPluginKubenet: to.Ptr(true),
				Enabled:                   to.Ptr(true),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			PodIdentityProfile: &armcontainerservice.ManagedClusterPodIdentityProfile{
				AllowNetworkPluginKubenet: to.Ptr(true),
				Enabled:                   to.Ptr(true),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			PodIdentityProfile: &armcontainerservice.ManagedClusterPodIdentityProfile{
				AllowNetworkPluginKubenet: to.Ptr(true),
				Enabled:                   to.Ptr(true),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PodIdentity.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PodIdentity.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DisableRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with RunCommand disabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableEncryptionAtHost:     to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-ee788a1f.hcp.location1.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			PrivateFQDN:       to.Ptr("dnsprefix1-aae7e0f0.5cef6058-b6b5-414d-8cb1-4bd14eb0b15c.privatelink.location1.azmk8s.io"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			SupportPlan: to.Ptr(armcontainerservice.KubernetesSupportPlanKubernetesOfficial),
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				DisableRunCommand: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DisableRunCommand.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DisableRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_SecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with Security Profile configured"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			DNSPrefix:         to.Ptr("dnsprefix1"),
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			SecurityProfile: &armcontainerservice.ManagedClusterSecurityProfile{
				Defender: &armcontainerservice.ManagedClusterSecurityProfileDefender{
					LogAnalyticsWorkspaceResourceID: to.Ptr("/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME"),
					SecurityMonitoring: &armcontainerservice.ManagedClusterSecurityProfileDefenderSecurityMonitoring{
						Enabled: to.Ptr(true),
					},
				},
				WorkloadIdentity: &armcontainerservice.ManagedClusterSecurityProfileWorkloadIdentity{
					Enabled: to.Ptr(true),
				},
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcontainerservice.ManagedClusterSecurityProfile{
				Defender: &armcontainerservice.ManagedClusterSecurityProfileDefender{
					LogAnalyticsWorkspaceResourceID: to.Ptr("/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME"),
					SecurityMonitoring: &armcontainerservice.ManagedClusterSecurityProfileDefenderSecurityMonitoring{
						Enabled: to.Ptr(true),
					},
				},
				WorkloadIdentity: &armcontainerservice.ManagedClusterSecurityProfileWorkloadIdentity{
					Enabled: to.Ptr(true),
				},
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			DNSPrefix:         to.Ptr("dnsprefix1"),
			KubernetesVersion: to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			SecurityProfile: &armcontainerservice.ManagedClusterSecurityProfile{
				Defender: &armcontainerservice.ManagedClusterSecurityProfileDefender{
					LogAnalyticsWorkspaceResourceID: to.Ptr("/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME"),
					SecurityMonitoring: &armcontainerservice.ManagedClusterSecurityProfileDefenderSecurityMonitoring{
						Enabled: to.Ptr(true),
					},
				},
				WorkloadIdentity: &armcontainerservice.ManagedClusterSecurityProfileWorkloadIdentity{
					Enabled: to.Ptr(true),
				},
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_SecurityProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_SecurityProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableUltraSSD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with UltraSSD enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					EnableUltraSSD:     to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					EnableUltraSSD:             to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					EnableUltraSSD:     to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableUltraSSD.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_EnableUltraSSD.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UserAssignedNATGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Cluster with user-assigned NAT gateway as outbound type"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(false),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeUserAssignedNATGateway),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(false),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP:    to.Ptr("10.0.0.10"),
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeUserAssignedNATGateway),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				ServiceCidr:     to.Ptr("10.0.0.0/16"),
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:               to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(false),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS2_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeUserAssignedNATGateway),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UserAssignedNATGateway.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UserAssignedNATGateway.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Private Cluster with Public FQDN specified"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster:           to.Ptr(true),
				EnablePrivateClusterPublicFQDN: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableEncryptionAtHost:     to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster:           to.Ptr(true),
				EnablePrivateClusterPublicFQDN: to.Ptr(true),
				PrivateDNSZone:                 to.Ptr("system"),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-ee788a1f.hcp.location1.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			PrivateFQDN:       to.Ptr("dnsprefix1-aae7e0f0.5cef6058-b6b5-414d-8cb1-4bd14eb0b15c.privatelink.location1.azmk8s.io"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster:           to.Ptr(true),
				EnablePrivateClusterPublicFQDN: to.Ptr(true),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Managed Private Cluster with fqdn subdomain specified"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster: to.Ptr(true),
				PrivateDNSZone:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			FqdnSubdomain:           to.Ptr("domain1"),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                       to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableEncryptionAtHost:     to.Ptr(true),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS2_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster: to.Ptr(true),
				PrivateDNSZone:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			FqdnSubdomain:            to.Ptr("domain1"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			PrivateFQDN:       to.Ptr("domain1.privatelink.location1.azmk8s.io"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type:                   to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					Count:                  to.Ptr[int32](3),
					EnableEncryptionAtHost: to.Ptr(true),
					EnableNodePublicIP:     to.Ptr(true),
					Mode:                   to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:                 to.Ptr("Standard_DS2_v2"),
					Name:                   to.Ptr("nodepool1"),
				}},
			APIServerAccessProfile: &armcontainerservice.ManagedClusterAPIServerAccessProfile{
				EnablePrivateCluster: to.Ptr(true),
				PrivateDNSZone:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io"),
			},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			FqdnSubdomain:           to.Ptr("domain1"),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update AAD Managed Cluster with EnableAzureRBAC"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AADProfile: &armcontainerservice.ManagedClusterAADProfile{
				EnableAzureRBAC: to.Ptr(true),
				Managed:         to.Ptr(true),
			},
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AADProfile: &armcontainerservice.ManagedClusterAADProfile{
				EnableAzureRBAC: to.Ptr(true),
				Managed:         to.Ptr(true),
				TenantID:        to.Ptr("tenantID"),
			},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AADProfile: &armcontainerservice.ManagedClusterAADProfile{
				EnableAzureRBAC: to.Ptr(true),
				Managed:         to.Ptr(true),
			},
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					ClientID:    to.Ptr("clientId1"),
					PrincipalID: to.Ptr("principalId1"),
				},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					ScaleDownMode:              to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithAHUB.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with EnableAHUB"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
				LicenseType:   to.Ptr(armcontainerservice.LicenseTypeWindowsServer),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					ClientID:    to.Ptr("clientId1"),
					PrincipalID: to.Ptr("principalId1"),
				},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
				LicenseType:   to.Ptr(armcontainerservice.LicenseTypeWindowsServer),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
				LicenseType:   to.Ptr(armcontainerservice.LicenseTypeWindowsServer),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithAHUB.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWithAHUB.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWindowsGmsa.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with Windows gMSA enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
				GmsaProfile: &armcontainerservice.WindowsGmsaProfile{
					Enabled: to.Ptr(true),
				},
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					ClientID:    to.Ptr("clientId1"),
					PrincipalID: to.Ptr("principalId1"),
				},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			CurrentKubernetesVersion: to.Ptr("1.9.6"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
				GmsaProfile: &armcontainerservice.WindowsGmsaProfile{
					Enabled: to.Ptr(true),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				ScaleDownDelayAfterAdd: to.Ptr("15m"),
				ScanInterval:           to.Ptr("20s"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
				GmsaProfile: &armcontainerservice.WindowsGmsaProfile{
					Enabled: to.Ptr(true),
				},
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWindowsGmsa.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_UpdateWindowsGmsa.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DualStackNetworking.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Managed Cluster with dual-stack networking"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4),
					to.Ptr(armcontainerservice.IPFamilyIPv6)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}

	exampleRes = armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
					ClientID:    to.Ptr("clientId1"),
					PrincipalID: to.Ptr("principalId1"),
				},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.22.1"),
					EnableNodePublicIP:         to.Ptr(true),
					MaxPods:                    to.Ptr[int32](110),
					Mode:                       to.Ptr(armcontainerservice.AgentPoolModeSystem),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.22.1"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					ScaleDownMode:              to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			CurrentKubernetesVersion: to.Ptr("1.22.1"),
			DiskEncryptionSetID:      to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:                to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy:  to.Ptr(true),
			EnableRBAC:               to.Ptr(true),
			Fqdn:                     to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:        to.Ptr("1.22.1"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			MaxAgentPools: to.Ptr[int32](1),
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP: to.Ptr("10.0.0.10"),
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4),
					to.Ptr(armcontainerservice.IPFamilyIPv6)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					AllocatedOutboundPorts: to.Ptr[int32](2000),
					EffectiveOutboundIPs: []*armcontainerservice.ResourceReference{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip1"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip2"),
						},
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/MC_rg1/providers/Microsoft.Network/publicIPAddresses/mgdoutboundip3-ipv6"),
						}},
					IdleTimeoutInMinutes: to.Ptr[int32](10),
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count:     to.Ptr[int32](2),
						CountIPv6: to.Ptr[int32](1),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUBasic),
				NetworkPlugin:   to.Ptr(armcontainerservice.NetworkPluginKubenet),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
				PodCidr:         to.Ptr("10.244.0.0/16"),
				PodCidrs: []*string{
					to.Ptr("10.244.0.0/16"),
					to.Ptr("fd11:1234::/64")},
				ServiceCidr: to.Ptr("10.0.0.0/16"),
				ServiceCidrs: []*string{
					to.Ptr("10.0.0.0/16"),
					to.Ptr("fd00:1234::/108")},
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminUsername: to.Ptr("azureuser"),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedCluster, options *armcontainerservice.ManagedClustersClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientCreateOrUpdateResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", armcontainerservice.ManagedCluster{
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv2": to.Ptr(""),
			"tier":   to.Ptr("production"),
		},
		Identity: &armcontainerservice.ManagedClusterIdentity{
			Type: to.Ptr(armcontainerservice.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{
				"/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerservice.ManagedServiceIdentityUserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AddonProfiles: map[string]*armcontainerservice.ManagedClusterAddonProfile{},
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Type: to.Ptr(armcontainerservice.AgentPoolTypeVirtualMachineScaleSets),
					AvailabilityZones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
					Count:              to.Ptr[int32](3),
					EnableNodePublicIP: to.Ptr(true),
					Mode:               to.Ptr(armcontainerservice.AgentPoolModeSystem),
					OSType:             to.Ptr(armcontainerservice.OSTypeLinux),
					ScaleDownMode:      to.Ptr(armcontainerservice.ScaleDownModeDeallocate),
					VMSize:             to.Ptr("Standard_DS1_v2"),
					Name:               to.Ptr("nodepool1"),
				}},
			AutoScalerProfile: &armcontainerservice.ManagedClusterPropertiesAutoScalerProfile{
				BalanceSimilarNodeGroups: to.Ptr("true"),
				Expander:                 to.Ptr(armcontainerservice.ExpanderPriority),
				MaxNodeProvisionTime:     to.Ptr("15m"),
				NewPodScaleUpDelay:       to.Ptr("1m"),
				ScaleDownDelayAfterAdd:   to.Ptr("15m"),
				ScanInterval:             to.Ptr("20s"),
				SkipNodesWithSystemPods:  to.Ptr("false"),
			},
			DiskEncryptionSetID:     to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:               to.Ptr("dnsprefix1"),
			EnablePodSecurityPolicy: to.Ptr(true),
			EnableRBAC:              to.Ptr(true),
			KubernetesVersion:       to.Ptr(""),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				IPFamilies: []*armcontainerservice.IPFamily{
					to.Ptr(armcontainerservice.IPFamilyIPv4),
					to.Ptr(armcontainerservice.IPFamilyIPv6)},
				LoadBalancerProfile: &armcontainerservice.ManagedClusterLoadBalancerProfile{
					ManagedOutboundIPs: &armcontainerservice.ManagedClusterLoadBalancerProfileManagedOutboundIPs{
						Count: to.Ptr[int32](2),
					},
				},
				LoadBalancerSKU: to.Ptr(armcontainerservice.LoadBalancerSKUStandard),
				OutboundType:    to.Ptr(armcontainerservice.OutboundTypeLoadBalancer),
			},
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
				Secret:   to.Ptr("secret"),
			},
			WindowsProfile: &armcontainerservice.ManagedClusterWindowsProfile{
				AdminPassword: to.Ptr("replacePassword1234$"),
				AdminUsername: to.Ptr("azureuser"),
			},
		},
		SKU: &armcontainerservice.ManagedClusterSKU{
			Name: to.Ptr(armcontainerservice.ManagedClusterSKUName("Basic")),
			Tier: to.Ptr(armcontainerservice.ManagedClusterSKUTierFree),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DualStackNetworking.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersCreate_DualStackNetworking.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))
}

func (testsuite *FakeTestSuite) TestManagedClusters_UpdateTags() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Managed Cluster Tags"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.TagsObject
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.TagsObject{
		Tags: map[string]*string{
			"archv3": to.Ptr(""),
			"tier":   to.Ptr("testing"),
		},
	}

	exampleRes := armcontainerservice.ManagedCluster{
		Name:     to.Ptr("clustername1"),
		Type:     to.Ptr("Microsoft.ContainerService/ManagedClusters"),
		ID:       to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1"),
		Location: to.Ptr("location1"),
		Tags: map[string]*string{
			"archv3": to.Ptr(""),
			"tier":   to.Ptr("testing"),
		},
		Properties: &armcontainerservice.ManagedClusterProperties{
			AgentPoolProfiles: []*armcontainerservice.ManagedClusterAgentPoolProfile{
				{
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					MaxPods:                    to.Ptr[int32](110),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
					Name:                       to.Ptr("nodepool1"),
				}},
			DiskEncryptionSetID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des"),
			DNSPrefix:           to.Ptr("dnsprefix1"),
			EnableRBAC:          to.Ptr(false),
			Fqdn:                to.Ptr("dnsprefix1-abcd1234.hcp.eastus.azmk8s.io"),
			KubernetesVersion:   to.Ptr("1.9.6"),
			LinuxProfile: &armcontainerservice.LinuxProfile{
				AdminUsername: to.Ptr("azureuser"),
				SSH: &armcontainerservice.SSHConfiguration{
					PublicKeys: []*armcontainerservice.SSHPublicKey{
						{
							KeyData: to.Ptr("keydata"),
						}},
				},
			},
			NetworkProfile: &armcontainerservice.NetworkProfile{
				DNSServiceIP:  to.Ptr("10.0.0.10"),
				NetworkPlugin: to.Ptr(armcontainerservice.NetworkPluginKubenet),
				PodCidr:       to.Ptr("10.244.0.0/16"),
				ServiceCidr:   to.Ptr("10.0.0.0/16"),
			},
			NodeResourceGroup: to.Ptr("MC_rg1_clustername1_location1"),
			ProvisioningState: to.Ptr("Succeeded"),
			ServicePrincipalProfile: &armcontainerservice.ManagedClusterServicePrincipalProfile{
				ClientID: to.Ptr("clientid"),
			},
		},
	}

	fakeServer.BeginUpdateTags = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.TagsObject, options *armcontainerservice.ManagedClustersClientBeginUpdateTagsOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientUpdateTagsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientUpdateTagsResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientUpdateTagsResponse{ManagedCluster: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdateTags(ctx, "rg1", "clustername1", armcontainerservice.TagsObject{
		Tags: map[string]*string{
			"archv3": to.Ptr(""),
			"tier":   to.Ptr("testing"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersUpdateTags.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersUpdateTags.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ManagedCluster))
}

func (testsuite *FakeTestSuite) TestManagedClusters_Delete() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersDelete.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_ResetServicePrincipalProfile() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetServicePrincipalProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset Service Principal Profile"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.ManagedClusterServicePrincipalProfile
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedClusterServicePrincipalProfile{
		ClientID: to.Ptr("clientid"),
		Secret:   to.Ptr("secret"),
	}

	fakeServer.BeginResetServicePrincipalProfile = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedClusterServicePrincipalProfile, options *armcontainerservice.ManagedClustersClientBeginResetServicePrincipalProfileOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientResetServicePrincipalProfileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientResetServicePrincipalProfileResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientResetServicePrincipalProfileResponse{}, nil)
		return
	}
	poller, err := client.BeginResetServicePrincipalProfile(ctx, "rg1", "clustername1", armcontainerservice.ManagedClusterServicePrincipalProfile{
		ClientID: to.Ptr("clientid"),
		Secret:   to.Ptr("secret"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetServicePrincipalProfile.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetServicePrincipalProfile.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_ResetAADProfile() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetAADProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reset AAD Profile"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.ManagedClusterAADProfile
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.ManagedClusterAADProfile{
		ClientAppID:     to.Ptr("clientappid"),
		ServerAppID:     to.Ptr("serverappid"),
		ServerAppSecret: to.Ptr("serverappsecret"),
		TenantID:        to.Ptr("tenantid"),
	}

	fakeServer.BeginResetAADProfile = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.ManagedClusterAADProfile, options *armcontainerservice.ManagedClustersClientBeginResetAADProfileOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientResetAADProfileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientResetAADProfileResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientResetAADProfileResponse{}, nil)
		return
	}
	poller, err := client.BeginResetAADProfile(ctx, "rg1", "clustername1", armcontainerservice.ManagedClusterAADProfile{
		ClientAppID:     to.Ptr("clientappid"),
		ServerAppID:     to.Ptr("serverappid"),
		ServerAppSecret: to.Ptr("serverappsecret"),
		TenantID:        to.Ptr("tenantid"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetAADProfile.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersResetAADProfile.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_RotateClusterCertificates() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateClusterCertificates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rotate Cluster Certificates"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginRotateClusterCertificates = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginRotateClusterCertificatesOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientRotateClusterCertificatesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientRotateClusterCertificatesResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientRotateClusterCertificatesResponse{}, nil)
		return
	}
	poller, err := client.BeginRotateClusterCertificates(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateClusterCertificates.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateClusterCertificates.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_AbortLatestOperation() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersAbortOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Abort operation on managed cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginAbortLatestOperation = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginAbortLatestOperationOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientAbortLatestOperationResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientAbortLatestOperationResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientAbortLatestOperationResponse{}, nil)
		return
	}
	poller, err := client.BeginAbortLatestOperation(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersAbortOperation.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersAbortOperation.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_RotateServiceAccountSigningKeys() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateServiceAccountSigningKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rotate Cluster Service Account Signing Keys"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginRotateServiceAccountSigningKeys = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginRotateServiceAccountSigningKeysOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientRotateServiceAccountSigningKeysResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientRotateServiceAccountSigningKeysResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientRotateServiceAccountSigningKeysResponse{}, nil)
		return
	}
	poller, err := client.BeginRotateServiceAccountSigningKeys(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateServiceAccountSigningKeys.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersRotateServiceAccountSigningKeys.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_Stop() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginStop = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginStopOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientStopResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientStopResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientStopResponse{}, nil)
		return
	}
	poller, err := client.BeginStop(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStop.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStop.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_Start() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientBeginStartOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.ManagedClustersClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ManagedClustersStart.json")
}

func (testsuite *FakeTestSuite) TestManagedClusters_RunCommand() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"submitNewCommand"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleRequestPayload armcontainerservice.RunCommandRequest
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleRequestPayload = armcontainerservice.RunCommandRequest{
		ClusterToken: to.Ptr(""),
		Command:      to.Ptr("kubectl apply -f ns.yaml"),
		Context:      to.Ptr(""),
	}

	exampleRes := armcontainerservice.RunCommandResult{
		ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
		Properties: &armcontainerservice.CommandResultProperties{
			ExitCode:          to.Ptr[int32](0),
			FinishedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:33Z"); return t }()),
			Logs:              to.Ptr("namespace dummy created"),
			ProvisioningState: to.Ptr("Succeeded"),
			StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:20Z"); return t }()),
		},
	}

	fakeServer.BeginRunCommand = func(ctx context.Context, resourceGroupName string, resourceName string, requestPayload armcontainerservice.RunCommandRequest, options *armcontainerservice.ManagedClustersClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcontainerservice.ManagedClustersClientRunCommandResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleRequestPayload, requestPayload)
		resp = azfake.PollerResponder[armcontainerservice.ManagedClustersClientRunCommandResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.ManagedClustersClientRunCommandResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginRunCommand(ctx, "rg1", "clustername1", armcontainerservice.RunCommandRequest{
		ClusterToken: to.Ptr(""),
		Command:      to.Ptr("kubectl apply -f ns.yaml"),
		Context:      to.Ptr(""),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandRequest.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandRequest.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestManagedClusters_GetCommandResult() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandResultFailed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"commandFailedResult"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleCommandID string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleCommandID = "def7b3ea71bd4f7e9d226ddbc0f00ad9"

	exampleRes := armcontainerservice.RunCommandResult{
		ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
		Properties: &armcontainerservice.CommandResultProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			Reason:            to.Ptr("ImagePullBackoff"),
		},
	}

	fakeServer.GetCommandResult = func(ctx context.Context, resourceGroupName string, resourceName string, commandID string, options *armcontainerservice.ManagedClustersClientGetCommandResultOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetCommandResultResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleCommandID, commandID)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetCommandResultResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetCommandResultResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	res, err := client.GetCommandResult(ctx, "rg1", "clustername1", "def7b3ea71bd4f7e9d226ddbc0f00ad9", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandResultFailed.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandResultSucceed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"commandSucceedResult"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleCommandID = "def7b3ea71bd4f7e9d226ddbc0f00ad9"

	exampleRes = armcontainerservice.RunCommandResult{
		ID: to.Ptr("def7b3ea71bd4f7e9d226ddbc0f00ad9"),
		Properties: &armcontainerservice.CommandResultProperties{
			ExitCode:          to.Ptr[int32](0),
			FinishedAt:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:33Z"); return t }()),
			Logs:              to.Ptr("namespace dummy created"),
			ProvisioningState: to.Ptr("Succeeded"),
			StartedAt:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-17T00:28:20Z"); return t }()),
		},
	}

	fakeServer.GetCommandResult = func(ctx context.Context, resourceGroupName string, resourceName string, commandID string, options *armcontainerservice.ManagedClustersClientGetCommandResultOptions) (resp azfake.Responder[armcontainerservice.ManagedClustersClientGetCommandResultResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleCommandID, commandID)
		resp = azfake.Responder[armcontainerservice.ManagedClustersClientGetCommandResultResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ManagedClustersClientGetCommandResultResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	res, err = client.GetCommandResult(ctx, "rg1", "clustername1", "def7b3ea71bd4f7e9d226ddbc0f00ad9", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/RunCommandResultSucceed.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestManagedClusters_ListOutboundNetworkDependenciesEndpoints() {
	ctx := context.Background()
	fakeServer := fake.ManagedClustersServer{}
	client, err := armcontainerservice.NewManagedClustersClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewManagedClustersServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/OutboundNetworkDependenciesEndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List OutboundNetworkDependenciesEndpoints by Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.OutboundEnvironmentEndpointCollection{
		Value: []*armcontainerservice.OutboundEnvironmentEndpoint{
			{
				Category: to.Ptr("azure-resource-management"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("management.azure.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("login.microsoftonline.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					}},
			},
			{
				Category: to.Ptr("images"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("mcr.microsoft.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("*.data.mcr.microsoft.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Description: to.Ptr("mcr cdn"),
								Port:        to.Ptr[int32](443),
								Protocol:    to.Ptr("Https"),
							}},
					}},
			},
			{
				Category: to.Ptr("artifacts"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("packages.microsoft.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("acs-mirror.azureedge.net"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					}},
			},
			{
				Category: to.Ptr("time-sync"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("ntp.ubuntu.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](123),
								Protocol: to.Ptr("UDP"),
							}},
					}},
			},
			{
				Category: to.Ptr("ubuntu-optional"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("security.ubuntu.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					},
					{
						DomainName: to.Ptr("azure.archive.ubuntu.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					},
					{
						DomainName: to.Ptr("changelogs.ubuntu.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					}},
			},
			{
				Category: to.Ptr("gpu"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("nvidia.github.io"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("us.download.nvidia.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("apt.dockerproject.org"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					}},
			},
			{
				Category: to.Ptr("windows"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("onegetcdn.azureedge.net"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("go.microsoft.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					},
					{
						DomainName: to.Ptr("*.mp.microsoft.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					},
					{
						DomainName: to.Ptr("www.msftconnecttest.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					},
					{
						DomainName: to.Ptr("ctldl.windowsupdate.com"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](80),
								Protocol: to.Ptr("Http"),
							}},
					}},
			},
			{
				Category: to.Ptr("apiserver"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("*.azmk8s.io"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](443),
								Protocol: to.Ptr("Https"),
							}},
					}},
			},
			{
				Category: to.Ptr("tunnel-classic"),
				Endpoints: []*armcontainerservice.EndpointDependency{
					{
						DomainName: to.Ptr("*.azmk8s.io"),
						EndpointDetails: []*armcontainerservice.EndpointDetail{
							{
								Port:     to.Ptr[int32](9000),
								Protocol: to.Ptr("TCP"),
							}},
					}},
			}},
	}

	fakeServer.NewListOutboundNetworkDependenciesEndpointsPager = func(resourceGroupName string, resourceName string, options *armcontainerservice.ManagedClustersClientListOutboundNetworkDependenciesEndpointsOptions) (resp azfake.PagerResponder[armcontainerservice.ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armcontainerservice.ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.ManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse{OutboundEnvironmentEndpointCollection: exampleRes}, nil)
		return
	}
	pager := client.NewListOutboundNetworkDependenciesEndpointsPager("rg1", "clustername1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/OutboundNetworkDependenciesEndpointsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OutboundEnvironmentEndpointCollection))
	}
}

func (testsuite *FakeTestSuite) TestMaintenanceConfigurations_ListByManagedCluster() {
	ctx := context.Background()
	fakeServer := fake.MaintenanceConfigurationsServer{}
	client, err := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewMaintenanceConfigurationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List maintenance configurations by Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.MaintenanceConfigurationListResult{
		Value: []*armcontainerservice.MaintenanceConfiguration{
			{
				Name: to.Ptr("default"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
				Properties: &armcontainerservice.MaintenanceConfigurationProperties{
					NotAllowedTime: []*armcontainerservice.TimeSpan{
						{
							End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
							Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
						}},
					TimeInWeek: []*armcontainerservice.TimeInWeek{
						{
							Day: to.Ptr(armcontainerservice.WeekDayMonday),
							HourSlots: []*int32{
								to.Ptr[int32](1),
								to.Ptr[int32](2)},
						}},
				},
			}},
	}

	fakeServer.NewListByManagedClusterPager = func(resourceGroupName string, resourceName string, options *armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterOptions) (resp azfake.PagerResponder[armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse{MaintenanceConfigurationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByManagedClusterPager("rg1", "clustername1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.MaintenanceConfigurationListResult))
	}

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsList_MaintenanceWindow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List maintenance configurations configured with maintenance window by Managed Cluster"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes = armcontainerservice.MaintenanceConfigurationListResult{
		Value: []*armcontainerservice.MaintenanceConfiguration{
			{
				Name: to.Ptr("aksManagedNodeOSUpgradeSchedule"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/aksManagedNodeOSUpgradeSchedule"),
				Properties: &armcontainerservice.MaintenanceConfigurationProperties{
					MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
						DurationHours: to.Ptr[int32](10),
						Schedule: &armcontainerservice.Schedule{
							Daily: &armcontainerservice.DailySchedule{
								IntervalDays: to.Ptr[int32](5),
							},
						},
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
						StartTime: to.Ptr("13:30"),
						UTCOffset: to.Ptr("-07:00"),
					},
				},
			},
			{
				Name: to.Ptr("aksManagedAutoUpgradeSchedule"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/aksManagedAutoUpgradeSchedule"),
				Properties: &armcontainerservice.MaintenanceConfigurationProperties{
					MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
						DurationHours: to.Ptr[int32](5),
						NotAllowedDates: []*armcontainerservice.DateSpan{
							{
								End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-25"); return t }()),
								Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-18"); return t }()),
							},
							{
								End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2024-01-05"); return t }()),
								Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-12-23"); return t }()),
							}},
						Schedule: &armcontainerservice.Schedule{
							AbsoluteMonthly: &armcontainerservice.AbsoluteMonthlySchedule{
								DayOfMonth:     to.Ptr[int32](15),
								IntervalMonths: to.Ptr[int32](3),
							},
						},
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
						StartTime: to.Ptr("08:30"),
						UTCOffset: to.Ptr("+00:00"),
					},
				},
			}},
	}

	fakeServer.NewListByManagedClusterPager = func(resourceGroupName string, resourceName string, options *armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterOptions) (resp azfake.PagerResponder[armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientListByManagedClusterResponse{MaintenanceConfigurationListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListByManagedClusterPager("rg1", "clustername1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsList_MaintenanceWindow.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.MaintenanceConfigurationListResult))
	}
}

func (testsuite *FakeTestSuite) TestMaintenanceConfigurations_Get() {
	ctx := context.Background()
	fakeServer := fake.MaintenanceConfigurationsServer{}
	client, err := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewMaintenanceConfigurationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Maintenance Configuration"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleConfigName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "default"

	exampleRes := armcontainerservice.MaintenanceConfiguration{
		Name: to.Ptr("default"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			NotAllowedTime: []*armcontainerservice.TimeSpan{
				{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
				}},
			TimeInWeek: []*armcontainerservice.TimeInWeek{
				{
					Day: to.Ptr(armcontainerservice.WeekDayMonday),
					HourSlots: []*int32{
						to.Ptr[int32](1),
						to.Ptr[int32](2)},
				}},
		},
		SystemData: &armcontainerservice.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
			CreatedBy:          to.Ptr("user1"),
			CreatedByType:      to.Ptr(armcontainerservice.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
			LastModifiedBy:     to.Ptr("user2"),
			LastModifiedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, options *armcontainerservice.MaintenanceConfigurationsClientGetOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientGetResponse{MaintenanceConfiguration: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "rg1", "clustername1", "default", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsGet_MaintenanceWindow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Maintenance Configuration Configured With Maintenance Window"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "aksManagedNodeOSUpgradeSchedule"

	exampleRes = armcontainerservice.MaintenanceConfiguration{
		Name: to.Ptr("aksManagedNodeOSUpgradeSchedule"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/aksManagedNodeOSUpgradeSchedule"),
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
				DurationHours: to.Ptr[int32](4),
				NotAllowedDates: []*armcontainerservice.DateSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-25"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-18"); return t }()),
					},
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2024-01-05"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-12-23"); return t }()),
					}},
				Schedule: &armcontainerservice.Schedule{
					Daily: &armcontainerservice.DailySchedule{
						IntervalDays: to.Ptr[int32](3),
					},
				},
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
				StartTime: to.Ptr("09:30"),
				UTCOffset: to.Ptr("-07:00"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, options *armcontainerservice.MaintenanceConfigurationsClientGetOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientGetResponse{MaintenanceConfiguration: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, "rg1", "clustername1", "aksManagedNodeOSUpgradeSchedule", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsGet_MaintenanceWindow.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration))
}

func (testsuite *FakeTestSuite) TestMaintenanceConfigurations_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.MaintenanceConfigurationsServer{}
	client, err := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewMaintenanceConfigurationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Maintenance Configuration"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleConfigName string
	var exampleParameters armcontainerservice.MaintenanceConfiguration
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "default"
	exampleParameters = armcontainerservice.MaintenanceConfiguration{
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			NotAllowedTime: []*armcontainerservice.TimeSpan{
				{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
				}},
			TimeInWeek: []*armcontainerservice.TimeInWeek{
				{
					Day: to.Ptr(armcontainerservice.WeekDayMonday),
					HourSlots: []*int32{
						to.Ptr[int32](1),
						to.Ptr[int32](2)},
				}},
		},
	}

	exampleRes := armcontainerservice.MaintenanceConfiguration{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/maintenanceConfigurations"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/default"),
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			NotAllowedTime: []*armcontainerservice.TimeSpan{
				{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
				}},
			TimeInWeek: []*armcontainerservice.TimeInWeek{
				{
					Day: to.Ptr(armcontainerservice.WeekDayMonday),
					HourSlots: []*int32{
						to.Ptr[int32](1),
						to.Ptr[int32](2)},
				}},
		},
		SystemData: &armcontainerservice.SystemData{
			CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.1234567Z"); return t }()),
			CreatedBy:          to.Ptr("user1"),
			CreatedByType:      to.Ptr(armcontainerservice.CreatedByTypeUser),
			LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.1234567Z"); return t }()),
			LastModifiedBy:     to.Ptr("user2"),
			LastModifiedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, parameters armcontainerservice.MaintenanceConfiguration, options *armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse{MaintenanceConfiguration: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, "rg1", "clustername1", "default", armcontainerservice.MaintenanceConfiguration{
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			NotAllowedTime: []*armcontainerservice.TimeSpan{
				{
					End:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-30T12:00:00Z"); return t }()),
					Start: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-26T03:00:00Z"); return t }()),
				}},
			TimeInWeek: []*armcontainerservice.TimeInWeek{
				{
					Day: to.Ptr(armcontainerservice.WeekDayMonday),
					HourSlots: []*int32{
						to.Ptr[int32](1),
						to.Ptr[int32](2)},
				}},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsCreate_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsCreate_Update_MaintenanceWindow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Maintenance Configuration with Maintenance Window"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "aksManagedAutoUpgradeSchedule"
	exampleParameters = armcontainerservice.MaintenanceConfiguration{
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
				DurationHours: to.Ptr[int32](10),
				NotAllowedDates: []*armcontainerservice.DateSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-25"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-18"); return t }()),
					},
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2024-01-05"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-12-23"); return t }()),
					}},
				Schedule: &armcontainerservice.Schedule{
					RelativeMonthly: &armcontainerservice.RelativeMonthlySchedule{
						DayOfWeek:      to.Ptr(armcontainerservice.WeekDayMonday),
						IntervalMonths: to.Ptr[int32](3),
						WeekIndex:      to.Ptr(armcontainerservice.TypeFirst),
					},
				},
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
				StartTime: to.Ptr("08:30"),
				UTCOffset: to.Ptr("+05:30"),
			},
		},
	}

	exampleRes = armcontainerservice.MaintenanceConfiguration{
		Name: to.Ptr("aksManagedAutoUpgradeSchedule"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/maintenanceConfigurations/aksManagedAutoUpgradeSchedule"),
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
				DurationHours: to.Ptr[int32](10),
				NotAllowedDates: []*armcontainerservice.DateSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-25"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-18"); return t }()),
					},
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2024-01-05"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-12-23"); return t }()),
					}},
				Schedule: &armcontainerservice.Schedule{
					Weekly: &armcontainerservice.WeeklySchedule{
						DayOfWeek:     to.Ptr(armcontainerservice.WeekDayMonday),
						IntervalWeeks: to.Ptr[int32](3),
					},
				},
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
				StartTime: to.Ptr("08:30"),
				UTCOffset: to.Ptr("+05:30"),
			},
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, parameters armcontainerservice.MaintenanceConfiguration, options *armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientCreateOrUpdateResponse{MaintenanceConfiguration: exampleRes}, nil)
		return
	}
	res, err = client.CreateOrUpdate(ctx, "rg1", "clustername1", "aksManagedAutoUpgradeSchedule", armcontainerservice.MaintenanceConfiguration{
		Properties: &armcontainerservice.MaintenanceConfigurationProperties{
			MaintenanceWindow: &armcontainerservice.MaintenanceWindow{
				DurationHours: to.Ptr[int32](10),
				NotAllowedDates: []*armcontainerservice.DateSpan{
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-25"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-02-18"); return t }()),
					},
					{
						End:   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2024-01-05"); return t }()),
						Start: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-12-23"); return t }()),
					}},
				Schedule: &armcontainerservice.Schedule{
					RelativeMonthly: &armcontainerservice.RelativeMonthlySchedule{
						DayOfWeek:      to.Ptr(armcontainerservice.WeekDayMonday),
						IntervalMonths: to.Ptr[int32](3),
						WeekIndex:      to.Ptr(armcontainerservice.TypeFirst),
					},
				},
				StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-01-01"); return t }()),
				StartTime: to.Ptr("08:30"),
				UTCOffset: to.Ptr("+05:30"),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsCreate_Update_MaintenanceWindow.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.MaintenanceConfiguration))
}

func (testsuite *FakeTestSuite) TestMaintenanceConfigurations_Delete() {
	ctx := context.Background()
	fakeServer := fake.MaintenanceConfigurationsServer{}
	client, err := armcontainerservice.NewMaintenanceConfigurationsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewMaintenanceConfigurationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Maintenance Configuration"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleConfigName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "default"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, options *armcontainerservice.MaintenanceConfigurationsClientDeleteOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, "rg1", "clustername1", "default", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsDelete.json")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsDelete_MaintenanceWindow.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Maintenance Configuration For Node OS Upgrade"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleConfigName = "aksManagedNodeOSUpgradeSchedule"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, resourceName string, configName string, options *armcontainerservice.MaintenanceConfigurationsClientDeleteOptions) (resp azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleConfigName, configName)
		resp = azfake.Responder[armcontainerservice.MaintenanceConfigurationsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.MaintenanceConfigurationsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, "rg1", "clustername1", "aksManagedNodeOSUpgradeSchedule", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/MaintenanceConfigurationsDelete_MaintenanceWindow.json")
}

func (testsuite *FakeTestSuite) TestAgentPools_AbortLatestOperation() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsAbortOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Abort operation on agent pool"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"

	fakeServer.BeginAbortLatestOperation = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, options *armcontainerservice.AgentPoolsClientBeginAbortLatestOperationOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientAbortLatestOperationResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientAbortLatestOperationResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.AgentPoolsClientAbortLatestOperationResponse{}, nil)
		return
	}
	poller, err := client.BeginAbortLatestOperation(ctx, "rg1", "clustername1", "agentpool1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsAbortOperation.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsAbortOperation.json")
}

func (testsuite *FakeTestSuite) TestAgentPools_List() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Agent Pools by Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.AgentPoolListResult{
		Value: []*armcontainerservice.AgentPool{
			{
				Name: to.Ptr("agentpool1"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
				Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
					Count:                      to.Ptr[int32](3),
					CurrentOrchestratorVersion: to.Ptr("1.9.6"),
					MaxPods:                    to.Ptr[int32](110),
					NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
					OrchestratorVersion:        to.Ptr("1.9.6"),
					OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
					ProvisioningState:          to.Ptr("Succeeded"),
					VMSize:                     to.Ptr("Standard_DS1_v2"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, resourceName string, options *armcontainerservice.AgentPoolsClientListOptions) (resp azfake.PagerResponder[armcontainerservice.AgentPoolsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.PagerResponder[armcontainerservice.AgentPoolsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.AgentPoolsClientListResponse{AgentPoolListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("rg1", "clustername1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AgentPoolListResult))
	}
}

func (testsuite *FakeTestSuite) TestAgentPools_Get() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Agent Pool"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"

	exampleRes := armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.9.6"),
			MaxPods:                    to.Ptr[int32](110),
			NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
			OrchestratorVersion:        to.Ptr("1.9.6"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			UpgradeSettings: &armcontainerservice.AgentPoolUpgradeSettings{
				MaxSurge: to.Ptr("33%"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, options *armcontainerservice.AgentPoolsClientGetOptions) (resp azfake.Responder[armcontainerservice.AgentPoolsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.Responder[armcontainerservice.AgentPoolsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.AgentPoolsClientGetResponse{AgentPool: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "rg1", "clustername1", "agentpool1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))
}

func (testsuite *FakeTestSuite) TestAgentPools_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Snapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool using an agent pool snapshot"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	var exampleParameters armcontainerservice.AgentPool
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			},
			EnableFIPS:          to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes := armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			},
			CurrentOrchestratorVersion: to.Ptr("1.19.6"),
			EnableFIPS:                 to.Ptr(true),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.19.6"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
			},
			EnableFIPS:          to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Snapshot.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Snapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_DedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Dedicated Host Group"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			HostGroupID:         to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			HostGroupID:         to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
			MaxPods:             to.Ptr[int32](110),
			OrchestratorVersion: to.Ptr("1.19.6"),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:   to.Ptr("Succeeded"),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			HostGroupID:         to.Ptr("/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1"),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_DedicatedHostGroup.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_DedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with EncryptionAtHost enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                  to.Ptr[int32](3),
			EnableEncryptionAtHost: to.Ptr(true),
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:                 to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.13"),
			EnableEncryptionAtHost:     to.Ptr(true),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.17.13"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                  to.Ptr[int32](3),
			EnableEncryptionAtHost: to.Ptr(true),
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:                 to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Ephemeral.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Ephemeral OS Disk"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			OrchestratorVersion: to.Ptr(""),
			OSDiskSizeGB:        to.Ptr[int32](64),
			OSDiskType:          to.Ptr(armcontainerservice.OSDiskTypeEphemeral),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.8"),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.17.8"),
			OSDiskSizeGB:               to.Ptr[int32](64),
			OSDiskType:                 to.Ptr(armcontainerservice.OSDiskTypeEphemeral),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			OrchestratorVersion: to.Ptr(""),
			OSDiskSizeGB:        to.Ptr[int32](64),
			OSDiskType:          to.Ptr(armcontainerservice.OSDiskTypeEphemeral),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Ephemeral.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Ephemeral.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableFIPS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with FIPS enabled OS"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			EnableFIPS:          to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.19.6"),
			EnableFIPS:                 to.Ptr(true),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.19.6"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			EnableFIPS:          to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableFIPS.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableFIPS.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_GPUMIG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with GPUMIG"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:              to.Ptr[int32](3),
			GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG2G),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_ND96asr_v4"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.8"),
			GpuInstanceProfile:         to.Ptr(armcontainerservice.GPUInstanceProfileMIG2G),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			MaxPods:             to.Ptr[int32](110),
			OrchestratorVersion: to.Ptr("1.17.8"),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:   to.Ptr("Succeeded"),
			VMSize:              to.Ptr("Standard_ND96asr_v4"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:              to.Ptr[int32](3),
			GpuInstanceProfile: to.Ptr(armcontainerservice.GPUInstanceProfileMIG2G),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_ND96asr_v4"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_GPUMIG.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_GPUMIG.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WasmWasi.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Krustlet and the WASI runtime"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
			OrchestratorVersion: to.Ptr(""),
			OSDiskSizeGB:        to.Ptr[int32](64),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
			WorkloadRuntime:     to.Ptr(armcontainerservice.WorkloadRuntimeWasmWasi),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.8"),
			MaxPods:                    to.Ptr[int32](110),
			Mode:                       to.Ptr(armcontainerservice.AgentPoolModeUser),
			OrchestratorVersion:        to.Ptr("1.17.8"),
			OSDiskSizeGB:               to.Ptr[int32](64),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
			WorkloadRuntime:            to.Ptr(armcontainerservice.WorkloadRuntimeWasmWasi),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			Mode:                to.Ptr(armcontainerservice.AgentPoolModeUser),
			OrchestratorVersion: to.Ptr(""),
			OSDiskSizeGB:        to.Ptr[int32](64),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
			WorkloadRuntime:     to.Ptr(armcontainerservice.WorkloadRuntimeWasmWasi),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WasmWasi.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WasmWasi.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_CustomNodeConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with KubeletConfig and LinuxOSConfig"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.8"),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			MaxPods:             to.Ptr[int32](110),
			OrchestratorVersion: to.Ptr("1.17.8"),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:   to.Ptr("Succeeded"),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_CustomNodeConfig.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_CustomNodeConfig.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_OSSKU.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with OSSKU"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSSKU:               to.Ptr(armcontainerservice.OSSKUAzureLinux),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.8"),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			MaxPods:             to.Ptr[int32](110),
			OrchestratorVersion: to.Ptr("1.17.8"),
			OSSKU:               to.Ptr(armcontainerservice.OSSKUAzureLinux),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:   to.Ptr("Succeeded"),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			KubeletConfig: &armcontainerservice.KubeletConfig{
				AllowedUnsafeSysctls: []*string{
					to.Ptr("kernel.msg*"),
					to.Ptr("net.core.somaxconn")},
				CPUCfsQuota:           to.Ptr(true),
				CPUCfsQuotaPeriod:     to.Ptr("200ms"),
				CPUManagerPolicy:      to.Ptr("static"),
				FailSwapOn:            to.Ptr(false),
				ImageGcHighThreshold:  to.Ptr[int32](90),
				ImageGcLowThreshold:   to.Ptr[int32](70),
				TopologyManagerPolicy: to.Ptr("best-effort"),
			},
			LinuxOSConfig: &armcontainerservice.LinuxOSConfig{
				SwapFileSizeMB: to.Ptr[int32](1500),
				Sysctls: &armcontainerservice.SysctlConfig{
					KernelThreadsMax:        to.Ptr[int32](99999),
					NetCoreWmemDefault:      to.Ptr[int32](12345),
					NetIPv4IPLocalPortRange: to.Ptr("20000 60000"),
					NetIPv4TCPTwReuse:       to.Ptr(true),
				},
				TransparentHugePageDefrag:  to.Ptr("madvise"),
				TransparentHugePageEnabled: to.Ptr("always"),
			},
			OrchestratorVersion: to.Ptr(""),
			OSSKU:               to.Ptr(armcontainerservice.OSSKUAzureLinux),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_OSSKU.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_OSSKU.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_PPG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with PPG"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                     to.Ptr[int32](3),
			OrchestratorVersion:       to.Ptr(""),
			OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
			ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
			VMSize:                    to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.9.6"),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.9.6"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			ProximityPlacementGroupID:  to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                     to.Ptr[int32](3),
			OrchestratorVersion:       to.Ptr(""),
			OSType:                    to.Ptr(armcontainerservice.OSTypeLinux),
			ProximityPlacementGroupID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1"),
			VMSize:                    to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_PPG.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_PPG.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableUltraSSD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with UltraSSD enabled"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			EnableUltraSSD:      to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.17.13"),
			EnableUltraSSD:             to.Ptr(true),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.17.13"),
			OSType:                     to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_DS2_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			EnableUltraSSD:      to.Ptr(true),
			OrchestratorVersion: to.Ptr(""),
			OSType:              to.Ptr(armcontainerservice.OSTypeLinux),
			VMSize:              to.Ptr("Standard_DS2_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableUltraSSD.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_EnableUltraSSD.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WindowsOSSKU.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Agent Pool with Windows OSSKU"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "wnp2"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			OrchestratorVersion: to.Ptr("1.23.3"),
			OSSKU:               to.Ptr(armcontainerservice.OSSKUWindows2022),
			OSType:              to.Ptr(armcontainerservice.OSTypeWindows),
			VMSize:              to.Ptr("Standard_D4s_v3"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("wnp2"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/wnp2"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.23.3"),
			MaxPods:                    to.Ptr[int32](110),
			OrchestratorVersion:        to.Ptr("1.23.3"),
			OSSKU:                      to.Ptr(armcontainerservice.OSSKUWindows2022),
			OSType:                     to.Ptr(armcontainerservice.OSTypeWindows),
			ProvisioningState:          to.Ptr("Succeeded"),
			VMSize:                     to.Ptr("Standard_D4s_v3"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "wnp2", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:               to.Ptr[int32](3),
			OrchestratorVersion: to.Ptr("1.23.3"),
			OSSKU:               to.Ptr(armcontainerservice.OSSKUWindows2022),
			OSType:              to.Ptr(armcontainerservice.OSTypeWindows),
			VMSize:              to.Ptr("Standard_D4s_v3"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WindowsOSSKU.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_WindowsOSSKU.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Spot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Spot Agent Pool"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.9.6"),
			MaxPods:                    to.Ptr[int32](110),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr("1.9.6"),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:      to.Ptr("Succeeded"),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			SpotMaxPrice:           to.Ptr[float32](-1),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Spot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Spot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Agent Pool"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			Mode:  to.Ptr(armcontainerservice.AgentPoolModeUser),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.9.6"),
			MaxPods:                    to.Ptr[int32](110),
			Mode:                       to.Ptr(armcontainerservice.AgentPoolModeUser),
			NodeImageVersion:           to.Ptr("AKSUbuntu:1604:2020.03.11"),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr("1.9.6"),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:      to.Ptr("Succeeded"),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count: to.Ptr[int32](3),
			Mode:  to.Ptr(armcontainerservice.AgentPoolModeUser),
			NodeLabels: map[string]*string{
				"key1": to.Ptr("val1"),
			},
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			Tags: map[string]*string{
				"name1": to.Ptr("val1"),
			},
			VMSize: to.Ptr("Standard_DS1_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsCreate_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Agent Pool"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeRunning),
			},
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:             to.Ptr[int32](50),
			EnableAutoScaling: to.Ptr(true),
			MaxCount:          to.Ptr[int32](55),
			MinCount:          to.Ptr[int32](3),
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeRunning),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeRunning),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Start.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Start.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop Agent Pool"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeStopped),
			},
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:             to.Ptr[int32](0),
			EnableAutoScaling: to.Ptr(false),
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeStopped),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			PowerState: &armcontainerservice.PowerState{
				Code: to.Ptr(armcontainerservice.CodeStopped),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Stop.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Stop.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Agent Pool"},
	})
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"
	exampleParameters = armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:             to.Ptr[int32](3),
			EnableAutoScaling: to.Ptr(true),
			MaxCount:          to.Ptr[int32](2),
			MinCount:          to.Ptr[int32](2),
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			VMSize:                 to.Ptr("Standard_DS1_v2"),
		},
	}

	exampleRes = armcontainerservice.AgentPool{
		Name: to.Ptr("agentpool1"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1"),
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:                      to.Ptr[int32](3),
			CurrentOrchestratorVersion: to.Ptr("1.9.6"),
			EnableAutoScaling:          to.Ptr(true),
			MaxCount:                   to.Ptr[int32](2),
			MaxPods:                    to.Ptr[int32](110),
			MinCount:                   to.Ptr[int32](2),
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr("1.9.6"),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ProvisioningState:      to.Ptr("Succeeded"),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			VMSize:                 to.Ptr("Standard_DS1_v2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, parameters armcontainerservice.AgentPool, options *armcontainerservice.AgentPoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientCreateOrUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, "rg1", "clustername1", "agentpool1", armcontainerservice.AgentPool{
		Properties: &armcontainerservice.ManagedClusterAgentPoolProfileProperties{
			Count:             to.Ptr[int32](3),
			EnableAutoScaling: to.Ptr(true),
			MaxCount:          to.Ptr[int32](2),
			MinCount:          to.Ptr[int32](2),
			NodeTaints: []*string{
				to.Ptr("Key1=Value1:NoSchedule")},
			OrchestratorVersion:    to.Ptr(""),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			ScaleSetEvictionPolicy: to.Ptr(armcontainerservice.ScaleSetEvictionPolicyDelete),
			ScaleSetPriority:       to.Ptr(armcontainerservice.ScaleSetPrioritySpot),
			VMSize:                 to.Ptr("Standard_DS1_v2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPools_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))
}

func (testsuite *FakeTestSuite) TestAgentPools_Delete() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Agent Pool"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, options *armcontainerservice.AgentPoolsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusAccepted, armcontainerservice.AgentPoolsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "rg1", "clustername1", "agentpool1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsDelete.json")
}

func (testsuite *FakeTestSuite) TestAgentPools_GetUpgradeProfile() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGetUpgradeProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Upgrade Profile for Agent Pool"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"

	exampleRes := armcontainerservice.AgentPoolUpgradeProfile{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/agentPools/upgradeProfiles"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1/upgradeprofiles/default"),
		Properties: &armcontainerservice.AgentPoolUpgradeProfileProperties{
			KubernetesVersion:      to.Ptr("1.12.8"),
			LatestNodeImageVersion: to.Ptr("AKSUbuntu:1604:2020.03.11"),
			OSType:                 to.Ptr(armcontainerservice.OSTypeLinux),
			Upgrades: []*armcontainerservice.AgentPoolUpgradeProfilePropertiesUpgradesItem{
				{
					KubernetesVersion: to.Ptr("1.13.5"),
				}},
		},
	}

	fakeServer.GetUpgradeProfile = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, options *armcontainerservice.AgentPoolsClientGetUpgradeProfileOptions) (resp azfake.Responder[armcontainerservice.AgentPoolsClientGetUpgradeProfileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.Responder[armcontainerservice.AgentPoolsClientGetUpgradeProfileResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.AgentPoolsClientGetUpgradeProfileResponse{AgentPoolUpgradeProfile: exampleRes}, nil)
		return
	}
	res, err := client.GetUpgradeProfile(ctx, "rg1", "clustername1", "agentpool1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGetUpgradeProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPoolUpgradeProfile))
}

func (testsuite *FakeTestSuite) TestAgentPools_GetAvailableAgentPoolVersions() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGetAgentPoolAvailableVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available versions for agent pool"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.AgentPoolAvailableVersions{
		Name: to.Ptr("default"),
		Type: to.Ptr("Microsoft.ContainerService/managedClusters/availableAgentpoolVersions"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/availableagentpoolversions"),
		Properties: &armcontainerservice.AgentPoolAvailableVersionsProperties{
			AgentPoolVersions: []*armcontainerservice.AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem{
				{
					KubernetesVersion: to.Ptr("1.12.7"),
				},
				{
					KubernetesVersion: to.Ptr("1.12.8"),
				},
				{
					Default:           to.Ptr(true),
					IsPreview:         to.Ptr(true),
					KubernetesVersion: to.Ptr("1.13.5"),
				}},
		},
	}

	fakeServer.GetAvailableAgentPoolVersions = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.AgentPoolsClientGetAvailableAgentPoolVersionsOptions) (resp azfake.Responder[armcontainerservice.AgentPoolsClientGetAvailableAgentPoolVersionsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.AgentPoolsClientGetAvailableAgentPoolVersionsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.AgentPoolsClientGetAvailableAgentPoolVersionsResponse{AgentPoolAvailableVersions: exampleRes}, nil)
		return
	}
	res, err := client.GetAvailableAgentPoolVersions(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsGetAgentPoolAvailableVersions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPoolAvailableVersions))
}

func (testsuite *FakeTestSuite) TestAgentPools_UpgradeNodeImageVersion() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerservice.NewAgentPoolsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsUpgradeNodeImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrade Agent Pool Node Image Version"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleAgentPoolName = "agentpool1"

	fakeServer.BeginUpgradeNodeImageVersion = func(ctx context.Context, resourceGroupName string, resourceName string, agentPoolName string, options *armcontainerservice.AgentPoolsClientBeginUpgradeNodeImageVersionOptions) (resp azfake.PollerResponder[armcontainerservice.AgentPoolsClientUpgradeNodeImageVersionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.PollerResponder[armcontainerservice.AgentPoolsClientUpgradeNodeImageVersionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.AgentPoolsClientUpgradeNodeImageVersionResponse{}, nil)
		return
	}
	poller, err := client.BeginUpgradeNodeImageVersion(ctx, "rg1", "clustername1", "agentpool1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsUpgradeNodeImageVersion.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/AgentPoolsUpgradeNodeImageVersion.json")
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_List() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Endpoint Connections by Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.PrivateEndpointConnectionListResult{
		Value: []*armcontainerservice.PrivateEndpointConnection{
			{
				Name: to.Ptr("privateendpointconnection1"),
				Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/managedCluster/clustername1/privateEndpointConnections/privateendpointconnection1"),
				Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
					},
					PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
						Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.PrivateEndpointConnectionsClientListOptions) (resp azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.PrivateEndpointConnectionsClientListResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsList.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionListResult))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Private Endpoint Connection"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	examplePrivateEndpointConnectionName = "privateendpointconnection1"

	exampleRes := armcontainerservice.PrivateEndpointConnection{
		Name: to.Ptr("privateendpointconnection1"),
		Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/managedCluster/clustername1/privateEndpointConnections/privateendpointconnection1"),
		Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
			},
			PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
				Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, privateEndpointConnectionName string, options *armcontainerservice.PrivateEndpointConnectionsClientGetOptions) (resp azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.PrivateEndpointConnectionsClientGetResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "rg1", "clustername1", "privateendpointconnection1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Update() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Private Endpoint Connection"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var examplePrivateEndpointConnectionName string
	var exampleParameters armcontainerservice.PrivateEndpointConnection
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	examplePrivateEndpointConnectionName = "privateendpointconnection1"
	exampleParameters = armcontainerservice.PrivateEndpointConnection{
		Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
				Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
			},
		},
	}

	exampleRes := armcontainerservice.PrivateEndpointConnection{
		Name: to.Ptr("privateendpointconnection1"),
		Type: to.Ptr("Microsoft.Network/privateLinkServices/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/managedCluster/clustername1/privateEndpointConnections/privateendpointconnection1"),
		Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcontainerservice.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2"),
			},
			PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
				Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcontainerservice.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, resourceName string, privateEndpointConnectionName string, parameters armcontainerservice.PrivateEndpointConnection, options *armcontainerservice.PrivateEndpointConnectionsClientUpdateOptions) (resp azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.PrivateEndpointConnectionsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.PrivateEndpointConnectionsClientUpdateResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, "rg1", "clustername1", "privateendpointconnection1", armcontainerservice.PrivateEndpointConnection{
		Properties: &armcontainerservice.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcontainerservice.PrivateLinkServiceConnectionState{
				Status: to.Ptr(armcontainerservice.ConnectionStatusApproved),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerservice.NewPrivateEndpointConnectionsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Private Endpoint Connection"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	examplePrivateEndpointConnectionName = "privateendpointconnection1"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, resourceName string, privateEndpointConnectionName string, options *armcontainerservice.PrivateEndpointConnectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerservice.PrivateEndpointConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.PollerResponder[armcontainerservice.PrivateEndpointConnectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerservice.PrivateEndpointConnectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "rg1", "clustername1", "privateendpointconnection1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateEndpointConnectionsDelete.json")
}

func (testsuite *FakeTestSuite) TestPrivateLinkResources_List() {
	ctx := context.Background()
	fakeServer := fake.PrivateLinkResourcesServer{}
	client, err := armcontainerservice.NewPrivateLinkResourcesClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateLinkResourcesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateLinkResourcesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Link Resources by Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"

	exampleRes := armcontainerservice.PrivateLinkResourcesListResult{
		Value: []*armcontainerservice.PrivateLinkResource{
			{
				Name:                 to.Ptr("management"),
				Type:                 to.Ptr("Microsoft.ContainerService/managedClusters/privateLinkResources"),
				GroupID:              to.Ptr("management"),
				PrivateLinkServiceID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/plsName"),
				RequiredMembers: []*string{
					to.Ptr("management")},
			}},
	}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.PrivateLinkResourcesClientListOptions) (resp azfake.Responder[armcontainerservice.PrivateLinkResourcesClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.PrivateLinkResourcesClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.PrivateLinkResourcesClientListResponse{PrivateLinkResourcesListResult: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, "rg1", "clustername1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/PrivateLinkResourcesList.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResourcesListResult))
}

func (testsuite *FakeTestSuite) TestResolvePrivateLinkServiceID_POST() {
	ctx := context.Background()
	fakeServer := fake.ResolvePrivateLinkServiceIDServer{}
	client, err := armcontainerservice.NewResolvePrivateLinkServiceIDClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewResolvePrivateLinkServiceIDServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ResolvePrivateLinkServiceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve the Private Link Service ID for Managed Cluster"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.PrivateLinkResource
	exampleResourceGroupName = "rg1"
	exampleResourceName = "clustername1"
	exampleParameters = armcontainerservice.PrivateLinkResource{
		Name: to.Ptr("management"),
	}

	exampleRes := armcontainerservice.PrivateLinkResource{
		PrivateLinkServiceID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/plsName"),
	}

	fakeServer.POST = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.PrivateLinkResource, options *armcontainerservice.ResolvePrivateLinkServiceIDClientPOSTOptions) (resp azfake.Responder[armcontainerservice.ResolvePrivateLinkServiceIDClientPOSTResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.ResolvePrivateLinkServiceIDClientPOSTResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.ResolvePrivateLinkServiceIDClientPOSTResponse{PrivateLinkResource: exampleRes}, nil)
		return
	}
	res, err := client.POST(ctx, "rg1", "clustername1", armcontainerservice.PrivateLinkResource{
		Name: to.Ptr("management"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/ResolvePrivateLinkServiceId.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResource))
}

func (testsuite *FakeTestSuite) TestSnapshots_List() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Snapshots"},
	})

	exampleRes := armcontainerservice.SnapshotListResult{
		Value: []*armcontainerservice.Snapshot{
			{
				Name: to.Ptr("snapshot1"),
				Type: to.Ptr("Microsoft.ContainerService/Snapshots"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
				SystemData: &armcontainerservice.SystemData{
					CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
					CreatedBy:     to.Ptr("user1"),
					CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
				},
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key1": to.Ptr("val1"),
					"key2": to.Ptr("val2"),
				},
				Properties: &armcontainerservice.SnapshotProperties{
					CreationData: &armcontainerservice.CreationData{
						SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
					},
					EnableFIPS:        to.Ptr(false),
					KubernetesVersion: to.Ptr("1.20.5"),
					NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
					OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
					OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
					SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
					VMSize:            to.Ptr("Standard_D2s_v3"),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcontainerservice.SnapshotsClientListOptions) (resp azfake.PagerResponder[armcontainerservice.SnapshotsClientListResponse]) {
		resp = azfake.PagerResponder[armcontainerservice.SnapshotsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.SnapshotsClientListResponse{SnapshotListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotListResult))
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Snapshots by Resource Group"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rg1"

	exampleRes := armcontainerservice.SnapshotListResult{
		Value: []*armcontainerservice.Snapshot{
			{
				Name: to.Ptr("snapshot1"),
				Type: to.Ptr("Microsoft.ContainerService/Snapshots"),
				ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
				SystemData: &armcontainerservice.SystemData{
					CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
					CreatedBy:     to.Ptr("user1"),
					CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
				},
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key1": to.Ptr("val1"),
					"key2": to.Ptr("val2"),
				},
				Properties: &armcontainerservice.SnapshotProperties{
					CreationData: &armcontainerservice.CreationData{
						SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
					},
					EnableFIPS:        to.Ptr(false),
					KubernetesVersion: to.Ptr("1.20.5"),
					NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
					OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
					OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
					SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
					VMSize:            to.Ptr("Standard_D2s_v3"),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcontainerservice.SnapshotsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcontainerservice.SnapshotsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcontainerservice.SnapshotsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcontainerservice.SnapshotsClientListByResourceGroupResponse{SnapshotListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager("rg1", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotListResult))
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_Get() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Snapshot"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "snapshot1"

	exampleRes := armcontainerservice.Snapshot{
		Name: to.Ptr("snapshot1"),
		Type: to.Ptr("Microsoft.ContainerService/Snapshots"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
		SystemData: &armcontainerservice.SystemData{
			CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
			CreatedBy:     to.Ptr("user1"),
			CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1": to.Ptr("val1"),
			"key2": to.Ptr("val2"),
		},
		Properties: &armcontainerservice.SnapshotProperties{
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
			},
			EnableFIPS:        to.Ptr(false),
			KubernetesVersion: to.Ptr("1.20.5"),
			NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
			OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
			OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
			SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
			VMSize:            to.Ptr("Standard_D2s_v3"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.SnapshotsClientGetOptions) (resp azfake.Responder[armcontainerservice.SnapshotsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.SnapshotsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.SnapshotsClientGetResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "rg1", "snapshot1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update Snapshot"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.Snapshot
	exampleResourceGroupName = "rg1"
	exampleResourceName = "snapshot1"
	exampleParameters = armcontainerservice.Snapshot{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1": to.Ptr("val1"),
			"key2": to.Ptr("val2"),
		},
		Properties: &armcontainerservice.SnapshotProperties{
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
			},
		},
	}

	exampleRes := armcontainerservice.Snapshot{
		Name: to.Ptr("snapshot1"),
		Type: to.Ptr("Microsoft.ContainerService/Snapshots"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
		SystemData: &armcontainerservice.SystemData{
			CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
			CreatedBy:     to.Ptr("user1"),
			CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1": to.Ptr("val1"),
			"key2": to.Ptr("val2"),
		},
		Properties: &armcontainerservice.SnapshotProperties{
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
			},
			EnableFIPS:        to.Ptr(false),
			KubernetesVersion: to.Ptr("1.20.5"),
			NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
			OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
			OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
			SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
			VMSize:            to.Ptr("Standard_D2s_v3"),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.Snapshot, options *armcontainerservice.SnapshotsClientCreateOrUpdateOptions) (resp azfake.Responder[armcontainerservice.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, "rg1", "snapshot1", armcontainerservice.Snapshot{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1": to.Ptr("val1"),
			"key2": to.Ptr("val2"),
		},
		Properties: &armcontainerservice.SnapshotProperties{
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_UpdateTags() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsUpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Snapshot Tags"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	var exampleParameters armcontainerservice.TagsObject
	exampleResourceGroupName = "rg1"
	exampleResourceName = "snapshot1"
	exampleParameters = armcontainerservice.TagsObject{
		Tags: map[string]*string{
			"key2": to.Ptr("new-val2"),
			"key3": to.Ptr("val3"),
		},
	}

	exampleRes := armcontainerservice.Snapshot{
		Name: to.Ptr("snapshot1"),
		Type: to.Ptr("Microsoft.ContainerService/Snapshots"),
		ID:   to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1"),
		SystemData: &armcontainerservice.SystemData{
			CreatedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-09T20:13:23.298420761Z"); return t }()),
			CreatedBy:     to.Ptr("user1"),
			CreatedByType: to.Ptr(armcontainerservice.CreatedByTypeUser),
		},
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1": to.Ptr("val1"),
			"key2": to.Ptr("val2"),
		},
		Properties: &armcontainerservice.SnapshotProperties{
			CreationData: &armcontainerservice.CreationData{
				SourceResourceID: to.Ptr("/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/cluster1/agentPools/pool0"),
			},
			EnableFIPS:        to.Ptr(false),
			KubernetesVersion: to.Ptr("1.20.5"),
			NodeImageVersion:  to.Ptr("AKSUbuntu-1804gen2containerd-2021.09.11"),
			OSSKU:             to.Ptr(armcontainerservice.OSSKUUbuntu),
			OSType:            to.Ptr(armcontainerservice.OSTypeLinux),
			SnapshotType:      to.Ptr(armcontainerservice.SnapshotTypeNodePool),
			VMSize:            to.Ptr("Standard_D2s_v3"),
		},
	}

	fakeServer.UpdateTags = func(ctx context.Context, resourceGroupName string, resourceName string, parameters armcontainerservice.TagsObject, options *armcontainerservice.SnapshotsClientUpdateTagsOptions) (resp azfake.Responder[armcontainerservice.SnapshotsClientUpdateTagsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.Responder[armcontainerservice.SnapshotsClientUpdateTagsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.SnapshotsClientUpdateTagsResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err := client.UpdateTags(ctx, "rg1", "snapshot1", armcontainerservice.TagsObject{
		Tags: map[string]*string{
			"key2": to.Ptr("new-val2"),
			"key3": to.Ptr("val3"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsUpdateTags.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Delete() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcontainerservice.NewSnapshotsClient("subid1", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Snapshot"},
	})
	var exampleResourceGroupName string
	var exampleResourceName string
	exampleResourceGroupName = "rg1"
	exampleResourceName = "snapshot1"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, resourceName string, options *armcontainerservice.SnapshotsClientDeleteOptions) (resp azfake.Responder[armcontainerservice.SnapshotsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleResourceName, resourceName)
		resp = azfake.Responder[armcontainerservice.SnapshotsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerservice.SnapshotsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, "rg1", "snapshot1", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2023-05-01/examples/SnapshotsDelete.json")
}
