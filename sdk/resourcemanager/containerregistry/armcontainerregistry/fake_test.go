//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerregistry_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestCacheRules_List() {
	ctx := context.Background()
	fakeServer := fake.CacheRulesServer{}
	client, err := armcontainerregistry.NewCacheRulesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCacheRulesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CacheRuleList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.CacheRulesListResult{
		Value: []*armcontainerregistry.CacheRule{
			{
				Name: to.Ptr("myCacheRule"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/cacheRules"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule"),
				Properties: &armcontainerregistry.CacheRuleProperties{
					CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:33.8374968+00:00"); return t }()),
					CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
					ProvisioningState:       to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					SourceRepository:        to.Ptr("docker.io/library/hello-world"),
					TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.CacheRulesClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.CacheRulesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.CacheRulesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.CacheRulesClientListResponse{CacheRulesListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CacheRulesListResult))
	}
}

func (testsuite *FakeTestSuite) TestCacheRules_Get() {
	ctx := context.Background()
	fakeServer := fake.CacheRulesServer{}
	client, err := armcontainerregistry.NewCacheRulesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCacheRulesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CacheRuleGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCacheRuleName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCacheRuleName = "myCacheRule"

	exampleRes := armcontainerregistry.CacheRule{
		Name: to.Ptr("myCacheRule"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/cacheRules"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule"),
		Properties: &armcontainerregistry.CacheRuleProperties{
			CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:33.8374968+00:00"); return t }()),
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
			ProvisioningState:       to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			SourceRepository:        to.Ptr("docker.io/library/hello-world"),
			TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, cacheRuleName string, options *armcontainerregistry.CacheRulesClientGetOptions) (resp azfake.Responder[armcontainerregistry.CacheRulesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCacheRuleName, cacheRuleName)
		resp = azfake.Responder[armcontainerregistry.CacheRulesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.CacheRulesClientGetResponse{CacheRule: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myCacheRule", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CacheRule))
}

func (testsuite *FakeTestSuite) TestCacheRules_Create() {
	ctx := context.Background()
	fakeServer := fake.CacheRulesServer{}
	client, err := armcontainerregistry.NewCacheRulesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCacheRulesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CacheRuleCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCacheRuleName string
	var exampleCacheRuleCreateParameters armcontainerregistry.CacheRule
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCacheRuleName = "myCacheRule"
	exampleCacheRuleCreateParameters = armcontainerregistry.CacheRule{
		Properties: &armcontainerregistry.CacheRuleProperties{
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
			SourceRepository:        to.Ptr("docker.io/library/hello-world"),
			TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
		},
	}

	exampleRes := armcontainerregistry.CacheRule{
		Name: to.Ptr("myCacheRule"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/cacheRules"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule"),
		Properties: &armcontainerregistry.CacheRuleProperties{
			CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:33.8374968+00:00"); return t }()),
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
			ProvisioningState:       to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			SourceRepository:        to.Ptr("docker.io/library/hello-world"),
			TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, cacheRuleName string, cacheRuleCreateParameters armcontainerregistry.CacheRule, options *armcontainerregistry.CacheRulesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.CacheRulesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCacheRuleName, cacheRuleName)
		testsuite.Require().Equal(exampleCacheRuleCreateParameters, cacheRuleCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.CacheRulesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CacheRulesClientCreateResponse{CacheRule: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myCacheRule", armcontainerregistry.CacheRule{
		Properties: &armcontainerregistry.CacheRuleProperties{
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
			SourceRepository:        to.Ptr("docker.io/library/hello-world"),
			TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CacheRule))
}

func (testsuite *FakeTestSuite) TestCacheRules_Delete() {
	ctx := context.Background()
	fakeServer := fake.CacheRulesServer{}
	client, err := armcontainerregistry.NewCacheRulesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCacheRulesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CacheRuleDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCacheRuleName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCacheRuleName = "myCacheRule"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, cacheRuleName string, options *armcontainerregistry.CacheRulesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.CacheRulesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCacheRuleName, cacheRuleName)
		resp = azfake.PollerResponder[armcontainerregistry.CacheRulesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CacheRulesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myCacheRule", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleDelete.json")
}

func (testsuite *FakeTestSuite) TestCacheRules_Update() {
	ctx := context.Background()
	fakeServer := fake.CacheRulesServer{}
	client, err := armcontainerregistry.NewCacheRulesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCacheRulesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CacheRuleUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCacheRuleName string
	var exampleCacheRuleUpdateParameters armcontainerregistry.CacheRuleUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCacheRuleName = "myCacheRule"
	exampleCacheRuleUpdateParameters = armcontainerregistry.CacheRuleUpdateParameters{
		Properties: &armcontainerregistry.CacheRuleUpdateProperties{
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet2"),
		},
	}

	exampleRes := armcontainerregistry.CacheRule{
		Name: to.Ptr("myCacheRule"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/cacheRules"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule"),
		Properties: &armcontainerregistry.CacheRuleProperties{
			CreationDate:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:33.8374968+00:00"); return t }()),
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet2"),
			ProvisioningState:       to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			SourceRepository:        to.Ptr("docker.io/library/hello-world"),
			TargetRepository:        to.Ptr("cached-docker-hub/hello-world"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, cacheRuleName string, cacheRuleUpdateParameters armcontainerregistry.CacheRuleUpdateParameters, options *armcontainerregistry.CacheRulesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.CacheRulesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCacheRuleName, cacheRuleName)
		testsuite.Require().Equal(exampleCacheRuleUpdateParameters, cacheRuleUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.CacheRulesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CacheRulesClientUpdateResponse{CacheRule: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myCacheRule", armcontainerregistry.CacheRuleUpdateParameters{
		Properties: &armcontainerregistry.CacheRuleUpdateProperties{
			CredentialSetResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet2"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CacheRuleUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CacheRule))
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_List() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.ConnectedRegistryListResult{
		Value: []*armcontainerregistry.ConnectedRegistry{
			{
				Name: to.Ptr("myConnectedRegistry"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
				Properties: &armcontainerregistry.ConnectedRegistryProperties{
					Activation: &armcontainerregistry.ActivationProperties{
						Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
					},
					ClientTokenIDs: []*string{
						to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
					Logging: &armcontainerregistry.LoggingProperties{
						AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
						LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
					},
					Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
					NotificationsList: []*string{
						to.Ptr("hello-world:*:*"),
						to.Ptr("sample/repo/*:1.0:*")},
					Parent: &armcontainerregistry.ParentProperties{
						SyncProperties: &armcontainerregistry.SyncProperties{
							MessageTTL: to.Ptr("P2D"),
							Schedule:   to.Ptr("0 9 * * *"),
							SyncWindow: to.Ptr("PT3H"),
							TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.ConnectedRegistriesClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.ConnectedRegistriesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.ConnectedRegistriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientListResponse{ConnectedRegistryListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", &armcontainerregistry.ConnectedRegistriesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ConnectedRegistryListResult))
	}
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_Get() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleConnectedRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleConnectedRegistryName = "myConnectedRegistry"

	exampleRes := armcontainerregistry.ConnectedRegistry{
		Name: to.Ptr("myConnectedRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
		Properties: &armcontainerregistry.ConnectedRegistryProperties{
			Activation: &armcontainerregistry.ActivationProperties{
				Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
			},
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
			Logging: &armcontainerregistry.LoggingProperties{
				AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
				LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
			},
			Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			Parent: &armcontainerregistry.ParentProperties{
				SyncProperties: &armcontainerregistry.SyncProperties{
					MessageTTL: to.Ptr("P2D"),
					Schedule:   to.Ptr("0 9 * * *"),
					SyncWindow: to.Ptr("PT3H"),
					TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, connectedRegistryName string, options *armcontainerregistry.ConnectedRegistriesClientGetOptions) (resp azfake.Responder[armcontainerregistry.ConnectedRegistriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleConnectedRegistryName, connectedRegistryName)
		resp = azfake.Responder[armcontainerregistry.ConnectedRegistriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientGetResponse{ConnectedRegistry: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myConnectedRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectedRegistry))
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_Create() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleConnectedRegistryName string
	var exampleConnectedRegistryCreateParameters armcontainerregistry.ConnectedRegistry
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleConnectedRegistryName = "myConnectedRegistry"
	exampleConnectedRegistryCreateParameters = armcontainerregistry.ConnectedRegistry{
		Properties: &armcontainerregistry.ConnectedRegistryProperties{
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
			Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			Parent: &armcontainerregistry.ParentProperties{
				SyncProperties: &armcontainerregistry.SyncProperties{
					MessageTTL: to.Ptr("P2D"),
					Schedule:   to.Ptr("0 9 * * *"),
					SyncWindow: to.Ptr("PT3H"),
					TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
				},
			},
		},
	}

	exampleRes := armcontainerregistry.ConnectedRegistry{
		Name: to.Ptr("myConnectedRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
		Properties: &armcontainerregistry.ConnectedRegistryProperties{
			Activation: &armcontainerregistry.ActivationProperties{
				Status: to.Ptr(armcontainerregistry.ActivationStatusInactive),
			},
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
			Logging: &armcontainerregistry.LoggingProperties{
				AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusDisabled),
				LogLevel:       to.Ptr(armcontainerregistry.LogLevelInformation),
			},
			Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			Parent: &armcontainerregistry.ParentProperties{
				SyncProperties: &armcontainerregistry.SyncProperties{
					MessageTTL: to.Ptr("P2D"),
					Schedule:   to.Ptr("0 9 * * *"),
					SyncWindow: to.Ptr("PT3H"),
					TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
				},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, connectedRegistryName string, connectedRegistryCreateParameters armcontainerregistry.ConnectedRegistry, options *armcontainerregistry.ConnectedRegistriesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleConnectedRegistryName, connectedRegistryName)
		testsuite.Require().Equal(exampleConnectedRegistryCreateParameters, connectedRegistryCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientCreateResponse{ConnectedRegistry: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myConnectedRegistry", armcontainerregistry.ConnectedRegistry{
		Properties: &armcontainerregistry.ConnectedRegistryProperties{
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token")},
			Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			Parent: &armcontainerregistry.ParentProperties{
				SyncProperties: &armcontainerregistry.SyncProperties{
					MessageTTL: to.Ptr("P2D"),
					Schedule:   to.Ptr("0 9 * * *"),
					SyncWindow: to.Ptr("PT3H"),
					TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
				},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectedRegistry))
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_Delete() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleConnectedRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleConnectedRegistryName = "myConnectedRegistry"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, connectedRegistryName string, options *armcontainerregistry.ConnectedRegistriesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleConnectedRegistryName, connectedRegistryName)
		resp = azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myConnectedRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDelete.json")
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_Update() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleConnectedRegistryName string
	var exampleConnectedRegistryUpdateParameters armcontainerregistry.ConnectedRegistryUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleConnectedRegistryName = "myScopeMap"
	exampleConnectedRegistryUpdateParameters = armcontainerregistry.ConnectedRegistryUpdateParameters{
		Properties: &armcontainerregistry.ConnectedRegistryUpdateProperties{
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
			Logging: &armcontainerregistry.LoggingProperties{
				AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusEnabled),
				LogLevel:       to.Ptr(armcontainerregistry.LogLevelDebug),
			},
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			SyncProperties: &armcontainerregistry.SyncUpdateProperties{
				MessageTTL: to.Ptr("P30D"),
				Schedule:   to.Ptr("0 0 */10 * *"),
				SyncWindow: to.Ptr("P2D"),
			},
		},
	}

	exampleRes := armcontainerregistry.ConnectedRegistry{
		Name: to.Ptr("myConnectedRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/connectedRegistries"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/connectedRegistries/myConnectedRegistry"),
		Properties: &armcontainerregistry.ConnectedRegistryProperties{
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
			Logging: &armcontainerregistry.LoggingProperties{
				AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusEnabled),
				LogLevel:       to.Ptr(armcontainerregistry.LogLevelDebug),
			},
			Mode: to.Ptr(armcontainerregistry.ConnectedRegistryModeReadWrite),
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			Parent: &armcontainerregistry.ParentProperties{
				SyncProperties: &armcontainerregistry.SyncProperties{
					MessageTTL: to.Ptr("P30D"),
					Schedule:   to.Ptr("0 0 */10 * *"),
					SyncWindow: to.Ptr("P2D"),
					TokenID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/syncToken"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, connectedRegistryName string, connectedRegistryUpdateParameters armcontainerregistry.ConnectedRegistryUpdateParameters, options *armcontainerregistry.ConnectedRegistriesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleConnectedRegistryName, connectedRegistryName)
		testsuite.Require().Equal(exampleConnectedRegistryUpdateParameters, connectedRegistryUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientUpdateResponse{ConnectedRegistry: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myScopeMap", armcontainerregistry.ConnectedRegistryUpdateParameters{
		Properties: &armcontainerregistry.ConnectedRegistryUpdateProperties{
			ClientTokenIDs: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client1Token"),
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/client2Token")},
			Logging: &armcontainerregistry.LoggingProperties{
				AuditLogStatus: to.Ptr(armcontainerregistry.AuditLogStatusEnabled),
				LogLevel:       to.Ptr(armcontainerregistry.LogLevelDebug),
			},
			NotificationsList: []*string{
				to.Ptr("hello-world:*:*"),
				to.Ptr("sample/repo/*:1.0:*")},
			SyncProperties: &armcontainerregistry.SyncUpdateProperties{
				MessageTTL: to.Ptr("P30D"),
				Schedule:   to.Ptr("0 0 */10 * *"),
				SyncWindow: to.Ptr("P2D"),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ConnectedRegistry))
}

func (testsuite *FakeTestSuite) TestConnectedRegistries_Deactivate() {
	ctx := context.Background()
	fakeServer := fake.ConnectedRegistriesServer{}
	client, err := armcontainerregistry.NewConnectedRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewConnectedRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDeactivate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ConnectedRegistryDeactivate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleConnectedRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleConnectedRegistryName = "myConnectedRegistry"

	fakeServer.BeginDeactivate = func(ctx context.Context, resourceGroupName string, registryName string, connectedRegistryName string, options *armcontainerregistry.ConnectedRegistriesClientBeginDeactivateOptions) (resp azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientDeactivateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleConnectedRegistryName, connectedRegistryName)
		resp = azfake.PollerResponder[armcontainerregistry.ConnectedRegistriesClientDeactivateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ConnectedRegistriesClientDeactivateResponse{}, nil)
		return
	}
	poller, err := client.BeginDeactivate(ctx, "myResourceGroup", "myRegistry", "myConnectedRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDeactivate.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ConnectedRegistryDeactivate.json")
}

func (testsuite *FakeTestSuite) TestCredentialSets_List() {
	ctx := context.Background()
	fakeServer := fake.CredentialSetsServer{}
	client, err := armcontainerregistry.NewCredentialSetsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCredentialSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CredentialSetList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.CredentialSetListResult{
		Value: []*armcontainerregistry.CredentialSet{
			{
				Name: to.Ptr("myCredentialSet"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/credentialSets"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
				Identity: &armcontainerregistry.IdentityProperties{
					Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
				},
				Properties: &armcontainerregistry.CredentialSetProperties{
					AuthCredentials: []*armcontainerregistry.AuthCredential{
						{
							Name: to.Ptr(armcontainerregistry.CredentialNameCredential1),
							CredentialHealth: &armcontainerregistry.CredentialHealth{
								Status: to.Ptr(armcontainerregistry.CredentialHealthStatusHealthy),
							},
							PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password"),
							UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username"),
						}},
					CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:08.012276+00:00"); return t }()),
					LoginServer:       to.Ptr("docker.io"),
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.CredentialSetsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.CredentialSetsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.CredentialSetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.CredentialSetsClientListResponse{CredentialSetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CredentialSetListResult))
	}
}

func (testsuite *FakeTestSuite) TestCredentialSets_Get() {
	ctx := context.Background()
	fakeServer := fake.CredentialSetsServer{}
	client, err := armcontainerregistry.NewCredentialSetsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCredentialSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CredentialSetGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCredentialSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCredentialSetName = "myCredentialSet"

	exampleRes := armcontainerregistry.CredentialSet{
		Name: to.Ptr("myCredentialSet"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/credentialSets"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Properties: &armcontainerregistry.CredentialSetProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name: to.Ptr(armcontainerregistry.CredentialNameCredential1),
					CredentialHealth: &armcontainerregistry.CredentialHealth{
						Status: to.Ptr(armcontainerregistry.CredentialHealthStatusHealthy),
					},
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username"),
				}},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:08.012276+00:00"); return t }()),
			LoginServer:       to.Ptr("docker.io"),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, credentialSetName string, options *armcontainerregistry.CredentialSetsClientGetOptions) (resp azfake.Responder[armcontainerregistry.CredentialSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCredentialSetName, credentialSetName)
		resp = azfake.Responder[armcontainerregistry.CredentialSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.CredentialSetsClientGetResponse{CredentialSet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myCredentialSet", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialSet))
}

func (testsuite *FakeTestSuite) TestCredentialSets_Create() {
	ctx := context.Background()
	fakeServer := fake.CredentialSetsServer{}
	client, err := armcontainerregistry.NewCredentialSetsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCredentialSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CredentialSetCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCredentialSetName string
	var exampleCredentialSetCreateParameters armcontainerregistry.CredentialSet
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCredentialSetName = "myCredentialSet"
	exampleCredentialSetCreateParameters = armcontainerregistry.CredentialSet{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.CredentialSetProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name:                     to.Ptr(armcontainerregistry.CredentialNameCredential1),
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username"),
				}},
			LoginServer: to.Ptr("docker.io"),
		},
	}

	exampleRes := armcontainerregistry.CredentialSet{
		Name: to.Ptr("myCredentialSet"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/credentialSets"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Properties: &armcontainerregistry.CredentialSetProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name: to.Ptr(armcontainerregistry.CredentialNameCredential1),
					CredentialHealth: &armcontainerregistry.CredentialHealth{
						Status: to.Ptr(armcontainerregistry.CredentialHealthStatusHealthy),
					},
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username"),
				}},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:08.012276+00:00"); return t }()),
			LoginServer:       to.Ptr("docker.io"),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, credentialSetName string, credentialSetCreateParameters armcontainerregistry.CredentialSet, options *armcontainerregistry.CredentialSetsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.CredentialSetsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCredentialSetName, credentialSetName)
		testsuite.Require().Equal(exampleCredentialSetCreateParameters, credentialSetCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.CredentialSetsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CredentialSetsClientCreateResponse{CredentialSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myCredentialSet", armcontainerregistry.CredentialSet{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.CredentialSetProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name:                     to.Ptr(armcontainerregistry.CredentialNameCredential1),
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username"),
				}},
			LoginServer: to.Ptr("docker.io"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialSet))
}

func (testsuite *FakeTestSuite) TestCredentialSets_Delete() {
	ctx := context.Background()
	fakeServer := fake.CredentialSetsServer{}
	client, err := armcontainerregistry.NewCredentialSetsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCredentialSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CredentialSetDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCredentialSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCredentialSetName = "myCredentialSet"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, credentialSetName string, options *armcontainerregistry.CredentialSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.CredentialSetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCredentialSetName, credentialSetName)
		resp = azfake.PollerResponder[armcontainerregistry.CredentialSetsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CredentialSetsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myCredentialSet", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetDelete.json")
}

func (testsuite *FakeTestSuite) TestCredentialSets_Update() {
	ctx := context.Background()
	fakeServer := fake.CredentialSetsServer{}
	client, err := armcontainerregistry.NewCredentialSetsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCredentialSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CredentialSetUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleCredentialSetName string
	var exampleCredentialSetUpdateParameters armcontainerregistry.CredentialSetUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleCredentialSetName = "myCredentialSet"
	exampleCredentialSetUpdateParameters = armcontainerregistry.CredentialSetUpdateParameters{
		Properties: &armcontainerregistry.CredentialSetUpdateProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name:                     to.Ptr(armcontainerregistry.CredentialNameCredential1),
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password2"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username2"),
				}},
		},
	}

	exampleRes := armcontainerregistry.CredentialSet{
		Name: to.Ptr("myCredentialSet"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/credentialSets"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/credentialSets/myCredentialSet"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
		Properties: &armcontainerregistry.CredentialSetProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name: to.Ptr(armcontainerregistry.CredentialNameCredential1),
					CredentialHealth: &armcontainerregistry.CredentialHealth{
						Status: to.Ptr(armcontainerregistry.CredentialHealthStatusHealthy),
					},
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password2"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username2"),
				}},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-11-07T18:20:08.012276+00:00"); return t }()),
			LoginServer:       to.Ptr("docker.io"),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, credentialSetName string, credentialSetUpdateParameters armcontainerregistry.CredentialSetUpdateParameters, options *armcontainerregistry.CredentialSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.CredentialSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleCredentialSetName, credentialSetName)
		testsuite.Require().Equal(exampleCredentialSetUpdateParameters, credentialSetUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.CredentialSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.CredentialSetsClientUpdateResponse{CredentialSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myCredentialSet", armcontainerregistry.CredentialSetUpdateParameters{
		Properties: &armcontainerregistry.CredentialSetUpdateProperties{
			AuthCredentials: []*armcontainerregistry.AuthCredential{
				{
					Name:                     to.Ptr(armcontainerregistry.CredentialNameCredential1),
					PasswordSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/password2"),
					UsernameSecretIdentifier: to.Ptr("https://myvault.vault.azure.net/secrets/username2"),
				}},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/CredentialSetUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CredentialSet))
}

func (testsuite *FakeTestSuite) TestExportPipelines_List() {
	ctx := context.Background()
	fakeServer := fake.ExportPipelinesServer{}
	client, err := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.ExportPipelineListResult{
		Value: []*armcontainerregistry.ExportPipeline{
			{
				Name: to.Ptr("myExportPipeline"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
				Identity: &armcontainerregistry.IdentityProperties{
					Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
					TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
				},
				Location: to.Ptr("westus"),
				Properties: &armcontainerregistry.ExportPipelineProperties{
					Options: []*armcontainerregistry.PipelineOptions{
						to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Target: &armcontainerregistry.ExportPipelineTargetProperties{
						Type:        to.Ptr("AzureStorageBlobContainer"),
						KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
						URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.ExportPipelinesClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.ExportPipelinesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.ExportPipelinesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.ExportPipelinesClientListResponse{ExportPipelineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ExportPipelineListResult))
	}
}

func (testsuite *FakeTestSuite) TestExportPipelines_Get() {
	ctx := context.Background()
	fakeServer := fake.ExportPipelinesServer{}
	client, err := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleExportPipelineName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleExportPipelineName = "myExportPipeline"

	exampleRes := armcontainerregistry.ExportPipeline{
		Name: to.Ptr("myExportPipeline"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ExportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Target: &armcontainerregistry.ExportPipelineTargetProperties{
				Type:        to.Ptr("AzureStorageBlobContainer"),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, exportPipelineName string, options *armcontainerregistry.ExportPipelinesClientGetOptions) (resp azfake.Responder[armcontainerregistry.ExportPipelinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleExportPipelineName, exportPipelineName)
		resp = azfake.Responder[armcontainerregistry.ExportPipelinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.ExportPipelinesClientGetResponse{ExportPipeline: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myExportPipeline", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ExportPipeline))
}

func (testsuite *FakeTestSuite) TestExportPipelines_Create() {
	ctx := context.Background()
	fakeServer := fake.ExportPipelinesServer{}
	client, err := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleExportPipelineName string
	var exampleExportPipelineCreateParameters armcontainerregistry.ExportPipeline
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleExportPipelineName = "myExportPipeline"
	exampleExportPipelineCreateParameters = armcontainerregistry.ExportPipeline{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ExportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
			Target: &armcontainerregistry.ExportPipelineTargetProperties{
				Type:        to.Ptr("AzureStorageBlobContainer"),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}

	exampleRes := armcontainerregistry.ExportPipeline{
		Name: to.Ptr("myExportPipeline"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/exportPipelines"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ExportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Target: &armcontainerregistry.ExportPipelineTargetProperties{
				Type:        to.Ptr("AzureStorageBlobContainer"),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, exportPipelineName string, exportPipelineCreateParameters armcontainerregistry.ExportPipeline, options *armcontainerregistry.ExportPipelinesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ExportPipelinesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleExportPipelineName, exportPipelineName)
		testsuite.Require().Equal(exampleExportPipelineCreateParameters, exportPipelineCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ExportPipelinesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ExportPipelinesClientCreateResponse{ExportPipeline: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myExportPipeline", armcontainerregistry.ExportPipeline{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ExportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteBlobs)},
			Target: &armcontainerregistry.ExportPipelineTargetProperties{
				Type:        to.Ptr("AzureStorageBlobContainer"),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ExportPipeline))
}

func (testsuite *FakeTestSuite) TestExportPipelines_Delete() {
	ctx := context.Background()
	fakeServer := fake.ExportPipelinesServer{}
	client, err := armcontainerregistry.NewExportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewExportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportPipelineDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleExportPipelineName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleExportPipelineName = "myExportPipeline"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, exportPipelineName string, options *armcontainerregistry.ExportPipelinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.ExportPipelinesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleExportPipelineName, exportPipelineName)
		resp = azfake.PollerResponder[armcontainerregistry.ExportPipelinesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ExportPipelinesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myExportPipeline", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ExportPipelineDelete.json")
}

func (testsuite *FakeTestSuite) TestRegistries_ImportImage() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByManifestDigest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageByManifestDigest"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleParameters armcontainerregistry.ImportImageParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleParameters = armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000000000"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}

	fakeServer.BeginImportImage = func(ctx context.Context, resourceGroupName string, registryName string, parameters armcontainerregistry.ImportImageParameters, options *armcontainerregistry.RegistriesClientBeginImportImageOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientImportImageResponse{}, nil)
		return
	}
	poller, err := client.BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000000000"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByManifestDigest.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByManifestDigest.json")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageByTag"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleParameters = armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository:sourceTag"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}

	fakeServer.BeginImportImage = func(ctx context.Context, resourceGroupName string, registryName string, parameters armcontainerregistry.ImportImageParameters, options *armcontainerregistry.RegistriesClientBeginImportImageOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientImportImageResponse{}, nil)
		return
	}
	poller, err = client.BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository:sourceTag"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByTag.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageByTag.json")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageFromPublicRegistry.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportImageFromPublicRegistry"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleParameters = armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			RegistryURI: to.Ptr("registry.hub.docker.com"),
			SourceImage: to.Ptr("library/hello-world"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}

	fakeServer.BeginImportImage = func(ctx context.Context, resourceGroupName string, registryName string, parameters armcontainerregistry.ImportImageParameters, options *armcontainerregistry.RegistriesClientBeginImportImageOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleParameters, parameters)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientImportImageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientImportImageResponse{}, nil)
		return
	}
	poller, err = client.BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
		Source: &armcontainerregistry.ImportSource{
			RegistryURI: to.Ptr("registry.hub.docker.com"),
			SourceImage: to.Ptr("library/hello-world"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag")},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1")},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageFromPublicRegistry.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportImageFromPublicRegistry.json")
}

func (testsuite *FakeTestSuite) TestRegistries_CheckNameAvailability() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCheckNameAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCheckNameAvailable"},
	})
	var exampleRegistryNameCheckRequest armcontainerregistry.RegistryNameCheckRequest
	exampleRegistryNameCheckRequest = armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	}

	exampleRes := armcontainerregistry.RegistryNameStatus{
		NameAvailable: to.Ptr(true),
	}

	fakeServer.CheckNameAvailability = func(ctx context.Context, registryNameCheckRequest armcontainerregistry.RegistryNameCheckRequest, options *armcontainerregistry.RegistriesClientCheckNameAvailabilityOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRegistryNameCheckRequest, registryNameCheckRequest)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse{RegistryNameStatus: exampleRes}, nil)
		return
	}
	res, err := client.CheckNameAvailability(ctx, armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCheckNameAvailable.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RegistryNameStatus))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCheckNameNotAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCheckNameNotAvailable"},
	})
	exampleRegistryNameCheckRequest = armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	}

	exampleRes = armcontainerregistry.RegistryNameStatus{
		Message:       to.Ptr("The registry myRegistry is already in use."),
		NameAvailable: to.Ptr(false),
		Reason:        to.Ptr("AlreadyExists"),
	}

	fakeServer.CheckNameAvailability = func(ctx context.Context, registryNameCheckRequest armcontainerregistry.RegistryNameCheckRequest, options *armcontainerregistry.RegistriesClientCheckNameAvailabilityOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRegistryNameCheckRequest, registryNameCheckRequest)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse{RegistryNameStatus: exampleRes}, nil)
		return
	}
	res, err = client.CheckNameAvailability(ctx, armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCheckNameNotAvailable.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RegistryNameStatus))
}

func (testsuite *FakeTestSuite) TestRegistries_List() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryList"},
	})

	exampleRes := armcontainerregistry.RegistryListResult{
		Value: []*armcontainerregistry.Registry{
			{
				Name:     to.Ptr("myRegistry"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key": to.Ptr("value"),
				},
				Properties: &armcontainerregistry.RegistryProperties{
					AdminUserEnabled:      to.Ptr(false),
					AnonymousPullEnabled:  to.Ptr(false),
					CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
					DataEndpointEnabled:   to.Ptr(false),
					DataEndpointHostNames: []*string{},
					Encryption: &armcontainerregistry.EncryptionProperty{
						Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
					},
					LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
					NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
					NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
						DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
						IPRules:       []*armcontainerregistry.IPRule{},
					},
					Policies: &armcontainerregistry.Policies{
						ExportPolicy: &armcontainerregistry.ExportPolicy{
							Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
						},
						QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
						RetentionPolicy: &armcontainerregistry.RetentionPolicy{
							Days:            to.Ptr[int32](7),
							LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
							Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
						TrustPolicy: &armcontainerregistry.TrustPolicy{
							Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
					},
					PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
					ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
					ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
				},
				SKU: &armcontainerregistry.SKU{
					Name: to.Ptr(armcontainerregistry.SKUNameStandard),
					Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcontainerregistry.RegistriesClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.RegistriesClientListResponse]) {
		resp = azfake.PagerResponder[armcontainerregistry.RegistriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.RegistriesClientListResponse{RegistryListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RegistryListResult))
	}
}

func (testsuite *FakeTestSuite) TestRegistries_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListByResourceGroup"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcontainerregistry.RegistryListResult{
		Value: []*armcontainerregistry.Registry{
			{
				Name:     to.Ptr("myRegistry"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key": to.Ptr("value"),
				},
				Properties: &armcontainerregistry.RegistryProperties{
					AdminUserEnabled:      to.Ptr(false),
					AnonymousPullEnabled:  to.Ptr(false),
					CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
					DataEndpointEnabled:   to.Ptr(false),
					DataEndpointHostNames: []*string{},
					Encryption: &armcontainerregistry.EncryptionProperty{
						Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
					},
					LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
					NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
					NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
						DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
						IPRules:       []*armcontainerregistry.IPRule{},
					},
					Policies: &armcontainerregistry.Policies{
						ExportPolicy: &armcontainerregistry.ExportPolicy{
							Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
						},
						QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
						RetentionPolicy: &armcontainerregistry.RetentionPolicy{
							Days:            to.Ptr[int32](7),
							LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
							Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
						TrustPolicy: &armcontainerregistry.TrustPolicy{
							Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
						},
					},
					PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
					ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
					ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
				},
				SKU: &armcontainerregistry.SKU{
					Name: to.Ptr(armcontainerregistry.SKUNameStandard),
					Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcontainerregistry.RegistriesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcontainerregistry.RegistriesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcontainerregistry.RegistriesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.RegistriesClientListByResourceGroupResponse{RegistryListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RegistryListResult))
	}
}

func (testsuite *FakeTestSuite) TestRegistries_Get() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.Registry{
		Name:     to.Ptr("myRegistry"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled:      to.Ptr(false),
			AnonymousPullEnabled:  to.Ptr(false),
			CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
			DataEndpointEnabled:   to.Ptr(false),
			DataEndpointHostNames: []*string{},
			Encryption: &armcontainerregistry.EncryptionProperty{
				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
			},
			LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
				IPRules:       []*armcontainerregistry.IPRule{},
			},
			Policies: &armcontainerregistry.Policies{
				ExportPolicy: &armcontainerregistry.ExportPolicy{
					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
				},
				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
					Days:            to.Ptr[int32](7),
					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
					Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				TrustPolicy: &armcontainerregistry.TrustPolicy{
					Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
			},
			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
			ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
			ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, options *armcontainerregistry.RegistriesClientGetOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientGetResponse{Registry: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Registry))
}

func (testsuite *FakeTestSuite) TestRegistries_Create() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRegistry armcontainerregistry.Registry
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRegistry = armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled: to.Ptr(true),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
	}

	exampleRes := armcontainerregistry.Registry{
		Name:     to.Ptr("myRegistry"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled:      to.Ptr(true),
			AnonymousPullEnabled:  to.Ptr(false),
			CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
			DataEndpointEnabled:   to.Ptr(false),
			DataEndpointHostNames: []*string{},
			Encryption: &armcontainerregistry.EncryptionProperty{
				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
			},
			LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
				IPRules:       []*armcontainerregistry.IPRule{},
			},
			Policies: &armcontainerregistry.Policies{
				ExportPolicy: &armcontainerregistry.ExportPolicy{
					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
				},
				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
					Days:            to.Ptr[int32](7),
					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
					Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				TrustPolicy: &armcontainerregistry.TrustPolicy{
					Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
			},
			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
			ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
			ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, registry armcontainerregistry.Registry, options *armcontainerregistry.RegistriesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRegistry, registry)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientCreateResponse{Registry: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled: to.Ptr(true),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Registry))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreateZoneRedundant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryCreateZoneRedundant"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRegistry = armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
	}

	exampleRes = armcontainerregistry.Registry{
		Name:     to.Ptr("myRegistry"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled:      to.Ptr(false),
			AnonymousPullEnabled:  to.Ptr(false),
			CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
			DataEndpointEnabled:   to.Ptr(false),
			DataEndpointHostNames: []*string{},
			Encryption: &armcontainerregistry.EncryptionProperty{
				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
			},
			LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
				IPRules:       []*armcontainerregistry.IPRule{},
			},
			Policies: &armcontainerregistry.Policies{
				ExportPolicy: &armcontainerregistry.ExportPolicy{
					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
				},
				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
					Days:            to.Ptr[int32](7),
					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
					Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				TrustPolicy: &armcontainerregistry.TrustPolicy{
					Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
			},
			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
			ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
			ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, registry armcontainerregistry.Registry, options *armcontainerregistry.RegistriesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRegistry, registry)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientCreateResponse{Registry: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreateZoneRedundant.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryCreateZoneRedundant.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Registry))
}

func (testsuite *FakeTestSuite) TestRegistries_Delete() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, options *armcontainerregistry.RegistriesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryDelete.json")
}

func (testsuite *FakeTestSuite) TestRegistries_Update() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRegistryUpdateParameters armcontainerregistry.RegistryUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRegistryUpdateParameters = armcontainerregistry.RegistryUpdateParameters{
		Properties: &armcontainerregistry.RegistryPropertiesUpdateParameters{
			AdminUserEnabled: to.Ptr(true),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Registry{
		Name:     to.Ptr("myRegistry"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled:      to.Ptr(true),
			AnonymousPullEnabled:  to.Ptr(false),
			CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t }()),
			DataEndpointEnabled:   to.Ptr(false),
			DataEndpointHostNames: []*string{},
			Encryption: &armcontainerregistry.EncryptionProperty{
				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
			},
			LoginServer:              to.Ptr("myRegistry.azurecr-test.io"),
			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
				IPRules:       []*armcontainerregistry.IPRule{},
			},
			Policies: &armcontainerregistry.Policies{
				ExportPolicy: &armcontainerregistry.ExportPolicy{
					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
				},
				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
					Days:            to.Ptr[int32](7),
					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t }()),
					Status:          to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
				TrustPolicy: &armcontainerregistry.TrustPolicy{
					Type:   to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
				},
			},
			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{},
			ProvisioningState:          to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			PublicNetworkAccess:        to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
			ZoneRedundancy:             to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, registryUpdateParameters armcontainerregistry.RegistryUpdateParameters, options *armcontainerregistry.RegistriesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRegistryUpdateParameters, registryUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientUpdateResponse{Registry: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.RegistryUpdateParameters{
		Properties: &armcontainerregistry.RegistryPropertiesUpdateParameters{
			AdminUserEnabled: to.Ptr(true),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Registry))
}

func (testsuite *FakeTestSuite) TestRegistries_ListUsages() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListUsages"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.RegistryUsageListResult{
		Value: []*armcontainerregistry.RegistryUsage{
			{
				Name:         to.Ptr("Size"),
				CurrentValue: to.Ptr[int64](12345678),
				Limit:        to.Ptr[int64](107374182400),
				Unit:         to.Ptr(armcontainerregistry.RegistryUsageUnitBytes),
			},
			{
				Name:         to.Ptr("Webhooks"),
				CurrentValue: to.Ptr[int64](2),
				Limit:        to.Ptr[int64](10),
				Unit:         to.Ptr(armcontainerregistry.RegistryUsageUnitCount),
			}},
	}

	fakeServer.ListUsages = func(ctx context.Context, resourceGroupName string, registryName string, options *armcontainerregistry.RegistriesClientListUsagesOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientListUsagesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientListUsagesResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientListUsagesResponse{RegistryUsageListResult: exampleRes}, nil)
		return
	}
	res, err := client.ListUsages(ctx, "myResourceGroup", "myRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListUsages.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RegistryUsageListResult))
}

func (testsuite *FakeTestSuite) TestRegistries_ListPrivateLinkResources() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListPrivateLinkResources"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.PrivateLinkResourceListResult{
		Value: []*armcontainerregistry.PrivateLinkResource{
			{
				Name: to.Ptr("registry"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
				Properties: &armcontainerregistry.PrivateLinkResourceProperties{
					GroupID: to.Ptr("registry"),
					RequiredMembers: []*string{
						to.Ptr("registry"),
						to.Ptr("registry_data_myregion")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.azurecr.io")},
				},
			}},
	}

	fakeServer.NewListPrivateLinkResourcesPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.RegistriesClientListPrivateLinkResourcesOptions) (resp azfake.PagerResponder[armcontainerregistry.RegistriesClientListPrivateLinkResourcesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.RegistriesClientListPrivateLinkResourcesResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.RegistriesClientListPrivateLinkResourcesResponse{PrivateLinkResourceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPrivateLinkResourcesPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListPrivateLinkResources.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateLinkResourceListResult))
	}
}

func (testsuite *FakeTestSuite) TestRegistries_GetPrivateLinkResource() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGetPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGetPrivateLinkResource"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleGroupName = "registry"

	exampleRes := armcontainerregistry.PrivateLinkResource{
		Name: to.Ptr("registry"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
		Properties: &armcontainerregistry.PrivateLinkResourceProperties{
			GroupID: to.Ptr("registry"),
			RequiredMembers: []*string{
				to.Ptr("registry"),
				to.Ptr("registry_data_myregion")},
			RequiredZoneNames: []*string{
				to.Ptr("privatelink.azurecr.io")},
		},
	}

	fakeServer.GetPrivateLinkResource = func(ctx context.Context, resourceGroupName string, registryName string, groupName string, options *armcontainerregistry.RegistriesClientGetPrivateLinkResourceOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientGetPrivateLinkResourceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleGroupName, groupName)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientGetPrivateLinkResourceResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientGetPrivateLinkResourceResponse{PrivateLinkResource: exampleRes}, nil)
		return
	}
	res, err := client.GetPrivateLinkResource(ctx, "myResourceGroup", "myRegistry", "registry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGetPrivateLinkResource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResource))
}

func (testsuite *FakeTestSuite) TestRegistries_ListCredentials() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryListCredentials"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.RegistryListCredentialsResult{
		Passwords: []*armcontainerregistry.RegistryPassword{
			{
				Name:  to.Ptr(armcontainerregistry.PasswordNamePassword),
				Value: to.Ptr("00000000000000000000000000000000"),
			},
			{
				Name:  to.Ptr(armcontainerregistry.PasswordNamePassword2),
				Value: to.Ptr("00000000000000000000000000000000"),
			}},
		Username: to.Ptr("myRegistry"),
	}

	fakeServer.ListCredentials = func(ctx context.Context, resourceGroupName string, registryName string, options *armcontainerregistry.RegistriesClientListCredentialsOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientListCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientListCredentialsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientListCredentialsResponse{RegistryListCredentialsResult: exampleRes}, nil)
		return
	}
	res, err := client.ListCredentials(ctx, "myResourceGroup", "myRegistry", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryListCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RegistryListCredentialsResult))
}

func (testsuite *FakeTestSuite) TestRegistries_RegenerateCredential() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryRegenerateCredential.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryRegenerateCredential"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRegenerateCredentialParameters armcontainerregistry.RegenerateCredentialParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRegenerateCredentialParameters = armcontainerregistry.RegenerateCredentialParameters{
		Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
	}

	exampleRes := armcontainerregistry.RegistryListCredentialsResult{
		Passwords: []*armcontainerregistry.RegistryPassword{
			{
				Name:  to.Ptr(armcontainerregistry.PasswordNamePassword),
				Value: to.Ptr("00000000000000000000000000000000"),
			},
			{
				Name:  to.Ptr(armcontainerregistry.PasswordNamePassword2),
				Value: to.Ptr("00000000000000000000000000000000"),
			}},
		Username: to.Ptr("myRegistry"),
	}

	fakeServer.RegenerateCredential = func(ctx context.Context, resourceGroupName string, registryName string, regenerateCredentialParameters armcontainerregistry.RegenerateCredentialParameters, options *armcontainerregistry.RegistriesClientRegenerateCredentialOptions) (resp azfake.Responder[armcontainerregistry.RegistriesClientRegenerateCredentialResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRegenerateCredentialParameters, regenerateCredentialParameters)
		resp = azfake.Responder[armcontainerregistry.RegistriesClientRegenerateCredentialResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RegistriesClientRegenerateCredentialResponse{RegistryListCredentialsResult: exampleRes}, nil)
		return
	}
	res, err := client.RegenerateCredential(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.RegenerateCredentialParameters{
		Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryRegenerateCredential.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RegistryListCredentialsResult))
}

func (testsuite *FakeTestSuite) TestRegistries_GenerateCredentials() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGenerateCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegistryGenerateCredentials"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleGenerateCredentialsParameters armcontainerregistry.GenerateCredentialsParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleGenerateCredentialsParameters = armcontainerregistry.GenerateCredentialsParameters{
		Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
		TokenID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
	}

	exampleRes := armcontainerregistry.GenerateCredentialsResult{
		Passwords: []*armcontainerregistry.TokenPassword{
			{
				Name:   to.Ptr(armcontainerregistry.TokenPasswordNamePassword1),
				Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
				Value:  to.Ptr("00000000000000000000000000000000"),
			},
			{
				Name:   to.Ptr(armcontainerregistry.TokenPasswordNamePassword2),
				Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
				Value:  to.Ptr("00000000000000000000000000000000"),
			}},
		Username: to.Ptr("myToken"),
	}

	fakeServer.BeginGenerateCredentials = func(ctx context.Context, resourceGroupName string, registryName string, generateCredentialsParameters armcontainerregistry.GenerateCredentialsParameters, options *armcontainerregistry.RegistriesClientBeginGenerateCredentialsOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientGenerateCredentialsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleGenerateCredentialsParameters, generateCredentialsParameters)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientGenerateCredentialsResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientGenerateCredentialsResponse{GenerateCredentialsResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginGenerateCredentials(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.GenerateCredentialsParameters{
		Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
		TokenID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGenerateCredentials.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/RegistryGenerateCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GenerateCredentialsResult))
}

func (testsuite *FakeTestSuite) TestRegistries_ScheduleRun() {
	ctx := context.Background()
	fakeServer := fake.RegistriesServer{}
	client, err := armcontainerregistry.NewRegistriesClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRegistriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRunRequest armcontainerregistry.RunRequestClassification
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
	}

	exampleRes := armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err := client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_EncodedTaskRun"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.EncodedTaskRunRequest{
		Type: to.Ptr("EncodedTaskRunRequest"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		EncodedTaskContent:   to.Ptr("c3RlcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1cAp7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogIC0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0nXQ=="),
		EncodedValuesContent: to.Ptr("ZW52aXJvbm1lbnQ6IHByb2QKdmVyc2lvbjogMQ=="),
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.EncodedTaskRunRequest{
		Type: to.Ptr("EncodedTaskRunRequest"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		EncodedTaskContent:   to.Ptr("c3RlcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1cAp7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogIC0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0nXQ=="),
		EncodedValuesContent: to.Ptr("ZW52aXJvbm1lbnQ6IHByb2QKdmVyc2lvbjogMQ=="),
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_EncodedTaskRun.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_FileTaskRun"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.FileTaskRunRequest{
		Type: to.Ptr("FileTaskRunRequest"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		TaskFilePath:   to.Ptr("acb.yaml"),
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		ValuesFilePath: to.Ptr("prod-values.yaml"),
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.FileTaskRunRequest{
		Type: to.Ptr("FileTaskRunRequest"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		TaskFilePath:   to.Ptr("acb.yaml"),
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		ValuesFilePath: to.Ptr("prod-values.yaml"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTaskRun.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_Task"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.TaskRunRequest{
		Type: to.Ptr("TaskRunRequest"),
		OverrideTaskStepProperties: &armcontainerregistry.OverrideTaskStepProperties{
			Arguments: []*armcontainerregistry.Argument{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			File:               to.Ptr("overriddenDockerfile"),
			Target:             to.Ptr("build"),
			UpdateTriggerToken: to.Ptr("aGVsbG8gd29ybGQ="),
			Values: []*armcontainerregistry.SetValue{
				{
					Name:     to.Ptr("mytestname"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestname"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
		},
		TaskID: to.Ptr("myTask"),
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.TaskRunRequest{
		Type: to.Ptr("TaskRunRequest"),
		OverrideTaskStepProperties: &armcontainerregistry.OverrideTaskStepProperties{
			Arguments: []*armcontainerregistry.Argument{
				{
					Name:     to.Ptr("mytestargument"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestargument"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
			File:               to.Ptr("overriddenDockerfile"),
			Target:             to.Ptr("build"),
			UpdateTriggerToken: to.Ptr("aGVsbG8gd29ybGQ="),
			Values: []*armcontainerregistry.SetValue{
				{
					Name:     to.Ptr("mytestname"),
					IsSecret: to.Ptr(false),
					Value:    to.Ptr("mytestvalue"),
				},
				{
					Name:     to.Ptr("mysecrettestname"),
					IsSecret: to.Ptr(true),
					Value:    to.Ptr("mysecrettestvalue"),
				}},
		},
		TaskID: to.Ptr("myTask"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_Task.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_Task_WithCustomCredentials"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.FileTaskRunRequest{
		Type: to.Ptr("FileTaskRunRequest"),
		Credentials: &armcontainerregistry.Credentials{
			CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
				"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg1"),
					},
				},
			},
			SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
				LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
			},
		},
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		TaskFilePath: to.Ptr("acb.yaml"),
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.FileTaskRunRequest{
		Type: to.Ptr("FileTaskRunRequest"),
		Credentials: &armcontainerregistry.Credentials{
			CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
				"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg1"),
					},
				},
			},
			SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
				LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
			},
		},
		Platform: &armcontainerregistry.PlatformProperties{
			OS: to.Ptr(armcontainerregistry.OSLinux),
		},
		TaskFilePath: to.Ptr("acb.yaml"),
		Values: []*armcontainerregistry.SetValue{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_FileTask_WithCustomCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_WithCustomCredentials"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		Credentials: &armcontainerregistry.Credentials{
			CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
				"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg1"),
					},
				},
				"myregistry2.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg2"),
					},
				},
			},
			SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
				LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
			},
		},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		Target:         to.Ptr("stage1"),
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		Credentials: &armcontainerregistry.Credentials{
			CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
				"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg1"),
					},
				},
				"myregistry2.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
					Password: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("***"),
					},
					UserName: &armcontainerregistry.SecretObject{
						Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
						Value: to.Ptr("reg2"),
					},
				},
			},
			SourceRegistry: &armcontainerregistry.SourceRegistryCredentials{
				LoginMode: to.Ptr(armcontainerregistry.SourceRegistryLoginModeDefault),
			},
		},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
		Target:         to.Ptr("stage1"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithCustomCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Registries_ScheduleRun_WithLogTemplate"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunRequest = &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		LogTemplate:      to.Ptr("acr/tasks:{{.Run.OS}}"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
	}

	exampleRes = armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/run"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			LastUpdatedTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
		},
	}

	fakeServer.BeginScheduleRun = func(ctx context.Context, resourceGroupName string, registryName string, runRequest armcontainerregistry.RunRequestClassification, options *armcontainerregistry.RegistriesClientBeginScheduleRunOptions) (resp azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunRequest, runRequest)
		resp = azfake.PollerResponder[armcontainerregistry.RegistriesClientScheduleRunResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RegistriesClientScheduleRunResponse{Run: exampleRes}, nil)
		return
	}
	poller, err = client.BeginScheduleRun(ctx, "myResourceGroup", "myRegistry", &armcontainerregistry.DockerBuildRequest{
		Type:             to.Ptr("DockerBuildRequest"),
		IsArchiveEnabled: to.Ptr(true),
		LogTemplate:      to.Ptr("acr/tasks:{{.Run.OS}}"),
		AgentConfiguration: &armcontainerregistry.AgentProperties{
			CPU: to.Ptr[int32](2),
		},
		Arguments: []*armcontainerregistry.Argument{
			{
				Name:     to.Ptr("mytestargument"),
				IsSecret: to.Ptr(false),
				Value:    to.Ptr("mytestvalue"),
			},
			{
				Name:     to.Ptr("mysecrettestargument"),
				IsSecret: to.Ptr(true),
				Value:    to.Ptr("mysecrettestvalue"),
			}},
		DockerFilePath: to.Ptr("DockerFile"),
		ImageNames: []*string{
			to.Ptr("azurerest:testtag")},
		IsPushEnabled: to.Ptr(true),
		NoCache:       to.Ptr(true),
		Platform: &armcontainerregistry.PlatformProperties{
			Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
			OS:           to.Ptr(armcontainerregistry.OSLinux),
		},
		SourceLocation: to.Ptr("https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RegistriesScheduleRun_WithLogTemplate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))
}

func (testsuite *FakeTestSuite) TestImportPipelines_List() {
	ctx := context.Background()
	fakeServer := fake.ImportPipelinesServer{}
	client, err := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.ImportPipelineListResult{
		Value: []*armcontainerregistry.ImportPipeline{
			{
				Name: to.Ptr("myImportPipeline"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
				Identity: &armcontainerregistry.IdentityProperties{
					Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
					UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
						"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{
							ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
							PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
						},
					},
				},
				Location: to.Ptr("westus"),
				Properties: &armcontainerregistry.ImportPipelineProperties{
					Options: []*armcontainerregistry.PipelineOptions{
						to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
						to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
						to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Source: &armcontainerregistry.ImportPipelineSourceProperties{
						Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
						KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
						URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
					},
					Trigger: &armcontainerregistry.PipelineTriggerProperties{
						SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
							Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.ImportPipelinesClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.ImportPipelinesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.ImportPipelinesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.ImportPipelinesClientListResponse{ImportPipelineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ImportPipelineListResult))
	}
}

func (testsuite *FakeTestSuite) TestImportPipelines_Get() {
	ctx := context.Background()
	fakeServer := fake.ImportPipelinesServer{}
	client, err := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleImportPipelineName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleImportPipelineName = "myImportPipeline"

	exampleRes := armcontainerregistry.ImportPipeline{
		Name: to.Ptr("myImportPipeline"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{
					ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
					PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
				},
			},
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ImportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
				to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
				to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Source: &armcontainerregistry.ImportPipelineSourceProperties{
				Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
			Trigger: &armcontainerregistry.PipelineTriggerProperties{
				SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
					Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, importPipelineName string, options *armcontainerregistry.ImportPipelinesClientGetOptions) (resp azfake.Responder[armcontainerregistry.ImportPipelinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleImportPipelineName, importPipelineName)
		resp = azfake.Responder[armcontainerregistry.ImportPipelinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.ImportPipelinesClientGetResponse{ImportPipeline: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myImportPipeline", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ImportPipeline))
}

func (testsuite *FakeTestSuite) TestImportPipelines_Create() {
	ctx := context.Background()
	fakeServer := fake.ImportPipelinesServer{}
	client, err := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleImportPipelineName string
	var exampleImportPipelineCreateParameters armcontainerregistry.ImportPipeline
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleImportPipelineName = "myImportPipeline"
	exampleImportPipelineCreateParameters = armcontainerregistry.ImportPipeline{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ImportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
				to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
				to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
			Source: &armcontainerregistry.ImportPipelineSourceProperties{
				Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}

	exampleRes := armcontainerregistry.ImportPipeline{
		Name: to.Ptr("myImportPipeline"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/importPipelines"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{
					ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
					PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
				},
			},
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ImportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
				to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
				to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Source: &armcontainerregistry.ImportPipelineSourceProperties{
				Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
			Trigger: &armcontainerregistry.PipelineTriggerProperties{
				SourceTrigger: &armcontainerregistry.PipelineSourceTriggerProperties{
					Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
				},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, importPipelineName string, importPipelineCreateParameters armcontainerregistry.ImportPipeline, options *armcontainerregistry.ImportPipelinesClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ImportPipelinesClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleImportPipelineName, importPipelineName)
		testsuite.Require().Equal(exampleImportPipelineCreateParameters, importPipelineCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ImportPipelinesClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ImportPipelinesClientCreateResponse{ImportPipeline: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myImportPipeline", armcontainerregistry.ImportPipeline{
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.ImportPipelineProperties{
			Options: []*armcontainerregistry.PipelineOptions{
				to.Ptr(armcontainerregistry.PipelineOptionsOverwriteTags),
				to.Ptr(armcontainerregistry.PipelineOptionsDeleteSourceBlobOnSuccess),
				to.Ptr(armcontainerregistry.PipelineOptionsContinueOnErrors)},
			Source: &armcontainerregistry.ImportPipelineSourceProperties{
				Type:        to.Ptr(armcontainerregistry.PipelineSourceTypeAzureStorageBlobContainer),
				KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
				URI:         to.Ptr("https://accountname.blob.core.windows.net/containername"),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ImportPipeline))
}

func (testsuite *FakeTestSuite) TestImportPipelines_Delete() {
	ctx := context.Background()
	fakeServer := fake.ImportPipelinesServer{}
	client, err := armcontainerregistry.NewImportPipelinesClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImportPipelinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ImportPipelineDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleImportPipelineName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleImportPipelineName = "myImportPipeline"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, importPipelineName string, options *armcontainerregistry.ImportPipelinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.ImportPipelinesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleImportPipelineName, importPipelineName)
		resp = azfake.PollerResponder[armcontainerregistry.ImportPipelinesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ImportPipelinesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myImportPipeline", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ImportPipelineDelete.json")
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	ctx := context.Background()
	fakeServer := fake.OperationsServer{}
	client, err := armcontainerregistry.NewOperationsClient(testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewOperationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/OperationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationList"},
	})

	exampleRes := armcontainerregistry.OperationListResult{
		Value: []*armcontainerregistry.OperationDefinition{
			{
				Name: to.Ptr("Microsoft.ContainerRegistry/locations/deleteVirtualNetworkOrSubnets/action"),
				Display: &armcontainerregistry.OperationDisplayDefinition{
					Description: to.Ptr("Notifies Microsoft.ContainerRegistry that virtual network or subnet is being deleted"),
					Operation:   to.Ptr("Delete virtual network or subnets notifications"),
					Provider:    to.Ptr("Microsoft ContainerRegistry"),
					Resource:    to.Ptr(""),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcontainerregistry.OperationsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armcontainerregistry.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.OperationsClientListResponse{OperationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/OperationList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationListResult))
	}
}

func (testsuite *FakeTestSuite) TestPipelineRuns_List() {
	ctx := context.Background()
	fakeServer := fake.PipelineRunsServer{}
	client, err := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPipelineRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.PipelineRunListResult{
		Value: []*armcontainerregistry.PipelineRun{
			{
				Name: to.Ptr("myPipelineRun"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
				Properties: &armcontainerregistry.PipelineRunProperties{
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Response: &armcontainerregistry.PipelineRunResponse{
						CatalogDigest: to.Ptr("sha256@"),
						Progress: &armcontainerregistry.ProgressProperties{
							Percentage: to.Ptr("20"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
						Status:    to.Ptr("Running"),
						Target: &armcontainerregistry.ExportPipelineTargetProperties{
							Type:        to.Ptr("AzureStorageBlob"),
							KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
							URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
						},
					},
					Request: &armcontainerregistry.PipelineRunRequest{
						Artifacts: []*string{
							to.Ptr("sourceRepository/hello-world"),
							to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
						PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
					},
				},
			},
			{
				Name: to.Ptr("myPipelineRun"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
				Properties: &armcontainerregistry.PipelineRunProperties{
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Response: &armcontainerregistry.PipelineRunResponse{
						CatalogDigest: to.Ptr("sha256@"),
						ImportedArtifacts: []*string{
							to.Ptr("sourceRepository/hello-world"),
							to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
						Progress: &armcontainerregistry.ProgressProperties{
							Percentage: to.Ptr("100"),
						},
						Source: &armcontainerregistry.ImportPipelineSourceProperties{
							Type:        to.Ptr(armcontainerregistry.PipelineSourceType("AzureStorageBlob")),
							KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
							URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
						},
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-03T17:23:21.9261521+00:00"); return t }()),
						Status:    to.Ptr("Succeeded"),
					},
					Request: &armcontainerregistry.PipelineRunRequest{
						PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.PipelineRunsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.PipelineRunsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.PipelineRunsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.PipelineRunsClientListResponse{PipelineRunListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PipelineRunListResult))
	}
}

func (testsuite *FakeTestSuite) TestPipelineRuns_Get() {
	ctx := context.Background()
	fakeServer := fake.PipelineRunsServer{}
	client, err := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPipelineRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePipelineRunName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePipelineRunName = "myPipelineRun"

	exampleRes := armcontainerregistry.PipelineRun{
		Name: to.Ptr("myPipelineRun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
		Properties: &armcontainerregistry.PipelineRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Response: &armcontainerregistry.PipelineRunResponse{
				CatalogDigest: to.Ptr("sha256@"),
				Progress: &armcontainerregistry.ProgressProperties{
					Percentage: to.Ptr("20"),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
				Status:    to.Ptr("Running"),
				Target: &armcontainerregistry.ExportPipelineTargetProperties{
					Type:        to.Ptr("AzureStorageBlob"),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
				},
			},
			Request: &armcontainerregistry.PipelineRunRequest{
				Artifacts: []*string{
					to.Ptr("sourceRepository/hello-world"),
					to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, pipelineRunName string, options *armcontainerregistry.PipelineRunsClientGetOptions) (resp azfake.Responder[armcontainerregistry.PipelineRunsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePipelineRunName, pipelineRunName)
		resp = azfake.Responder[armcontainerregistry.PipelineRunsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.PipelineRunsClientGetResponse{PipelineRun: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myPipelineRun", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PipelineRun))
}

func (testsuite *FakeTestSuite) TestPipelineRuns_Create() {
	ctx := context.Background()
	fakeServer := fake.PipelineRunsServer{}
	client, err := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPipelineRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Export.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunCreate_Export"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePipelineRunName string
	var examplePipelineRunCreateParameters armcontainerregistry.PipelineRun
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePipelineRunName = "myPipelineRun"
	examplePipelineRunCreateParameters = armcontainerregistry.PipelineRun{
		Properties: &armcontainerregistry.PipelineRunProperties{
			Request: &armcontainerregistry.PipelineRunRequest{
				Artifacts: []*string{
					to.Ptr("sourceRepository/hello-world"),
					to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
				Target: &armcontainerregistry.PipelineRunTargetProperties{
					Name: to.Ptr("myblob.tar.gz"),
					Type: to.Ptr(armcontainerregistry.PipelineRunTargetTypeAzureStorageBlob),
				},
			},
		},
	}

	exampleRes := armcontainerregistry.PipelineRun{
		Name: to.Ptr("myPipelineRun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
		Properties: &armcontainerregistry.PipelineRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Response: &armcontainerregistry.PipelineRunResponse{
				CatalogDigest: to.Ptr("sha256@"),
				Progress: &armcontainerregistry.ProgressProperties{
					Percentage: to.Ptr("20"),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
				Status:    to.Ptr("Running"),
				Target: &armcontainerregistry.ExportPipelineTargetProperties{
					Type:        to.Ptr("AzureStorageBlob"),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrexportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
				},
			},
			Request: &armcontainerregistry.PipelineRunRequest{
				Artifacts: []*string{
					to.Ptr("sourceRepository/hello-world"),
					to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, pipelineRunName string, pipelineRunCreateParameters armcontainerregistry.PipelineRun, options *armcontainerregistry.PipelineRunsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.PipelineRunsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePipelineRunName, pipelineRunName)
		testsuite.Require().Equal(examplePipelineRunCreateParameters, pipelineRunCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.PipelineRunsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.PipelineRunsClientCreateResponse{PipelineRun: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myPipelineRun", armcontainerregistry.PipelineRun{
		Properties: &armcontainerregistry.PipelineRunProperties{
			Request: &armcontainerregistry.PipelineRunRequest{
				Artifacts: []*string{
					to.Ptr("sourceRepository/hello-world"),
					to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/exportPipelines/myExportPipeline"),
				Target: &armcontainerregistry.PipelineRunTargetProperties{
					Name: to.Ptr("myblob.tar.gz"),
					Type: to.Ptr(armcontainerregistry.PipelineRunTargetTypeAzureStorageBlob),
				},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Export.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Export.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PipelineRun))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Import.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunCreate_Import"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePipelineRunName = "myPipelineRun"
	examplePipelineRunCreateParameters = armcontainerregistry.PipelineRun{
		Properties: &armcontainerregistry.PipelineRunProperties{
			ForceUpdateTag: to.Ptr("2020-03-04T17:23:21.9261521+00:00"),
			Request: &armcontainerregistry.PipelineRunRequest{
				CatalogDigest:      to.Ptr("sha256@"),
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
				Source: &armcontainerregistry.PipelineRunSourceProperties{
					Name: to.Ptr("myblob.tar.gz"),
					Type: to.Ptr(armcontainerregistry.PipelineRunSourceTypeAzureStorageBlob),
				},
			},
		},
	}

	exampleRes = armcontainerregistry.PipelineRun{
		Name: to.Ptr("myPipelineRun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/pipelineRuns"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/pipelineRuns/myPipelineRun"),
		Properties: &armcontainerregistry.PipelineRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Response: &armcontainerregistry.PipelineRunResponse{
				CatalogDigest: to.Ptr("sha256@"),
				ImportedArtifacts: []*string{
					to.Ptr("sourceRepository/hello-world"),
					to.Ptr("sourceRepository2@sha256:00000000000000000000000000000000000")},
				Progress: &armcontainerregistry.ProgressProperties{
					Percentage: to.Ptr("100"),
				},
				Source: &armcontainerregistry.ImportPipelineSourceProperties{
					Type:        to.Ptr(armcontainerregistry.PipelineSourceType("AzureStorageBlob")),
					KeyVaultURI: to.Ptr("https://myvault.vault.azure.net/secrets/acrimportsas"),
					URI:         to.Ptr("https://accountname.blob.core.windows.net/containername/myblob.tar.gz"),
				},
				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-04T17:23:21.9261521+00:00"); return t }()),
				Status:    to.Ptr("Succeeded"),
			},
			Request: &armcontainerregistry.PipelineRunRequest{
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, pipelineRunName string, pipelineRunCreateParameters armcontainerregistry.PipelineRun, options *armcontainerregistry.PipelineRunsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.PipelineRunsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePipelineRunName, pipelineRunName)
		testsuite.Require().Equal(examplePipelineRunCreateParameters, pipelineRunCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.PipelineRunsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.PipelineRunsClientCreateResponse{PipelineRun: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myPipelineRun", armcontainerregistry.PipelineRun{
		Properties: &armcontainerregistry.PipelineRunProperties{
			ForceUpdateTag: to.Ptr("2020-03-04T17:23:21.9261521+00:00"),
			Request: &armcontainerregistry.PipelineRunRequest{
				CatalogDigest:      to.Ptr("sha256@"),
				PipelineResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline"),
				Source: &armcontainerregistry.PipelineRunSourceProperties{
					Name: to.Ptr("myblob.tar.gz"),
					Type: to.Ptr(armcontainerregistry.PipelineRunSourceTypeAzureStorageBlob),
				},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Import.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunCreate_Import.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PipelineRun))
}

func (testsuite *FakeTestSuite) TestPipelineRuns_Delete() {
	ctx := context.Background()
	fakeServer := fake.PipelineRunsServer{}
	client, err := armcontainerregistry.NewPipelineRunsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPipelineRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PipelineRunDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePipelineRunName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePipelineRunName = "myPipelineRun"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, pipelineRunName string, options *armcontainerregistry.PipelineRunsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.PipelineRunsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePipelineRunName, pipelineRunName)
		resp = azfake.PollerResponder[armcontainerregistry.PipelineRunsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.PipelineRunsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myPipelineRun", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PipelineRunDelete.json")
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_List() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.PrivateEndpointConnectionListResult{
		Value: []*armcontainerregistry.PrivateEndpointConnection{
			{
				Name: to.Ptr("myConnection"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
				Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
					},
					PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Auto-Approved"),
						ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
						Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.PrivateEndpointConnectionsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.PrivateEndpointConnectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.PrivateEndpointConnectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.PrivateEndpointConnectionsClientListResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionListResult))
	}
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Get() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePrivateEndpointConnectionName = "myConnection"

	exampleRes := armcontainerregistry.PrivateEndpointConnection{
		Name: to.Ptr("myConnection"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
		Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
			},
			PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
				Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, privateEndpointConnectionName string, options *armcontainerregistry.PrivateEndpointConnectionsClientGetOptions) (resp azfake.Responder[armcontainerregistry.PrivateEndpointConnectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armcontainerregistry.PrivateEndpointConnectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.PrivateEndpointConnectionsClientGetResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myConnection", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionCreateOrUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePrivateEndpointConnectionName string
	var examplePrivateEndpointConnection armcontainerregistry.PrivateEndpointConnection
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePrivateEndpointConnectionName = "myConnection"
	examplePrivateEndpointConnection = armcontainerregistry.PrivateEndpointConnection{
		Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Auto-Approved"),
				Status:      to.Ptr(armcontainerregistry.ConnectionStatusApproved),
			},
		},
	}

	exampleRes := armcontainerregistry.PrivateEndpointConnection{
		Name: to.Ptr("myConnection"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateEndpointConnections/myConnection"),
		Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcontainerregistry.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
			},
			PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr(armcontainerregistry.ActionsRequiredNone),
				Status:          to.Ptr(armcontainerregistry.ConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, registryName string, privateEndpointConnectionName string, privateEndpointConnection armcontainerregistry.PrivateEndpointConnection, options *armcontainerregistry.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.PrivateEndpointConnectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().Equal(examplePrivateEndpointConnection, privateEndpointConnection)
		resp = azfake.PollerResponder[armcontainerregistry.PrivateEndpointConnectionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.PrivateEndpointConnectionsClientCreateOrUpdateResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, "myResourceGroup", "myRegistry", "myConnection", armcontainerregistry.PrivateEndpointConnection{
		Properties: &armcontainerregistry.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcontainerregistry.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Auto-Approved"),
				Status:      to.Ptr(armcontainerregistry.ConnectionStatusApproved),
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionCreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestPrivateEndpointConnections_Delete() {
	ctx := context.Background()
	fakeServer := fake.PrivateEndpointConnectionsServer{}
	client, err := armcontainerregistry.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewPrivateEndpointConnectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	examplePrivateEndpointConnectionName = "myConnection"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, privateEndpointConnectionName string, options *armcontainerregistry.PrivateEndpointConnectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.PrivateEndpointConnectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.PollerResponder[armcontainerregistry.PrivateEndpointConnectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.PrivateEndpointConnectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myConnection", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/PrivateEndpointConnectionDelete.json")
}

func (testsuite *FakeTestSuite) TestReplications_List() {
	ctx := context.Background()
	fakeServer := fake.ReplicationsServer{}
	client, err := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewReplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.ReplicationListResult{
		Value: []*armcontainerregistry.Replication{
			{
				Name:     to.Ptr("myReplication"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"key": to.Ptr("value"),
				},
				Properties: &armcontainerregistry.ReplicationProperties{
					ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RegionEndpointEnabled: to.Ptr(true),
					Status: &armcontainerregistry.Status{
						DisplayStatus: to.Ptr("Ready"),
						Message:       to.Ptr("The replication is ready."),
						Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
					},
					ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.ReplicationsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.ReplicationsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.ReplicationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.ReplicationsClientListResponse{ReplicationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ReplicationListResult))
	}
}

func (testsuite *FakeTestSuite) TestReplications_Get() {
	ctx := context.Background()
	fakeServer := fake.ReplicationsServer{}
	client, err := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewReplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleReplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleReplicationName = "myReplication"

	exampleRes := armcontainerregistry.Replication{
		Name:     to.Ptr("myReplication"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RegionEndpointEnabled: to.Ptr(true),
			Status: &armcontainerregistry.Status{
				DisplayStatus: to.Ptr("Ready"),
				Message:       to.Ptr("The replication is ready."),
				Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
			},
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, replicationName string, options *armcontainerregistry.ReplicationsClientGetOptions) (resp azfake.Responder[armcontainerregistry.ReplicationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleReplicationName, replicationName)
		resp = azfake.Responder[armcontainerregistry.ReplicationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.ReplicationsClientGetResponse{Replication: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myReplication", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Replication))
}

func (testsuite *FakeTestSuite) TestReplications_Create() {
	ctx := context.Background()
	fakeServer := fake.ReplicationsServer{}
	client, err := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewReplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleReplicationName string
	var exampleReplication armcontainerregistry.Replication
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleReplicationName = "myReplication"
	exampleReplication = armcontainerregistry.Replication{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Replication{
		Name:     to.Ptr("myReplication"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RegionEndpointEnabled: to.Ptr(true),
			Status: &armcontainerregistry.Status{
				DisplayStatus: to.Ptr("Ready"),
				Message:       to.Ptr("The replication is ready."),
				Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
			},
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, replicationName string, replication armcontainerregistry.Replication, options *armcontainerregistry.ReplicationsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ReplicationsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleReplicationName, replicationName)
		testsuite.Require().Equal(exampleReplication, replication)
		resp = azfake.PollerResponder[armcontainerregistry.ReplicationsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ReplicationsClientCreateResponse{Replication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myReplication", armcontainerregistry.Replication{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Replication))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreateZoneRedundant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationCreateZoneRedundant"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleReplicationName = "myReplication"
	exampleReplication = armcontainerregistry.Replication{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			RegionEndpointEnabled: to.Ptr(true),
			ZoneRedundancy:        to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
	}

	exampleRes = armcontainerregistry.Replication{
		Name:     to.Ptr("myReplication"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RegionEndpointEnabled: to.Ptr(true),
			Status: &armcontainerregistry.Status{
				DisplayStatus: to.Ptr("Ready"),
				Message:       to.Ptr("The replication is ready."),
				Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
			},
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, replicationName string, replication armcontainerregistry.Replication, options *armcontainerregistry.ReplicationsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ReplicationsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleReplicationName, replicationName)
		testsuite.Require().Equal(exampleReplication, replication)
		resp = azfake.PollerResponder[armcontainerregistry.ReplicationsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ReplicationsClientCreateResponse{Replication: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myReplication", armcontainerregistry.Replication{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			RegionEndpointEnabled: to.Ptr(true),
			ZoneRedundancy:        to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreateZoneRedundant.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationCreateZoneRedundant.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Replication))
}

func (testsuite *FakeTestSuite) TestReplications_Delete() {
	ctx := context.Background()
	fakeServer := fake.ReplicationsServer{}
	client, err := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewReplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleReplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleReplicationName = "myReplication"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, replicationName string, options *armcontainerregistry.ReplicationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.ReplicationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleReplicationName, replicationName)
		resp = azfake.PollerResponder[armcontainerregistry.ReplicationsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ReplicationsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myReplication", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationDelete.json")
}

func (testsuite *FakeTestSuite) TestReplications_Update() {
	ctx := context.Background()
	fakeServer := fake.ReplicationsServer{}
	client, err := armcontainerregistry.NewReplicationsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewReplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReplicationUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleReplicationName string
	var exampleReplicationUpdateParameters armcontainerregistry.ReplicationUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleReplicationName = "myReplication"
	exampleReplicationUpdateParameters = armcontainerregistry.ReplicationUpdateParameters{
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Replication{
		Name:     to.Ptr("myReplication"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/replications"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/replications/myReplication"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.ReplicationProperties{
			ProvisioningState:     to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RegionEndpointEnabled: to.Ptr(true),
			Status: &armcontainerregistry.Status{
				DisplayStatus: to.Ptr("Ready"),
				Message:       to.Ptr("The replication is ready."),
				Timestamp:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:15:37.0707808Z"); return t }()),
			},
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, replicationName string, replicationUpdateParameters armcontainerregistry.ReplicationUpdateParameters, options *armcontainerregistry.ReplicationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.ReplicationsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleReplicationName, replicationName)
		testsuite.Require().Equal(exampleReplicationUpdateParameters, replicationUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ReplicationsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ReplicationsClientUpdateResponse{Replication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myReplication", armcontainerregistry.ReplicationUpdateParameters{
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ReplicationUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Replication))
}

func (testsuite *FakeTestSuite) TestScopeMaps_List() {
	ctx := context.Background()
	fakeServer := fake.ScopeMapsServer{}
	client, err := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewScopeMapsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.ScopeMapListResult{
		Value: []*armcontainerregistry.ScopeMap{
			{
				Name: to.Ptr("myScopeMap"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
				Properties: &armcontainerregistry.ScopeMapProperties{
					Type: to.Ptr("IsUserDefined"),
					Actions: []*string{
						to.Ptr("repositories/myrepository/contentWrite"),
						to.Ptr("repositories/myrepository/delete")},
					CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.ScopeMapsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.ScopeMapsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.ScopeMapsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.ScopeMapsClientListResponse{ScopeMapListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ScopeMapListResult))
	}
}

func (testsuite *FakeTestSuite) TestScopeMaps_Get() {
	ctx := context.Background()
	fakeServer := fake.ScopeMapsServer{}
	client, err := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewScopeMapsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleScopeMapName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleScopeMapName = "myScopeMap"

	exampleRes := armcontainerregistry.ScopeMap{
		Name: to.Ptr("myScopeMap"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
		Properties: &armcontainerregistry.ScopeMapProperties{
			Type: to.Ptr("IsUserDefined"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/delete")},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, scopeMapName string, options *armcontainerregistry.ScopeMapsClientGetOptions) (resp azfake.Responder[armcontainerregistry.ScopeMapsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleScopeMapName, scopeMapName)
		resp = azfake.Responder[armcontainerregistry.ScopeMapsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.ScopeMapsClientGetResponse{ScopeMap: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myScopeMap", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ScopeMap))
}

func (testsuite *FakeTestSuite) TestScopeMaps_Create() {
	ctx := context.Background()
	fakeServer := fake.ScopeMapsServer{}
	client, err := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewScopeMapsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleScopeMapName string
	var exampleScopeMapCreateParameters armcontainerregistry.ScopeMap
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleScopeMapName = "myScopeMap"
	exampleScopeMapCreateParameters = armcontainerregistry.ScopeMap{
		Properties: &armcontainerregistry.ScopeMapProperties{
			Description: to.Ptr("Developer Scopes"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/delete")},
		},
	}

	exampleRes := armcontainerregistry.ScopeMap{
		Name: to.Ptr("myScopeMap"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
		Properties: &armcontainerregistry.ScopeMapProperties{
			Type: to.Ptr("IsUserDefined"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/delete")},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, scopeMapName string, scopeMapCreateParameters armcontainerregistry.ScopeMap, options *armcontainerregistry.ScopeMapsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.ScopeMapsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleScopeMapName, scopeMapName)
		testsuite.Require().Equal(exampleScopeMapCreateParameters, scopeMapCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ScopeMapsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ScopeMapsClientCreateResponse{ScopeMap: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myScopeMap", armcontainerregistry.ScopeMap{
		Properties: &armcontainerregistry.ScopeMapProperties{
			Description: to.Ptr("Developer Scopes"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/delete")},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ScopeMap))
}

func (testsuite *FakeTestSuite) TestScopeMaps_Delete() {
	ctx := context.Background()
	fakeServer := fake.ScopeMapsServer{}
	client, err := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewScopeMapsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleScopeMapName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleScopeMapName = "myScopeMap"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, scopeMapName string, options *armcontainerregistry.ScopeMapsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.ScopeMapsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleScopeMapName, scopeMapName)
		resp = azfake.PollerResponder[armcontainerregistry.ScopeMapsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ScopeMapsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myScopeMap", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapDelete.json")
}

func (testsuite *FakeTestSuite) TestScopeMaps_Update() {
	ctx := context.Background()
	fakeServer := fake.ScopeMapsServer{}
	client, err := armcontainerregistry.NewScopeMapsClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewScopeMapsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ScopeMapUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleScopeMapName string
	var exampleScopeMapUpdateParameters armcontainerregistry.ScopeMapUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleScopeMapName = "myScopeMap"
	exampleScopeMapUpdateParameters = armcontainerregistry.ScopeMapUpdateParameters{
		Properties: &armcontainerregistry.ScopeMapPropertiesUpdateParameters{
			Description: to.Ptr("Developer Scopes"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/contentRead")},
		},
	}

	exampleRes := armcontainerregistry.ScopeMap{
		Name: to.Ptr("myScopeMap"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/scopeMaps"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
		Properties: &armcontainerregistry.ScopeMapProperties{
			Type: to.Ptr("IsUserDefined"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/contentRead")},
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, scopeMapName string, scopeMapUpdateParameters armcontainerregistry.ScopeMapUpdateParameters, options *armcontainerregistry.ScopeMapsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.ScopeMapsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleScopeMapName, scopeMapName)
		testsuite.Require().Equal(exampleScopeMapUpdateParameters, scopeMapUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.ScopeMapsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.ScopeMapsClientUpdateResponse{ScopeMap: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myScopeMap", armcontainerregistry.ScopeMapUpdateParameters{
		Properties: &armcontainerregistry.ScopeMapPropertiesUpdateParameters{
			Description: to.Ptr("Developer Scopes"),
			Actions: []*string{
				to.Ptr("repositories/myrepository/contentWrite"),
				to.Ptr("repositories/myrepository/contentRead")},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/ScopeMapUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ScopeMap))
}

func (testsuite *FakeTestSuite) TestTokens_List() {
	ctx := context.Background()
	fakeServer := fake.TokensServer{}
	client, err := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTokensServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.TokenListResult{
		Value: []*armcontainerregistry.Token{
			{
				Name: to.Ptr("myToken"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
				Properties: &armcontainerregistry.TokenProperties{
					CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
					Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.TokensClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.TokensClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.TokensClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.TokensClientListResponse{TokenListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TokenListResult))
	}
}

func (testsuite *FakeTestSuite) TestTokens_Get() {
	ctx := context.Background()
	fakeServer := fake.TokensServer{}
	client, err := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTokensServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTokenName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTokenName = "myToken"

	exampleRes := armcontainerregistry.Token{
		Name: to.Ptr("myToken"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		Properties: &armcontainerregistry.TokenProperties{
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, tokenName string, options *armcontainerregistry.TokensClientGetOptions) (resp azfake.Responder[armcontainerregistry.TokensClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTokenName, tokenName)
		resp = azfake.Responder[armcontainerregistry.TokensClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.TokensClientGetResponse{Token: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myToken", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Token))
}

func (testsuite *FakeTestSuite) TestTokens_Create() {
	ctx := context.Background()
	fakeServer := fake.TokensServer{}
	client, err := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTokensServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTokenName string
	var exampleTokenCreateParameters armcontainerregistry.Token
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTokenName = "myToken"
	exampleTokenCreateParameters = armcontainerregistry.Token{
		Properties: &armcontainerregistry.TokenProperties{
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					}},
			},
			ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Status:     to.Ptr(armcontainerregistry.TokenStatusDisabled),
		},
	}

	exampleRes := armcontainerregistry.Token{
		Name: to.Ptr("myToken"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		Properties: &armcontainerregistry.TokenProperties{
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:       to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						Expiry:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-04T15:32:48.0707808Z"); return t }()),
						Thumbprint: to.Ptr("feeb79a888bf1415f8e17c4965a2a5bb5c8a2ff7"),
					}},
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Status:            to.Ptr(armcontainerregistry.TokenStatusDisabled),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, tokenName string, tokenCreateParameters armcontainerregistry.Token, options *armcontainerregistry.TokensClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TokensClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTokenName, tokenName)
		testsuite.Require().Equal(exampleTokenCreateParameters, tokenCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TokensClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TokensClientCreateResponse{Token: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myToken", armcontainerregistry.Token{
		Properties: &armcontainerregistry.TokenProperties{
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					}},
			},
			ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap"),
			Status:     to.Ptr(armcontainerregistry.TokenStatusDisabled),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Token))
}

func (testsuite *FakeTestSuite) TestTokens_Delete() {
	ctx := context.Background()
	fakeServer := fake.TokensServer{}
	client, err := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTokensServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTokenName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTokenName = "myToken"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, tokenName string, options *armcontainerregistry.TokensClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.TokensClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTokenName, tokenName)
		resp = azfake.PollerResponder[armcontainerregistry.TokensClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TokensClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myToken", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenDelete.json")
}

func (testsuite *FakeTestSuite) TestTokens_Update() {
	ctx := context.Background()
	fakeServer := fake.TokensServer{}
	client, err := armcontainerregistry.NewTokensClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTokensServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TokenUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTokenName string
	var exampleTokenUpdateParameters armcontainerregistry.TokenUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTokenName = "myToken"
	exampleTokenUpdateParameters = armcontainerregistry.TokenUpdateParameters{
		Properties: &armcontainerregistry.TokenUpdateProperties{
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					}},
			},
			ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
		},
	}

	exampleRes := armcontainerregistry.Token{
		Name: to.Ptr("myToken"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/tokens"),
		ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		Properties: &armcontainerregistry.TokenProperties{
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					}},
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			ScopeMapID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
			Status:            to.Ptr(armcontainerregistry.TokenStatusEnabled),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, tokenName string, tokenUpdateParameters armcontainerregistry.TokenUpdateParameters, options *armcontainerregistry.TokensClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TokensClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTokenName, tokenName)
		testsuite.Require().Equal(exampleTokenUpdateParameters, tokenUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TokensClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TokensClientUpdateResponse{Token: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myToken", armcontainerregistry.TokenUpdateParameters{
		Properties: &armcontainerregistry.TokenUpdateProperties{
			Credentials: &armcontainerregistry.TokenCredentialsProperties{
				Certificates: []*armcontainerregistry.TokenCertificate{
					{
						Name:                  to.Ptr(armcontainerregistry.TokenCertificateNameCertificate1),
						EncodedPemCertificate: to.Ptr("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					}},
			},
			ScopeMapID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/TokenUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Token))
}

func (testsuite *FakeTestSuite) TestWebhooks_List() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookList"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.WebhookListResult{
		Value: []*armcontainerregistry.Webhook{
			{
				Name:     to.Ptr("myWebhook"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key": to.Ptr("value"),
				},
				Properties: &armcontainerregistry.WebhookProperties{
					Actions: []*armcontainerregistry.WebhookAction{
						to.Ptr(armcontainerregistry.WebhookActionPush)},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Scope:             to.Ptr("myRepository"),
					Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.WebhooksClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.WebhooksClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.WebhooksClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.WebhooksClientListResponse{WebhookListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.WebhookListResult))
	}
}

func (testsuite *FakeTestSuite) TestWebhooks_Get() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookGet"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"

	exampleRes := armcontainerregistry.Webhook{
		Name:     to.Ptr("myWebhook"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.WebhookProperties{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Scope:             to.Ptr("myRepository"),
			Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, options *armcontainerregistry.WebhooksClientGetOptions) (resp azfake.Responder[armcontainerregistry.WebhooksClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		resp = azfake.Responder[armcontainerregistry.WebhooksClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.WebhooksClientGetResponse{Webhook: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myWebhook", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Webhook))
}

func (testsuite *FakeTestSuite) TestWebhooks_Create() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookCreate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	var exampleWebhookCreateParameters armcontainerregistry.WebhookCreateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"
	exampleWebhookCreateParameters = armcontainerregistry.WebhookCreateParameters{
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.WebhookPropertiesCreateParameters{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			CustomHeaders: map[string]*string{
				"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
			},
			Scope:      to.Ptr("myRepository"),
			ServiceURI: to.Ptr("http://myservice.com"),
			Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Webhook{
		Name:     to.Ptr("myWebhook"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.WebhookProperties{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Scope:             to.Ptr("myRepository"),
			Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, webhookCreateParameters armcontainerregistry.WebhookCreateParameters, options *armcontainerregistry.WebhooksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.WebhooksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		testsuite.Require().Equal(exampleWebhookCreateParameters, webhookCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.WebhooksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.WebhooksClientCreateResponse{Webhook: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myWebhook", armcontainerregistry.WebhookCreateParameters{
		Location: to.Ptr("westus"),
		Properties: &armcontainerregistry.WebhookPropertiesCreateParameters{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			CustomHeaders: map[string]*string{
				"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
			},
			Scope:      to.Ptr("myRepository"),
			ServiceURI: to.Ptr("http://myservice.com"),
			Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Webhook))
}

func (testsuite *FakeTestSuite) TestWebhooks_Delete() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookDelete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, options *armcontainerregistry.WebhooksClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.WebhooksClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		resp = azfake.PollerResponder[armcontainerregistry.WebhooksClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.WebhooksClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myWebhook", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookDelete.json")
}

func (testsuite *FakeTestSuite) TestWebhooks_Update() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookUpdate"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	var exampleWebhookUpdateParameters armcontainerregistry.WebhookUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"
	exampleWebhookUpdateParameters = armcontainerregistry.WebhookUpdateParameters{
		Properties: &armcontainerregistry.WebhookPropertiesUpdateParameters{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			CustomHeaders: map[string]*string{
				"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
			},
			Scope:      to.Ptr("myRepository"),
			ServiceURI: to.Ptr("http://myservice.com"),
			Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Webhook{
		Name:     to.Ptr("myWebhook"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/webhooks"),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/webhooks/myWebhook"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.WebhookProperties{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Scope:             to.Ptr("myRepository"),
			Status:            to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, webhookUpdateParameters armcontainerregistry.WebhookUpdateParameters, options *armcontainerregistry.WebhooksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.WebhooksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		testsuite.Require().Equal(exampleWebhookUpdateParameters, webhookUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.WebhooksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.WebhooksClientUpdateResponse{Webhook: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myWebhook", armcontainerregistry.WebhookUpdateParameters{
		Properties: &armcontainerregistry.WebhookPropertiesUpdateParameters{
			Actions: []*armcontainerregistry.WebhookAction{
				to.Ptr(armcontainerregistry.WebhookActionPush)},
			CustomHeaders: map[string]*string{
				"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
			},
			Scope:      to.Ptr("myRepository"),
			ServiceURI: to.Ptr("http://myservice.com"),
			Status:     to.Ptr(armcontainerregistry.WebhookStatusEnabled),
		},
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Webhook))
}

func (testsuite *FakeTestSuite) TestWebhooks_Ping() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookPing.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookPing"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"

	exampleRes := armcontainerregistry.EventInfo{
		ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	}

	fakeServer.Ping = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, options *armcontainerregistry.WebhooksClientPingOptions) (resp azfake.Responder[armcontainerregistry.WebhooksClientPingResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		resp = azfake.Responder[armcontainerregistry.WebhooksClientPingResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.WebhooksClientPingResponse{EventInfo: exampleRes}, nil)
		return
	}
	res, err := client.Ping(ctx, "myResourceGroup", "myRegistry", "myWebhook", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookPing.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.EventInfo))
}

func (testsuite *FakeTestSuite) TestWebhooks_ListEvents() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookListEvents.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookListEvents"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"

	exampleRes := armcontainerregistry.EventListResult{
		Value: []*armcontainerregistry.Event{
			{
				ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				EventRequestMessage: &armcontainerregistry.EventRequestMessage{
					Method: to.Ptr("POST"),
					Content: &armcontainerregistry.EventContent{
						Action: to.Ptr("push"),
						Actor:  &armcontainerregistry.Actor{},
						ID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						Source: &armcontainerregistry.Source{
							Addr:       to.Ptr("xtal.local:5000"),
							InstanceID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						},
						Target: &armcontainerregistry.Target{
							Digest:     to.Ptr("sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf"),
							Length:     to.Ptr[int64](708),
							MediaType:  to.Ptr("application/vnd.docker.distribution.manifest.v2+json"),
							Repository: to.Ptr("hello-world"),
							Size:       to.Ptr[int64](708),
							Tag:        to.Ptr("latest"),
							URL:        to.Ptr("http://192.168.100.227:5000/v2/hello-world/manifests/sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf"),
						},
						Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-01T23:14:37.0707808Z"); return t }()),
						Request: &armcontainerregistry.Request{
							Method:    to.Ptr("GET"),
							Addr:      to.Ptr("192.168.64.11:42961"),
							Host:      to.Ptr("192.168.100.227:5000"),
							ID:        to.Ptr("00000000-0000-0000-0000-000000000000"),
							Useragent: to.Ptr("curl/7.38.0"),
						},
					},
					Headers: map[string]*string{
						"Authorization":  to.Ptr("******"),
						"Content-Length": to.Ptr("719"),
						"Content-Type":   to.Ptr("application/json"),
					},
					RequestURI: to.Ptr("http://myservice.com"),
					Version:    to.Ptr("1.1"),
				},
				EventResponseMessage: &armcontainerregistry.EventResponseMessage{
					Headers: map[string]*string{
						"Content-Length": to.Ptr("0"),
					},
					StatusCode: to.Ptr("200"),
					Version:    to.Ptr("1.1"),
				},
			}},
	}

	fakeServer.NewListEventsPager = func(resourceGroupName string, registryName string, webhookName string, options *armcontainerregistry.WebhooksClientListEventsOptions) (resp azfake.PagerResponder[armcontainerregistry.WebhooksClientListEventsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		resp = azfake.PagerResponder[armcontainerregistry.WebhooksClientListEventsResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.WebhooksClientListEventsResponse{EventListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListEventsPager("myResourceGroup", "myRegistry", "myWebhook", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookListEvents.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.EventListResult))
	}
}

func (testsuite *FakeTestSuite) TestWebhooks_GetCallbackConfig() {
	ctx := context.Background()
	fakeServer := fake.WebhooksServer{}
	client, err := armcontainerregistry.NewWebhooksClient("00000000-0000-0000-0000-000000000000", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewWebhooksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookGetCallbackConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WebhookGetCallbackConfig"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleWebhookName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleWebhookName = "myWebhook"

	exampleRes := armcontainerregistry.CallbackConfig{
		CustomHeaders: map[string]*string{
			"Authorization": to.Ptr("Basic 000000000000000000000000000000000000000000000000000"),
		},
		ServiceURI: to.Ptr("http://myservice.com"),
	}

	fakeServer.GetCallbackConfig = func(ctx context.Context, resourceGroupName string, registryName string, webhookName string, options *armcontainerregistry.WebhooksClientGetCallbackConfigOptions) (resp azfake.Responder[armcontainerregistry.WebhooksClientGetCallbackConfigResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleWebhookName, webhookName)
		resp = azfake.Responder[armcontainerregistry.WebhooksClientGetCallbackConfigResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.WebhooksClientGetCallbackConfigResponse{CallbackConfig: exampleRes}, nil)
		return
	}
	res, err := client.GetCallbackConfig(ctx, "myResourceGroup", "myRegistry", "myWebhook", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2023-01-01-preview/examples/WebhookGetCallbackConfig.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CallbackConfig))
}

func (testsuite *FakeTestSuite) TestAgentPools_Get() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Get"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleAgentPoolName = "myAgentPool"

	exampleRes := armcontainerregistry.AgentPool{
		Name:     to.Ptr("myAgentPool"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
		ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
		Location: to.Ptr("WESTUS"),
		Properties: &armcontainerregistry.AgentPoolProperties{
			Count:             to.Ptr[int32](1),
			OS:                to.Ptr(armcontainerregistry.OSLinux),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Tier:              to.Ptr("S1"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, agentPoolName string, options *armcontainerregistry.AgentPoolsClientGetOptions) (resp azfake.Responder[armcontainerregistry.AgentPoolsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.Responder[armcontainerregistry.AgentPoolsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.AgentPoolsClientGetResponse{AgentPool: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myAgentPool", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))
}

func (testsuite *FakeTestSuite) TestAgentPools_Create() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Create"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleAgentPoolName string
	var exampleAgentPool armcontainerregistry.AgentPool
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleAgentPoolName = "myAgentPool"
	exampleAgentPool = armcontainerregistry.AgentPool{
		Location: to.Ptr("WESTUS"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.AgentPoolProperties{
			Count: to.Ptr[int32](1),
			OS:    to.Ptr(armcontainerregistry.OSLinux),
			Tier:  to.Ptr("S1"),
		},
	}

	exampleRes := armcontainerregistry.AgentPool{
		Name:     to.Ptr("myAgentPool"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
		ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
		Location: to.Ptr("WESTUS"),
		Properties: &armcontainerregistry.AgentPoolProperties{
			Count:             to.Ptr[int32](1),
			OS:                to.Ptr(armcontainerregistry.OSLinux),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Tier:              to.Ptr("S1"),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, agentPoolName string, agentPool armcontainerregistry.AgentPool, options *armcontainerregistry.AgentPoolsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.AgentPoolsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleAgentPool, agentPool)
		resp = azfake.PollerResponder[armcontainerregistry.AgentPoolsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.AgentPoolsClientCreateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myAgentPool", armcontainerregistry.AgentPool{
		Location: to.Ptr("WESTUS"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.AgentPoolProperties{
			Count: to.Ptr[int32](1),
			OS:    to.Ptr(armcontainerregistry.OSLinux),
			Tier:  to.Ptr("S1"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))
}

func (testsuite *FakeTestSuite) TestAgentPools_Delete() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Delete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleAgentPoolName = "myAgentPool"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, agentPoolName string, options *armcontainerregistry.AgentPoolsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.AgentPoolsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.PollerResponder[armcontainerregistry.AgentPoolsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.AgentPoolsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myAgentPool", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsDelete.json")
}

func (testsuite *FakeTestSuite) TestAgentPools_Update() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_Update"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleAgentPoolName string
	var exampleUpdateParameters armcontainerregistry.AgentPoolUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleAgentPoolName = "myAgentPool"
	exampleUpdateParameters = armcontainerregistry.AgentPoolUpdateParameters{
		Properties: &armcontainerregistry.AgentPoolPropertiesUpdateParameters{
			Count: to.Ptr[int32](1),
		},
	}

	exampleRes := armcontainerregistry.AgentPool{
		Name:     to.Ptr("myAgentPool"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
		ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
		Location: to.Ptr("WESTUS"),
		Properties: &armcontainerregistry.AgentPoolProperties{
			Count:             to.Ptr[int32](1),
			OS:                to.Ptr(armcontainerregistry.OSLinux),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Tier:              to.Ptr("S1"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, agentPoolName string, updateParameters armcontainerregistry.AgentPoolUpdateParameters, options *armcontainerregistry.AgentPoolsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.AgentPoolsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		testsuite.Require().Equal(exampleUpdateParameters, updateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.AgentPoolsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.AgentPoolsClientUpdateResponse{AgentPool: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myAgentPool", armcontainerregistry.AgentPoolUpdateParameters{
		Properties: &armcontainerregistry.AgentPoolPropertiesUpdateParameters{
			Count: to.Ptr[int32](1),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPool))
}

func (testsuite *FakeTestSuite) TestAgentPools_List() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_List"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.AgentPoolListResult{
		Value: []*armcontainerregistry.AgentPool{
			{
				Name:     to.Ptr("myAgentPool"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries/agentPools"),
				ID:       to.Ptr("/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourceGroups/huanwudfwestgroup/providers/Microsoft.ContainerRegistry/registries/huanglidfwest01/agentPools/testagent26"),
				Location: to.Ptr("WESTUS"),
				Properties: &armcontainerregistry.AgentPoolProperties{
					Count:             to.Ptr[int32](1),
					OS:                to.Ptr(armcontainerregistry.OSLinux),
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Tier:              to.Ptr("S1"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.AgentPoolsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.AgentPoolsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.AgentPoolsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.AgentPoolsClientListResponse{AgentPoolListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AgentPoolListResult))
	}
}

func (testsuite *FakeTestSuite) TestAgentPools_GetQueueStatus() {
	ctx := context.Background()
	fakeServer := fake.AgentPoolsServer{}
	client, err := armcontainerregistry.NewAgentPoolsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAgentPoolsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGetQueueStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AgentPools_GetQueueStatus"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleAgentPoolName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleAgentPoolName = "myAgentPool"

	exampleRes := armcontainerregistry.AgentPoolQueueStatus{
		Count: to.Ptr[int32](10),
	}

	fakeServer.GetQueueStatus = func(ctx context.Context, resourceGroupName string, registryName string, agentPoolName string, options *armcontainerregistry.AgentPoolsClientGetQueueStatusOptions) (resp azfake.Responder[armcontainerregistry.AgentPoolsClientGetQueueStatusResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleAgentPoolName, agentPoolName)
		resp = azfake.Responder[armcontainerregistry.AgentPoolsClientGetQueueStatusResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.AgentPoolsClientGetQueueStatusResponse{AgentPoolQueueStatus: exampleRes}, nil)
		return
	}
	res, err := client.GetQueueStatus(ctx, "myResourceGroup", "myRegistry", "myAgentPool", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/AgentPoolsGetQueueStatus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AgentPoolQueueStatus))
}

func (testsuite *FakeTestSuite) TestRuns_List() {
	ctx := context.Background()
	fakeServer := fake.RunsServer{}
	client, err := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_List"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.RunListResult{
		Value: []*armcontainerregistry.Run{
			{
				Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
				Properties: &armcontainerregistry.RunProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
					FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
					ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
						ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
						Images: []*armcontainerregistry.ImageDescriptor{
							{
								Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
								Registry:   to.Ptr("registry.hub.docker.com"),
								Repository: to.Ptr("mybaseimage"),
								Tag:        to.Ptr("latest"),
							}},
						Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
					},
					IsArchiveEnabled: to.Ptr(true),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
					LogArtifact: &armcontainerregistry.ImageDescriptor{
						Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
						Registry:   to.Ptr("myregistry"),
						Repository: to.Ptr("acr/tasks"),
						Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
					},
					OutputImages: []*armcontainerregistry.ImageDescriptor{
						{
							Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
							Registry:   to.Ptr("myregistry.azurecr.io"),
							Repository: to.Ptr("myimage"),
							Tag:        to.Ptr("latest"),
						}},
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
					RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
					StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
					Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
					Task:              to.Ptr("myTask"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.RunsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.RunsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.RunsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.RunsClientListResponse{RunListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", &armcontainerregistry.RunsClientListOptions{Filter: to.Ptr(""),
		Top: to.Ptr[int32](10),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RunListResult))
	}
}

func (testsuite *FakeTestSuite) TestRuns_Get() {
	ctx := context.Background()
	fakeServer := fake.RunsServer{}
	client, err := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Get"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRunID string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunID = "0accec26-d6de-4757-8e74-d080f38eaaab"

	exampleRes := armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
			FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
			ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
				ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
				Images: []*armcontainerregistry.ImageDescriptor{
					{
						Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
						Registry:   to.Ptr("registry.hub.docker.com"),
						Repository: to.Ptr("mybaseimage"),
						Tag:        to.Ptr("latest"),
					}},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
			},
			IsArchiveEnabled: to.Ptr(true),
			LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			LogArtifact: &armcontainerregistry.ImageDescriptor{
				Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
				Registry:   to.Ptr("myregistry"),
				Repository: to.Ptr("acr/tasks"),
				Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
			},
			OutputImages: []*armcontainerregistry.ImageDescriptor{
				{
					Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
					Registry:   to.Ptr("myregistry.azurecr.io"),
					Repository: to.Ptr("myimage"),
					Tag:        to.Ptr("latest"),
				}},
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
			StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			Task:              to.Ptr("myTask"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, runID string, options *armcontainerregistry.RunsClientGetOptions) (resp azfake.Responder[armcontainerregistry.RunsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunID, runID)
		resp = azfake.Responder[armcontainerregistry.RunsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.RunsClientGetResponse{Run: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "0accec26-d6de-4757-8e74-d080f38eaaab", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))
}

func (testsuite *FakeTestSuite) TestRuns_Update() {
	ctx := context.Background()
	fakeServer := fake.RunsServer{}
	client, err := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Update"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRunID string
	var exampleRunUpdateParameters armcontainerregistry.RunUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunID = "0accec26-d6de-4757-8e74-d080f38eaaab"
	exampleRunUpdateParameters = armcontainerregistry.RunUpdateParameters{
		IsArchiveEnabled: to.Ptr(true),
	}

	exampleRes := armcontainerregistry.Run{
		Name: to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/0accec26-d6de-4757-8e74-d080f38eaaab"),
		Properties: &armcontainerregistry.RunProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
			FinishTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:13:51.618Z"); return t }()),
			ImageUpdateTrigger: &armcontainerregistry.ImageUpdateTrigger{
				ID: to.Ptr("c0c43143-da5d-41ef-b9e1-e7d749272e88"),
				Images: []*armcontainerregistry.ImageDescriptor{
					{
						Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
						Registry:   to.Ptr("registry.hub.docker.com"),
						Repository: to.Ptr("mybaseimage"),
						Tag:        to.Ptr("latest"),
					}},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.618Z"); return t }()),
			},
			IsArchiveEnabled: to.Ptr(true),
			LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:13:51.617Z"); return t }()),
			LogArtifact: &armcontainerregistry.ImageDescriptor{
				Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
				Registry:   to.Ptr("myregistry"),
				Repository: to.Ptr("acr/tasks"),
				Tag:        to.Ptr("mytask-0accec26-d6de-4757-8e74-d080f38eaaab-log"),
			},
			OutputImages: []*armcontainerregistry.ImageDescriptor{
				{
					Digest:     to.Ptr("sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0"),
					Registry:   to.Ptr("myregistry.azurecr.io"),
					Repository: to.Ptr("myimage"),
					Tag:        to.Ptr("latest"),
				}},
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunID:             to.Ptr("0accec26-d6de-4757-8e74-d080f38eaaab"),
			RunType:           to.Ptr(armcontainerregistry.RunTypeAutoBuild),
			StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T05:50:51.618Z"); return t }()),
			Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
			Task:              to.Ptr("myTask"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, runID string, runUpdateParameters armcontainerregistry.RunUpdateParameters, options *armcontainerregistry.RunsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.RunsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunID, runID)
		testsuite.Require().Equal(exampleRunUpdateParameters, runUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.RunsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RunsClientUpdateResponse{Run: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "0accec26-d6de-4757-8e74-d080f38eaaab", armcontainerregistry.RunUpdateParameters{
		IsArchiveEnabled: to.Ptr(true),
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Run))
}

func (testsuite *FakeTestSuite) TestRuns_Cancel() {
	ctx := context.Background()
	fakeServer := fake.RunsServer{}
	client, err := armcontainerregistry.NewRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Runs_Cancel"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleRunID string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleRunID = "0accec26-d6de-4757-8e74-d080f38eaaab"

	fakeServer.BeginCancel = func(ctx context.Context, resourceGroupName string, registryName string, runID string, options *armcontainerregistry.RunsClientBeginCancelOptions) (resp azfake.PollerResponder[armcontainerregistry.RunsClientCancelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleRunID, runID)
		resp = azfake.PollerResponder[armcontainerregistry.RunsClientCancelResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.RunsClientCancelResponse{}, nil)
		return
	}
	poller, err := client.BeginCancel(ctx, "myResourceGroup", "myRegistry", "0accec26-d6de-4757-8e74-d080f38eaaab", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/RunsCancel.json")
}

func (testsuite *FakeTestSuite) TestTaskRuns_Get() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Get"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskRunName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskRunName = "myRun"

	exampleRes := armcontainerregistry.TaskRun{
		Name: to.Ptr("myRun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
		ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
		Properties: &armcontainerregistry.TaskRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
			RunResult: &armcontainerregistry.Run{
				Name: to.Ptr("yd5"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
				ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
				Properties: &armcontainerregistry.RunProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
					FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29.8792157+00:00"); return t }()),
					IsArchiveEnabled: to.Ptr(true),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29+00:00"); return t }()),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunID:             to.Ptr("yd5"),
					RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
					StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:22.1348714+00:00"); return t }()),
					Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, taskRunName string, options *armcontainerregistry.TaskRunsClientGetOptions) (resp azfake.Responder[armcontainerregistry.TaskRunsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskRunName, taskRunName)
		resp = azfake.Responder[armcontainerregistry.TaskRunsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.TaskRunsClientGetResponse{TaskRun: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myRun", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TaskRun))
}

func (testsuite *FakeTestSuite) TestTaskRuns_Create() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Create"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskRunName string
	var exampleTaskRun armcontainerregistry.TaskRun
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskRunName = "myRun"
	exampleTaskRun = armcontainerregistry.TaskRun{
		Properties: &armcontainerregistry.TaskRunProperties{
			ForceUpdateTag: to.Ptr("test"),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
		},
	}

	exampleRes := armcontainerregistry.TaskRun{
		Name: to.Ptr("myrun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
		Properties: &armcontainerregistry.TaskRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
			RunResult: &armcontainerregistry.Run{
				Name: to.Ptr("yd5"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
				Properties: &armcontainerregistry.RunProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
					IsArchiveEnabled: to.Ptr(true),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21+00:00"); return t }()),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunID:             to.Ptr("yd5"),
					RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
					Status:            to.Ptr(armcontainerregistry.RunStatusQueued),
				},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskRunName string, taskRun armcontainerregistry.TaskRun, options *armcontainerregistry.TaskRunsClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TaskRunsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskRunName, taskRunName)
		testsuite.Require().Equal(exampleTaskRun, taskRun)
		resp = azfake.PollerResponder[armcontainerregistry.TaskRunsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TaskRunsClientCreateResponse{TaskRun: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "myRun", armcontainerregistry.TaskRun{
		Properties: &armcontainerregistry.TaskRunProperties{
			ForceUpdateTag: to.Ptr("test"),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TaskRun))
}

func (testsuite *FakeTestSuite) TestTaskRuns_Delete() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Delete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskRunName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskRunName = "myRun"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, taskRunName string, options *armcontainerregistry.TaskRunsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.TaskRunsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskRunName, taskRunName)
		resp = azfake.PollerResponder[armcontainerregistry.TaskRunsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TaskRunsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myRun", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsDelete.json")
}

func (testsuite *FakeTestSuite) TestTaskRuns_Update() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_Update"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskRunName string
	var exampleUpdateParameters armcontainerregistry.TaskRunUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskRunName = "myRun"
	exampleUpdateParameters = armcontainerregistry.TaskRunUpdateParameters{
		Properties: &armcontainerregistry.TaskRunPropertiesUpdateParameters{
			ForceUpdateTag: to.Ptr("test"),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
		},
	}

	exampleRes := armcontainerregistry.TaskRun{
		Name: to.Ptr("mytestrun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
		ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
		Properties: &armcontainerregistry.TaskRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
			RunResult: &armcontainerregistry.Run{
				Name: to.Ptr("yd6"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd6"),
				Properties: &armcontainerregistry.RunProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:31:34.1184031+00:00"); return t }()),
					IsArchiveEnabled: to.Ptr(true),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:31:34+00:00"); return t }()),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunID:             to.Ptr("yd6"),
					RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
					Status:            to.Ptr(armcontainerregistry.RunStatusQueued),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskRunName string, updateParameters armcontainerregistry.TaskRunUpdateParameters, options *armcontainerregistry.TaskRunsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TaskRunsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskRunName, taskRunName)
		testsuite.Require().Equal(exampleUpdateParameters, updateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TaskRunsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TaskRunsClientUpdateResponse{TaskRun: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myRun", armcontainerregistry.TaskRunUpdateParameters{
		Properties: &armcontainerregistry.TaskRunPropertiesUpdateParameters{
			ForceUpdateTag: to.Ptr("test"),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TaskRun))
}

func (testsuite *FakeTestSuite) TestTaskRuns_GetDetails() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGetDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_GetDetails"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskRunName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskRunName = "myRun"

	exampleRes := armcontainerregistry.TaskRun{
		Name: to.Ptr("myRun"),
		Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
		ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
		Properties: &armcontainerregistry.TaskRunProperties{
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
				Type:                 to.Ptr("EncodedTaskRunRequest"),
				IsArchiveEnabled:     to.Ptr(true),
				Credentials:          &armcontainerregistry.Credentials{},
				EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
				EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
				Platform: &armcontainerregistry.PlatformProperties{
					Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
					OS:           to.Ptr(armcontainerregistry.OSLinux),
				},
				Values: []*armcontainerregistry.SetValue{},
			},
			RunResult: &armcontainerregistry.Run{
				Name: to.Ptr("yd5"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
				ID:   to.Ptr("/subscriptions/3647315e-0c5b-4ce4-8739-b071e144b2c9/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd5"),
				Properties: &armcontainerregistry.RunProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:21.9261521+00:00"); return t }()),
					FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29.8792157+00:00"); return t }()),
					IsArchiveEnabled: to.Ptr(true),
					LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:29+00:00"); return t }()),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunID:             to.Ptr("yd5"),
					RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
					StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-06T17:23:22.1348714+00:00"); return t }()),
					Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
				},
			},
		},
	}

	fakeServer.GetDetails = func(ctx context.Context, resourceGroupName string, registryName string, taskRunName string, options *armcontainerregistry.TaskRunsClientGetDetailsOptions) (resp azfake.Responder[armcontainerregistry.TaskRunsClientGetDetailsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskRunName, taskRunName)
		resp = azfake.Responder[armcontainerregistry.TaskRunsClientGetDetailsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.TaskRunsClientGetDetailsResponse{TaskRun: exampleRes}, nil)
		return
	}
	res, err := client.GetDetails(ctx, "myResourceGroup", "myRegistry", "myRun", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsGetDetails.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.TaskRun))
}

func (testsuite *FakeTestSuite) TestTaskRuns_List() {
	ctx := context.Background()
	fakeServer := fake.TaskRunsServer{}
	client, err := armcontainerregistry.NewTaskRunsClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTaskRunsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TaskRuns_List"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.TaskRunListResult{
		Value: []*armcontainerregistry.TaskRun{
			{
				Name: to.Ptr("mytestrun"),
				Type: to.Ptr("Microsoft.ContainerRegistry/registries/TaskRuns"),
				ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/taskRuns/myRun"),
				Properties: &armcontainerregistry.TaskRunProperties{
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					RunRequest: &armcontainerregistry.EncodedTaskRunRequest{
						Type:                 to.Ptr("EncodedTaskRunRequest"),
						IsArchiveEnabled:     to.Ptr(true),
						Credentials:          &armcontainerregistry.Credentials{},
						EncodedTaskContent:   to.Ptr("c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K"),
						EncodedValuesContent: to.Ptr("Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg=="),
						Platform: &armcontainerregistry.PlatformProperties{
							Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
							OS:           to.Ptr(armcontainerregistry.OSLinux),
						},
						Values: []*armcontainerregistry.SetValue{},
					},
					RunResult: &armcontainerregistry.Run{
						Name: to.Ptr("yd4"),
						Type: to.Ptr("Microsoft.ContainerRegistry/registries/runs"),
						ID:   to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/runs/yd4"),
						Properties: &armcontainerregistry.RunProperties{
							AgentConfiguration: &armcontainerregistry.AgentProperties{
								CPU: to.Ptr[int32](2),
							},
							CreateTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:29.2278794+00:00"); return t }()),
							FinishTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:37.0349516+00:00"); return t }()),
							IsArchiveEnabled: to.Ptr(true),
							LastUpdatedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:37+00:00"); return t }()),
							Platform: &armcontainerregistry.PlatformProperties{
								Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
								OS:           to.Ptr(armcontainerregistry.OSLinux),
							},
							ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
							RunID:             to.Ptr("yd4"),
							RunType:           to.Ptr(armcontainerregistry.RunTypeQuickRun),
							StartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-04T17:15:29.4589616+00:00"); return t }()),
							Status:            to.Ptr(armcontainerregistry.RunStatusSucceeded),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.TaskRunsClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.TaskRunsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.TaskRunsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.TaskRunsClientListResponse{TaskRunListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TaskRunListResult))
	}
}

func (testsuite *FakeTestSuite) TestTasks_List() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_List"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"

	exampleRes := armcontainerregistry.TaskListResult{
		Value: []*armcontainerregistry.Task{
			{
				Name:     to.Ptr("myTask"),
				Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
				ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"testkey": to.Ptr("value"),
				},
				Identity: &armcontainerregistry.IdentityProperties{
					Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
					TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
				},
				Properties: &armcontainerregistry.TaskProperties{
					AgentConfiguration: &armcontainerregistry.AgentProperties{
						CPU: to.Ptr[int32](2),
					},
					CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
					Credentials: &armcontainerregistry.Credentials{
						CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
							"myRegistry.azure.io": nil,
						},
					},
					IsSystemTask: to.Ptr(false),
					Platform: &armcontainerregistry.PlatformProperties{
						Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
						OS:           to.Ptr(armcontainerregistry.OSLinux),
					},
					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
					Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
					Step: &armcontainerregistry.DockerBuildStep{
						Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
						ContextPath: to.Ptr("src"),
						Arguments: []*armcontainerregistry.Argument{
							{
								Name:     to.Ptr("mytestargument"),
								IsSecret: to.Ptr(false),
								Value:    to.Ptr("mytestvalue"),
							}},
						DockerFilePath: to.Ptr("src/DockerFile"),
						ImageNames: []*string{
							to.Ptr("azurerest:testtag")},
						IsPushEnabled: to.Ptr(true),
						NoCache:       to.Ptr(false),
					},
					Trigger: &armcontainerregistry.TriggerProperties{
						BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
							Name:                     to.Ptr("myBaseImageTrigger"),
							BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
							Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
							UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
						},
						SourceTriggers: []*armcontainerregistry.SourceTrigger{
							{
								Name: to.Ptr("mySourceTrigger"),
								SourceRepository: &armcontainerregistry.SourceProperties{
									Branch:            to.Ptr("master"),
									RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
									SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
								},
								SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
									to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
								Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
							}},
						TimerTriggers: []*armcontainerregistry.TimerTrigger{
							{
								Name:     to.Ptr("myTimerTrigger"),
								Schedule: to.Ptr("30 9 * * 1-5"),
								Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
							}},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, registryName string, options *armcontainerregistry.TasksClientListOptions) (resp azfake.PagerResponder[armcontainerregistry.TasksClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		resp = azfake.PagerResponder[armcontainerregistry.TasksClientListResponse]{}
		resp.AddPage(http.StatusOK, armcontainerregistry.TasksClientListResponse{TaskListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksList.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.TaskListResult))
	}
}

func (testsuite *FakeTestSuite) TestTasks_Get() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Get"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"

	exampleRes := armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azure.io": nil,
				},
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, options *armcontainerregistry.TasksClientGetOptions) (resp azfake.Responder[armcontainerregistry.TasksClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		resp = azfake.Responder[armcontainerregistry.TasksClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.TasksClientGetResponse{Task: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, "myResourceGroup", "myRegistry", "myTask", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))
}

func (testsuite *FakeTestSuite) TestTasks_Create() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskName string
	var exampleTaskCreateParameters armcontainerregistry.Task
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "mytTask"
	exampleTaskCreateParameters = armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}

	exampleRes := armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			IsSystemTask: to.Ptr(false),
			LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskCreateParameters armcontainerregistry.Task, options *armcontainerregistry.TasksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskCreateParameters, taskCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientCreateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "mytTask", armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_QuickTask"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "quicktask"
	exampleTaskCreateParameters = armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			IsSystemTask: to.Ptr(true),
			LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:       to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("quicktask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			IsSystemTask:      to.Ptr(true),
			LogTemplate:       to.Ptr("acr/tasks:{{.Run.OS}}"),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskCreateParameters armcontainerregistry.Task, options *armcontainerregistry.TasksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskCreateParameters, taskCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientCreateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "quicktask", armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			IsSystemTask: to.Ptr(true),
			LogTemplate:  to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:       to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksCreate_QuickTask.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithSystemAndUserIdentities"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "mytTask"
	exampleTaskCreateParameters = armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssignedUserAssigned),
			PrincipalID: to.Ptr("fc99dc67-1ad9-45c8-9ebc-e438081c8e30"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{
					ClientID:    to.Ptr("e35621a5-f615-4a20-940e-de8a84b15abc"),
					PrincipalID: to.Ptr("e45e3m7c-176e-416a-b466-0c5ec8298f8a"),
				},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskCreateParameters armcontainerregistry.Task, options *armcontainerregistry.TasksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskCreateParameters, taskCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientCreateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "mytTask", armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemAndUserIdentities.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithUserIdentities"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "mytTask"
	exampleTaskCreateParameters = armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1":  &armcontainerregistry.UserIdentityProperties{},
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": &armcontainerregistry.UserIdentityProperties{
					ClientID:    to.Ptr("d3ce1bc2-f7d7-4a5b-9979-950f4e57680e"),
					PrincipalID: to.Ptr("b6p9f58b-6fbf-4efd-a7e0-fvd46911a466"),
				},
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{
					ClientID:    to.Ptr("e35621a5-f615-4a20-940e-de8a84b15abc"),
					PrincipalID: to.Ptr("e45e3m7c-176e-416a-b466-0c5ec8298f8a"),
				},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskCreateParameters armcontainerregistry.Task, options *armcontainerregistry.TasksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskCreateParameters, taskCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientCreateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "mytTask", armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcontainerregistry.UserIdentityProperties{
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1":  &armcontainerregistry.UserIdentityProperties{},
				"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2": &armcontainerregistry.UserIdentityProperties{},
			},
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithUserIdentities.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Create_WithUserIdentities_WithSystemIdentity"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "mytTask"
	exampleTaskCreateParameters = armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                 to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                 to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskCreateParameters armcontainerregistry.Task, options *armcontainerregistry.TasksClientBeginCreateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskCreateParameters, taskCreateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientCreateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, "myResourceGroup", "myRegistry", "mytTask", armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type: to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                 to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
					}},
			},
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksCreate_WithSystemIdentity.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))
}

func (testsuite *FakeTestSuite) TestTasks_Delete() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Delete"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, options *armcontainerregistry.TasksClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, "myResourceGroup", "myRegistry", "myTask", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksDelete.json")
}

func (testsuite *FakeTestSuite) TestTasks_Update() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskName string
	var exampleTaskUpdateParameters armcontainerregistry.TaskUpdateParameters
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"
	exampleTaskUpdateParameters = armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("username"),
						},
					},
				},
			},
			LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}

	exampleRes := armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": nil,
				},
			},
			LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeDefault),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskUpdateParameters armcontainerregistry.TaskUpdateParameters, options *armcontainerregistry.TasksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskUpdateParameters, taskUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientUpdateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myTask", armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("username"),
						},
					},
				},
			},
			LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_QuickTask"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "quicktask"
	exampleTaskUpdateParameters = armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			CreationDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			LogTemplate:       to.Ptr("acr/tasks:{{.Run.OS}}"),
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskUpdateParameters armcontainerregistry.TaskUpdateParameters, options *armcontainerregistry.TasksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskUpdateParameters, taskUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientUpdateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "quicktask", armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			LogTemplate: to.Ptr("acr/tasks:{{.Run.OS}}"),
			Status:      to.Ptr(armcontainerregistry.TaskStatusEnabled),
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_QuickTask.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithKeyVaultCustomCredentials"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"
	exampleTaskUpdateParameters = armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/username"),
						},
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": nil,
				},
			},
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskUpdateParameters armcontainerregistry.TaskUpdateParameters, options *armcontainerregistry.TasksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskUpdateParameters, taskUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientUpdateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myTask", armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/password"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/username"),
						},
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithKeyVaultCustomCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithMSICustomCredentials"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"
	exampleTaskUpdateParameters = armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azure.io": nil,
				},
			},
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                 to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskUpdateParameters armcontainerregistry.TaskUpdateParameters, options *armcontainerregistry.TasksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskUpdateParameters, taskUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientUpdateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myTask", armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/ManagedIdentity/TasksUpdate_WithMSICustomCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_Update_WithOpaqueCustomCredentials"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"
	exampleTaskUpdateParameters = armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("***"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("username"),
						},
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}

	exampleRes = armcontainerregistry.Task{
		Name:     to.Ptr("myTask"),
		Type:     to.Ptr("Microsoft.ContainerRegistry/registries/tasks"),
		ID:       to.Ptr("/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-25T06:54:23.536Z"); return t }()),
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azure.io": nil,
				},
			},
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
			Status:            to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                 to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType: to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:               to.Ptr(armcontainerregistry.TriggerStatusEnabled),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:            to.Ptr("master"),
							RepositoryURL:     to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, taskUpdateParameters armcontainerregistry.TaskUpdateParameters, options *armcontainerregistry.TasksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		testsuite.Require().Equal(exampleTaskUpdateParameters, taskUpdateParameters)
		resp = azfake.PollerResponder[armcontainerregistry.TasksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcontainerregistry.TasksClientUpdateResponse{Task: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, "myResourceGroup", "myRegistry", "myTask", armcontainerregistry.TaskUpdateParameters{
		Properties: &armcontainerregistry.TaskPropertiesUpdateParameters{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](3),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azurecr.io": &armcontainerregistry.CustomRegistryCredentials{
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("***"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("username"),
						},
					},
				},
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStepUpdateParameters{
				Type:           to.Ptr(armcontainerregistry.StepTypeDocker),
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag1")},
			},
			Trigger: &armcontainerregistry.TriggerUpdateParameters{
				SourceTriggers: []*armcontainerregistry.SourceTriggerUpdateParameters{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceUpdateParameters{
							SourceControlAuthProperties: &armcontainerregistry.AuthInfoUpdateParameters{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
					}},
			},
		},
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
	}, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksUpdate_WithOpaqueCustomCredentials.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))
}

func (testsuite *FakeTestSuite) TestTasks_GetDetails() {
	ctx := context.Background()
	fakeServer := fake.TasksServer{}
	client, err := armcontainerregistry.NewTasksClient("4385cf00-2d3a-425a-832f-f4285b1c9dce", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewTasksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGetDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tasks_GetDetails"},
	})
	var exampleResourceGroupName string
	var exampleRegistryName string
	var exampleTaskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRegistryName = "myRegistry"
	exampleTaskName = "myTask"

	exampleRes := armcontainerregistry.Task{
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"testkey": to.Ptr("value"),
		},
		Identity: &armcontainerregistry.IdentityProperties{
			Type:        to.Ptr(armcontainerregistry.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("fa153151-b9fd-46f4-9088-5e6600f2689v"),
			TenantID:    to.Ptr("f686d426-8d16-42db-81b7-abu4gm510ccd"),
		},
		Properties: &armcontainerregistry.TaskProperties{
			AgentConfiguration: &armcontainerregistry.AgentProperties{
				CPU: to.Ptr[int32](2),
			},
			Credentials: &armcontainerregistry.Credentials{
				CustomRegistries: map[string]*armcontainerregistry.CustomRegistryCredentials{
					"myregistry.azure-test.io": &armcontainerregistry.CustomRegistryCredentials{
						Identity: to.Ptr("[system]"),
						Password: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeVaultsecret),
							Value: to.Ptr("https://myacbvault.vault.azure.net/secrets/username"),
						},
						UserName: &armcontainerregistry.SecretObject{
							Type:  to.Ptr(armcontainerregistry.SecretObjectTypeOpaque),
							Value: to.Ptr("username"),
						},
					},
				},
			},
			IsSystemTask: to.Ptr(false),
			Platform: &armcontainerregistry.PlatformProperties{
				Architecture: to.Ptr(armcontainerregistry.ArchitectureAmd64),
				OS:           to.Ptr(armcontainerregistry.OSLinux),
			},
			Status: to.Ptr(armcontainerregistry.TaskStatusEnabled),
			Step: &armcontainerregistry.DockerBuildStep{
				Type:        to.Ptr(armcontainerregistry.StepTypeDocker),
				ContextPath: to.Ptr("src"),
				Arguments: []*armcontainerregistry.Argument{
					{
						Name:     to.Ptr("mytestargument"),
						IsSecret: to.Ptr(false),
						Value:    to.Ptr("mytestvalue"),
					},
					{
						Name:     to.Ptr("mysecrettestargument"),
						IsSecret: to.Ptr(true),
						Value:    to.Ptr("mysecrettestvalue"),
					}},
				DockerFilePath: to.Ptr("src/DockerFile"),
				ImageNames: []*string{
					to.Ptr("azurerest:testtag")},
				IsPushEnabled: to.Ptr(true),
				NoCache:       to.Ptr(false),
			},
			Trigger: &armcontainerregistry.TriggerProperties{
				BaseImageTrigger: &armcontainerregistry.BaseImageTrigger{
					Name:                     to.Ptr("myBaseImageTrigger"),
					BaseImageTriggerType:     to.Ptr(armcontainerregistry.BaseImageTriggerTypeRuntime),
					Status:                   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					UpdateTriggerEndpoint:    to.Ptr("https://user:pass@mycicd.webhook.com?token=foo"),
					UpdateTriggerPayloadType: to.Ptr(armcontainerregistry.UpdateTriggerPayloadTypeToken),
				},
				SourceTriggers: []*armcontainerregistry.SourceTrigger{
					{
						Name: to.Ptr("mySourceTrigger"),
						SourceRepository: &armcontainerregistry.SourceProperties{
							Branch:        to.Ptr("master"),
							RepositoryURL: to.Ptr("https://github.com/Azure/azure-rest-api-specs"),
							SourceControlAuthProperties: &armcontainerregistry.AuthInfo{
								Token:     to.Ptr("xxxxx"),
								TokenType: to.Ptr(armcontainerregistry.TokenTypePAT),
							},
							SourceControlType: to.Ptr(armcontainerregistry.SourceControlTypeGithub),
						},
						SourceTriggerEvents: []*armcontainerregistry.SourceTriggerEvent{
							to.Ptr(armcontainerregistry.SourceTriggerEventCommit)},
						Status: to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
				TimerTriggers: []*armcontainerregistry.TimerTrigger{
					{
						Name:     to.Ptr("myTimerTrigger"),
						Schedule: to.Ptr("30 9 * * 1-5"),
						Status:   to.Ptr(armcontainerregistry.TriggerStatusEnabled),
					}},
			},
		},
	}

	fakeServer.GetDetails = func(ctx context.Context, resourceGroupName string, registryName string, taskName string, options *armcontainerregistry.TasksClientGetDetailsOptions) (resp azfake.Responder[armcontainerregistry.TasksClientGetDetailsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRegistryName, registryName)
		testsuite.Require().Equal(exampleTaskName, taskName)
		resp = azfake.Responder[armcontainerregistry.TasksClientGetDetailsResponse]{}
		resp.SetResponse(http.StatusOK, armcontainerregistry.TasksClientGetDetailsResponse{Task: exampleRes}, nil)
		return
	}
	res, err := client.GetDetails(ctx, "myResourceGroup", "myRegistry", "myTask", nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TasksGetDetails.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Task))
}
