//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AssignedComponentItem - describe the properties of a security assessment object reference (by key)
type AssignedComponentItem struct {
	// unique key to a security assessment object
	Key *string `json:"key,omitempty"`
}

// AssignedStandardItem - describe the properties of a of a security standard object reference
type AssignedStandardItem struct {
	// full resourceId of the Microsoft.Security/standard object
	ID *string `json:"id,omitempty"`
}

// Assignment - Security Assignment on a resource group over a given scope
type Assignment struct {
	TrackedResource
	// Properties of a security assignment
	Properties *AssignmentProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Assignment.
func (a Assignment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	return json.Marshal(objectMap)
}

// AssignmentList - Page of a standard assignment list
type AssignmentList struct {
	// READ-ONLY; The URI to fetch the next page
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Collection of standardAssignments in this page
	Value []*Assignment `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AssignmentList.
func (a AssignmentList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AssignmentProperties - Describes the properties of a standardAssignment
type AssignmentProperties struct {
	// Additional data about the assignment
	AdditionalData *AssignmentPropertiesAdditionalData `json:"additionalData,omitempty"`

	// Component item with key as applied to this standard assignment over the given scope
	AssignedComponent *AssignedComponentItem `json:"assignedComponent,omitempty"`

	// Standard item with key as applied to this standard assignment over the given scope
	AssignedStandard *AssignedStandardItem `json:"assignedStandard,omitempty"`

	// description of the standardAssignment
	Description *string `json:"description,omitempty"`

	// display name of the standardAssignment
	DisplayName *string `json:"displayName,omitempty"`

	// expected effect of this assignment (Disable/Exempt/etc)
	Effect *string `json:"effect,omitempty"`

	// Expiration date of this assignment as a full ISO date
	ExpiresOn *time.Time `json:"expiresOn,omitempty"`

	// The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
	Scope *string `json:"scope,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AssignmentProperties.
func (a AssignmentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalData", a.AdditionalData)
	populate(objectMap, "assignedComponent", a.AssignedComponent)
	populate(objectMap, "assignedStandard", a.AssignedStandard)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "effect", a.Effect)
	populate(objectMap, "expiresOn", (*timeRFC3339)(a.ExpiresOn))
	populate(objectMap, "metadata", a.Metadata)
	populate(objectMap, "scope", a.Scope)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AssignmentProperties.
func (a *AssignmentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalData":
			err = unpopulate(val, &a.AdditionalData)
			delete(rawMsg, key)
		case "assignedComponent":
			err = unpopulate(val, &a.AssignedComponent)
			delete(rawMsg, key)
		case "assignedStandard":
			err = unpopulate(val, &a.AssignedStandard)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &a.DisplayName)
			delete(rawMsg, key)
		case "effect":
			err = unpopulate(val, &a.Effect)
			delete(rawMsg, key)
		case "expiresOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.ExpiresOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "metadata":
			err = unpopulate(val, &a.Metadata)
			delete(rawMsg, key)
		case "scope":
			err = unpopulate(val, &a.Scope)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AssignmentPropertiesAdditionalData - Additional data about the assignment
type AssignmentPropertiesAdditionalData struct {
	// Exemption category of this assignment
	ExemptionCategory *string `json:"exemptionCategory,omitempty"`
}

// AssignmentsCreateOrUpdateOptions contains the optional parameters for the Assignments.CreateOrUpdate method.
type AssignmentsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsDeleteOptions contains the optional parameters for the Assignments.Delete method.
type AssignmentsDeleteOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsGetOptions contains the optional parameters for the Assignments.Get method.
type AssignmentsGetOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsListBySubscriptionOptions contains the optional parameters for the Assignments.ListBySubscription method.
type AssignmentsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsListOptions contains the optional parameters for the Assignments.List method.
type AssignmentsListOptions struct {
	// placeholder for future optional parameters
}

// AzureTrackedResourceLocation - Describes an Azure resource with location
type AzureTrackedResourceLocation struct {
	// Location where the resource is stored
	Location *string `json:"location,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureTrackedResourceLocation.
func (a AzureTrackedResourceLocation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (a AzureTrackedResourceLocation) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "location", a.Location)
}

// CloudError - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error
// response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// The error object.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - The error detail.
type CloudErrorBody struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*CloudErrorBody `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", c.AdditionalInfo)
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// ETag - Entity tag is used for comparing two or more entities from the same requested resource.
type ETag struct {
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag *string `json:"etag,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ETag.
func (e ETag) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (e ETag) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "etag", e.Etag)
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Kind - Describes an Azure resource with kind
type Kind struct {
	// Kind of the resource
	Kind *string `json:"kind,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Kind.
func (k Kind) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (k Kind) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "kind", k.Kind)
}

// Resource - Describes an Azure resource.
type Resource struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// Standard - Security Standard on a resource
type Standard struct {
	TrackedResource
	// Properties of a security standard
	Properties *StandardProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Standard.
func (s Standard) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// StandardComponentProperties - Describes properties of an component as related to the standard
type StandardComponentProperties struct {
	// Component Key matching componentMetadata
	Key *string `json:"key,omitempty"`
}

// StandardList - Page of a Standard list
type StandardList struct {
	// READ-ONLY; The URI to fetch the next page
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Collection of standards in this page
	Value []*Standard `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StandardList.
func (s StandardList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StandardProperties - Describes properties of a standard.
type StandardProperties struct {
	// category of the standard provided
	Category *string `json:"category,omitempty"`

	// List of component objects containing component unique keys (such as assessment keys) to apply to standard scope. Currently only supports assessment keys.
	Components []*StandardComponentProperties `json:"components,omitempty"`

	// description of the standard
	Description *string `json:"description,omitempty"`

	// display name of the standard, equivalent to the standardId
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; standard type (Custom or BuiltIn only currently)
	StandardType *string `json:"standardType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StandardProperties.
func (s StandardProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", s.Category)
	populate(objectMap, "components", s.Components)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "standardType", s.StandardType)
	return json.Marshal(objectMap)
}

// StandardsCreateOrUpdateOptions contains the optional parameters for the Standards.CreateOrUpdate method.
type StandardsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// StandardsDeleteOptions contains the optional parameters for the Standards.Delete method.
type StandardsDeleteOptions struct {
	// placeholder for future optional parameters
}

// StandardsGetOptions contains the optional parameters for the Standards.Get method.
type StandardsGetOptions struct {
	// placeholder for future optional parameters
}

// StandardsListBySubscriptionOptions contains the optional parameters for the Standards.ListBySubscription method.
type StandardsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// StandardsListOptions contains the optional parameters for the Standards.List method.
type StandardsListOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdAt", (*timeRFC3339)(s.CreatedAt))
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populate(objectMap, "lastModifiedAt", (*timeRFC3339)(s.LastModifiedAt))
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Tags - A list of key value pairs that describe the resource.
type Tags struct {
	// A list of key value pairs that describe the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Tags.
func (t Tags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t Tags) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "tags", t.Tags)
}

// TrackedResource - Describes an Azure tracked resource.
type TrackedResource struct {
	AzureTrackedResourceLocation
	ETag
	Kind
	Resource
	Tags
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	t.AzureTrackedResourceLocation.marshalInternal(objectMap)
	t.Kind.marshalInternal(objectMap)
	t.ETag.marshalInternal(objectMap)
	t.Tags.marshalInternal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
