//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"net/http"
	"testing"

	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v5"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v5/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/stretchr/testify/suite"
)

type FakeTestSuite struct {
	suite.Suite

	cred    azcore.TokenCredential
	options arm.ClientOptions
}

func (testsuite *FakeTestSuite) SetupSuite() {
	testsuite.cred = &testutil.FakeCredential{}
}

func TestFakeTest(t *testing.T) {
	suite.Run(t, new(FakeTestSuite))
}

func (testsuite *FakeTestSuite) TestOperations_List() {
	ctx := context.Background()
	fakeServer := fake.OperationsServer{}
	client, err := armcompute.NewOperationsClient(testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewOperationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Operations_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List_MaximumSet_Gen"},
	})

	exampleRes := armcompute.OperationListResult{
		Value: []*armcompute.OperationValue{
			{
				Name: to.Ptr("aaaaaaaaaaaa"),
				Display: &armcompute.OperationValueDisplay{
					Description: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					Operation:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					Provider:    to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Resource:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				},
				Origin: to.Ptr("aaaaa"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.OperationsClientListOptions) (resp azfake.PagerResponder[armcompute.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.OperationsClientListResponse{OperationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Operations_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Operations_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List_MinimumSet_Gen"},
	})

	exampleRes = armcompute.OperationListResult{}

	fakeServer.NewListPager = func(options *armcompute.OperationsClientListOptions) (resp azfake.PagerResponder[armcompute.OperationsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.OperationsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.OperationsClientListResponse{OperationListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Operations_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OperationListResult))
	}
}

func (testsuite *FakeTestSuite) TestUsage_List() {
	ctx := context.Background()
	fakeServer := fake.UsageServer{}
	client, err := armcompute.NewUsageClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewUsageServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Usage_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usage_List_MaximumSet_Gen"},
	})
	var exampleLocation string
	exampleLocation = "4_."

	exampleRes := armcompute.ListUsagesResult{
		Value: []*armcompute.Usage{
			{
				Name: &armcompute.UsageName{
					LocalizedValue: to.Ptr("aaaaaaaaaaaaaa"),
					Value:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
				},
				CurrentValue: to.Ptr[int32](17),
				Limit:        to.Ptr[int64](19),
				Unit:         to.Ptr("Count"),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.UsageClientListOptions) (resp azfake.PagerResponder[armcompute.UsageClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.UsageClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.UsageClientListResponse{ListUsagesResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Usage_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListUsagesResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Usage_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usage_List_MinimumSet_Gen"},
	})
	exampleLocation = "_--"

	exampleRes = armcompute.ListUsagesResult{
		Value: []*armcompute.Usage{
			{
				Name:         &armcompute.UsageName{},
				CurrentValue: to.Ptr[int32](17),
				Limit:        to.Ptr[int64](19),
				Unit:         to.Ptr("Count"),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.UsageClientListOptions) (resp azfake.PagerResponder[armcompute.UsageClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.UsageClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.UsageClientListResponse{ListUsagesResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/Usage_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ListUsagesResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineSizes_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineSizesServer{}
	client, err := armcompute.NewVirtualMachineSizesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineSizesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/VirtualMachineSizes_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSizes_List_MaximumSet_Gen"},
	})
	var exampleLocation string
	exampleLocation = "-e"

	exampleRes := armcompute.VirtualMachineSizeListResult{
		Value: []*armcompute.VirtualMachineSize{
			{
				Name:                 to.Ptr("Standard_A1_V2"),
				MaxDataDiskCount:     to.Ptr[int32](2),
				MemoryInMB:           to.Ptr[int32](2048),
				NumberOfCores:        to.Ptr[int32](1),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](10240),
			},
			{
				Name:                 to.Ptr("Standard_A2_V2"),
				MaxDataDiskCount:     to.Ptr[int32](4),
				MemoryInMB:           to.Ptr[int32](4096),
				NumberOfCores:        to.Ptr[int32](2),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](20480),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.VirtualMachineSizesClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineSizesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineSizesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineSizesClientListResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/VirtualMachineSizes_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/VirtualMachineSizes_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSizes_List_MinimumSet_Gen"},
	})
	exampleLocation = "._.."

	exampleRes = armcompute.VirtualMachineSizeListResult{}

	fakeServer.NewListPager = func(location string, options *armcompute.VirtualMachineSizesClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineSizesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineSizesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineSizesClientListResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/computeRPCommonExamples/VirtualMachineSizes_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ListByLocation() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListBySubscription_ByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the VM scale sets under the specified subscription for the specified location."},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armcompute.VirtualMachineScaleSetListResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
					Overprovision:                          to.Ptr(false),
					PlatformFaultDomainCount:               to.Ptr[int32](1),
					ProvisioningState:                      to.Ptr("Succeeded"),
					SinglePlacementGroup:                   to.Ptr(false),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							EnableAutomaticOSUpgrade: to.Ptr(false),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													Primary: to.Ptr(true),
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(false),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("databricks"),
								Publisher: to.Ptr("azuredatabricks"),
								SKU:       to.Ptr("databricksworker"),
								Version:   to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](30),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
							},
						},
					},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue2"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
					Overprovision:                          to.Ptr(false),
					PlatformFaultDomainCount:               to.Ptr[int32](1),
					ProvisioningState:                      to.Ptr("Succeeded"),
					SinglePlacementGroup:                   to.Ptr(false),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							EnableAutomaticOSUpgrade: to.Ptr(false),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic1"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													Primary: to.Ptr(true),
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(false),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("databricks"),
								Publisher: to.Ptr("azuredatabricks"),
								SKU:       to.Ptr("databricksworker"),
								Version:   to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](30),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
							},
						},
					},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListByLocationPager = func(location string, options *armcompute.VirtualMachineScaleSetsClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListByLocationResponse{VirtualMachineScaleSetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByLocationPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListBySubscription_ByLocation.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsSuppressFailuresEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VMSS with an extension that has suppressFailures enabled"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleParameters armcompute.VirtualMachineScaleSet
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								SuppressFailures:        to.Ptr(true),
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								SuppressFailures:        to.Ptr(true),
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsSuppressFailuresEnabled.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsSuppressFailuresEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithProtectedSettingsFromKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VMSS with an extension with protectedSettingsFromKeyVault"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
									},
								},
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]any{},
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
									},
								},
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]any{},
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithProtectedSettingsFromKeyVault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithProtectedSettingsFromKeyVault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_CustomImageFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image scale set from an unmanaged generalized os image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d6e9ab29-f8c9-4792-978c-ae2c07b98f17"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_CustomImageFromAnUnmanagedGeneralizedOsImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_CustomImageFromAnUnmanagedGeneralizedOsImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_PlatformImageWithUnmanagedOsDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image scale set with unmanaged os disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
							to.Ptr("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_PlatformImageWithUnmanagedOsDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_PlatformImageWithUnmanagedOsDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a custom image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromACustomImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a generalized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromAGeneralizedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a specialized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromASpecializedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithDisableTcpStateTrackingNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set where nic config has DisableTcpStateTracking property"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{nicConfig1-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DisableTCPStateTracking:     to.Ptr(true),
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{nicConfig2-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DisableTCPStateTracking:     to.Ptr(false),
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(false),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{nicConfig2-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name2}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{nicConfig1-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DisableTCPStateTracking: to.Ptr(true),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{nicConfig1-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{nicConfig2-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DisableTCPStateTracking: to.Ptr(false),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(false),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{nicConfig2-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name2}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithDisableTcpStateTrackingNetworkInterface.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithDisableTcpStateTrackingNetworkInterface.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithApplicationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Application Profile"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference:          to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							EnableAutomaticUpgrade:          to.Ptr(false),
							Order:                           to.Ptr[int32](1),
							PackageReferenceID:              to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                            to.Ptr("myTag1"),
							TreatFailureAsDeploymentFailure: to.Ptr(true),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithApplicationProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithApplicationProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskControllerType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Disk Controller Type"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DiskControllerType: to.Ptr("NVMe"),
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DiskControllerType: to.Ptr("NVMe"),
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskControllerType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskControllerType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with DiskEncryptionSet resource in os disk and data disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiskEncryptionSetResource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithFpgaNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Fpga Network Interfaces."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(false),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithFpgaNetworkInterface.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_FromWithFpgaNetworkInterface.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Host Encryption using encryptionAtHost property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithOSImageScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with OS image scheduled events enabled."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT15M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT15M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithOSImageScheduledEventEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithOSImageScheduledEventEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityPostureReference.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Security Posture Reference"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityPostureReference: &armcompute.SecurityPostureReference{
					ID: to.Ptr("/CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|{major.*}|latest"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2022-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d12ccb3d-ab15-4794-9836-c4196392e9f2"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityPostureReference: &armcompute.SecurityPostureReference{
					ID: to.Ptr("/CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|{major.*}|latest"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2022-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityPostureReference.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityPostureReference.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityTypeConfidentialVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with SecurityType as ConfidentialVM"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("2019-datacenter-cvm"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows-cvm"),
						Version:   to.Ptr("17763.2183.2109130127"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							SecurityProfile: &armcompute.VMDiskSecurityProfile{
								SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DC2as_v5"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("2019-datacenter-cvm"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows-cvm"),
						Version:   to.Ptr("17763.2183.2109130127"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							SecurityProfile: &armcompute.VMDiskSecurityProfile{
								SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DC2as_v5"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityTypeConfidentialVM.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSecurityTypeConfidentialVM.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithServiceArtifactReference.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Service Artifact Reference"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				ServiceArtifactReference: &armcompute.ServiceArtifactReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/serviceArtifacts/serviceArtifactName/vmArtifactsProfiles/vmArtifactsProfilesName"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2022-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ServiceArtifactReference: &armcompute.ServiceArtifactReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/serviceArtifacts/serviceArtifactName/vmArtifactsProfiles/vmArtifactsProfilesName"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2022-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithServiceArtifactReference.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithServiceArtifactReference.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Uefi Settings of secureBoot and vTPM."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUefiSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with a marketplace image plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAMarketplaceImagePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureApplicationGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure application gateway."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}"),
												}},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("a0134477-b9d9-484b-b0e3-205c1c089ffa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/nsgExistingAppGw/backendAddressPools/appGatewayBackendPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureApplicationGateway.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureApplicationGateway.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureLoadBalancer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure load balancer."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}"),
												}},
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("{vmss-name}"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ec0b21ca-51ec-414b-9323-f236ffc21479"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/backendAddressPools/lbBackendPool"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/inboundNatPools/lbNatPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureLoadBalancer.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAzureLoadBalancer.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAutomaticRepairs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with automatic repairs enabled"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT10M"),
			},
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT10M"),
			},
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAutomaticRepairs.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithAutomaticRepairs.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEmptyDataDisksOnEachVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with empty data disks on each vm."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEmptyDataDisksOnEachVm.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithEmptyDataDisksOnEachVm.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_CreateA_WithDiffOsDiskUsingDiffDiskPlacement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_CreateA_WithDiffOsDiskUsingDiffDiskPlacement.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_CreateA_WithDiffOsDiskUsingDiffDiskPlacement.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithDiffOsDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with extension time budget."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]any{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithExtensionsTimeBudget.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with managed boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithManagedBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with password authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPasswordAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with premium storage."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("19fd38a2-f50a-42c6-9dc7-3f9cf3791225"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPremiumStorage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPriorityMixPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with priority mix policy"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			OrchestrationMode: to.Ptr(armcompute.OrchestrationModeFlexible),
			PriorityMixPolicy: &armcompute.PriorityMixPolicy{
				BaseRegularPriorityCount:           to.Ptr[int32](4),
				RegularPriorityPercentageAboveBase: to.Ptr[int32](50),
			},
			SinglePlacementGroup: to.Ptr(false),
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A8m_v2"),
			Capacity: to.Ptr[int64](10),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			OrchestrationMode: to.Ptr(armcompute.OrchestrationModeFlexible),
			PriorityMixPolicy: &armcompute.PriorityMixPolicy{
				BaseRegularPriorityCount:           to.Ptr[int32](4),
				RegularPriorityPercentageAboveBase: to.Ptr[int32](50),
			},
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(false),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A8m_v2"),
			Capacity: to.Ptr[int64](10),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPriorityMixPolicy.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithPriorityMixPolicy.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithScaleInPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with scaleInPolicy."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:     to.Ptr(true),
			ProvisioningState: to.Ptr("Succeeded"),
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithScaleInPolicy.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithScaleInPolicy.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSpotRestorePolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with spot restore policy"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			SpotRestorePolicy: &armcompute.SpotRestorePolicy{
				Enabled:        to.Ptr(true),
				RestoreTimeout: to.Ptr("PT1H"),
			},
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A8m_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			SpotRestorePolicy: &armcompute.SpotRestorePolicy{
				Enabled:        to.Ptr(true),
				RestoreTimeout: to.Ptr("PT1H"),
			},
			UniqueID: to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A8m_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSpotRestorePolicy.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSpotRestorePolicy.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ssh authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("fb73af19-0090-467c-9ced-b00bceab1c45"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithSshAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithTerminateScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with terminate scheduled events enabled."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithTerminateScheduledEventEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithTerminateScheduledEventEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with userData."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMsInDifferentZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with virtual machines in different zones."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(false),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
			ZoneBalance: to.Ptr(false),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMsInDifferentZones.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMsInDifferentZones.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with vm size properties"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMSizeProperties.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithVMSizeProperties.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithCapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a scale set with capacity reservation."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleParameters = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								EnableIPForwarding: to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithCapacityReservation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Create_WithCapacityReservation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleParameters armcompute.VirtualMachineScaleSetUpdate
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineScaleSetUpdate{
		Tags: map[string]*string{
			"key246": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Identity: &armcompute.VirtualMachineScaleSetIdentity{
			Type: to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
			UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
				"key3951": &armcompute.UserAssignedIdentitiesValue{},
			},
		},
		Plan: &armcompute.Plan{
			Name:          to.Ptr("windows2016"),
			Product:       to.Ptr("windows-data-science-vm"),
			PromotionCode: to.Ptr("aaaaaaaaaa"),
			Publisher:     to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetUpdateProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
			Overprovision:                          to.Ptr(true),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			SinglePlacementGroup: to.Ptr(true),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					DisableAutomaticRollback: to.Ptr(true),
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeManual),
				RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
					EnableCrossZoneUpgrade:                to.Ptr(true),
					MaxBatchInstancePercent:               to.Ptr[int32](49),
					MaxSurge:                              to.Ptr(true),
					MaxUnhealthyInstancePercent:           to.Ptr[int32](81),
					MaxUnhealthyUpgradedInstancePercent:   to.Ptr[int32](98),
					PauseTimeBetweenBatches:               to.Ptr("aaaaaaaaaaaaaaa"),
					PrioritizeUnhealthyInstances:          to.Ptr(true),
					RollbackFailedInstancesOnPolicyBreach: to.Ptr(true),
				},
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetUpdateVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
								ProtectedSettings:       map[string]any{},
								ProvisionAfterExtensions: []*string{
									to.Ptr("aa")},
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]any{},
								SuppressFailures:   to.Ptr(true),
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				LicenseType: to.Ptr("aaaaaaaaaaaa"),
				NetworkProfile: &armcompute.VirtualMachineScaleSetUpdateNetworkProfile{
					HealthProbe: &armcompute.APIEntityReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
					},
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetUpdateNetworkConfiguration{
						{
							Name: to.Ptr("aaaaaaaa"),
							Properties: &armcompute.VirtualMachineScaleSetUpdateNetworkConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetUpdateIPConfiguration{
									{
										Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetUpdateIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration{
												Name: to.Ptr("a"),
												Properties: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
														DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](3),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetUpdateOSProfile{
					CustomData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{
						{
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							VaultCertificates: []*armcompute.VaultCertificate{
								{
									CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
									CertificateURL:   to.Ptr("aaaaaaa"),
								}},
						}},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
							{
								ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
								Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								PassName:      to.Ptr("OobeSystem"),
								SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
							}},
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
							AutomaticByPlatformSettings: &armcompute.WindowsVMGuestPatchAutomaticByPlatformSettings{
								RebootSetting: to.Ptr(armcompute.WindowsVMGuestPatchAutomaticByPlatformRebootSettingNever),
							},
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
						TimeZone:         to.Ptr("aaaaaaaaaaaaaaaa"),
						WinRM: &armcompute.WinRMConfiguration{
							Listeners: []*armcompute.WinRMListener{
								{
									CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
								}},
						},
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT10M"),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
					SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetUpdateStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Name:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Caching:           to.Ptr(armcompute.CachingTypesNone),
							CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskIOPSReadWrite: to.Ptr[int64](28),
							DiskMBpsReadWrite: to.Ptr[int64](15),
							DiskSizeGB:        to.Ptr[int32](1023),
							Lun:               to.Ptr[int32](26),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						}},
					ImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						Offer:                to.Ptr("WindowsServer"),
						Publisher:            to.Ptr("MicrosoftWindowsServer"),
						SharedGalleryImageID: to.Ptr("aaaaaa"),
						SKU:                  to.Ptr("2016-Datacenter"),
						Version:              to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetUpdateOSDisk{
						Caching:    to.Ptr(armcompute.CachingTypesReadWrite),
						DiskSizeGB: to.Ptr[int32](6),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						VhdContainers: []*string{
							to.Ptr("aa")},
						WriteAcceleratorEnabled: to.Ptr(true),
					},
				},
				UserData: to.Ptr("aaaaaaaaaaaaa"),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("DSv3-Type1"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{virtualMachineScaleSetName}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key8425": to.Ptr("aaa"),
		},
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Identity: &armcompute.VirtualMachineScaleSetIdentity{
			Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
			TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
			UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
				"key3951": &armcompute.UserAssignedIdentitiesValue{
					ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					PrincipalID: to.Ptr("aaaa"),
				},
			},
		},
		Plan: &armcompute.Plan{
			Name:          to.Ptr("aaaaaaaaaa"),
			Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
			Overprovision:            to.Ptr(true),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			SinglePlacementGroup: to.Ptr(true),
			SpotRestorePolicy: &armcompute.SpotRestorePolicy{
				Enabled:        to.Ptr(true),
				RestoreTimeout: to.Ptr("aaaaaaaaaa"),
			},
			UniqueID: to.Ptr("aaaaaaaa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					DisableAutomaticRollback: to.Ptr(true),
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeManual),
				RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
					EnableCrossZoneUpgrade:              to.Ptr(true),
					MaxBatchInstancePercent:             to.Ptr[int32](49),
					MaxSurge:                            to.Ptr(true),
					MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
					MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
					PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
					PrioritizeUnhealthyInstances:        to.Ptr(true),
				},
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("aaaaa"),
							Order:                  to.Ptr[int32](29),
							PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
							Tags:                   to.Ptr("aaaaaaaaaaa"),
						}},
				},
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
							Name: to.Ptr("{extension-name}"),
							Type: to.Ptr("aaaaa"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
								ProtectedSettings:       map[string]any{},
								ProvisionAfterExtensions: []*string{
									to.Ptr("aa")},
								ProvisioningState:  to.Ptr("Succeeded"),
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]any{},
								SuppressFailures:   to.Ptr(true),
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				LicenseType: to.Ptr("aaaaaaaaaaaa"),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					HealthProbe: &armcompute.APIEntityReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
					},
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("aaaaaaaa"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{
										to.Ptr("aaaaaaaaaaaa")},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("a"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
														DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](3),
													IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
														{
															IPTagType: to.Ptr("aaaaaaa"),
															Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
														}},
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{
						{
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							VaultCertificates: []*armcompute.VaultCertificate{
								{
									CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
									CertificateURL:   to.Ptr("aaaaaaa"),
								}},
						}},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
							{
								ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
								Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								PassName:      to.Ptr("OobeSystem"),
								SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
							}},
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
							AutomaticByPlatformSettings: &armcompute.WindowsVMGuestPatchAutomaticByPlatformSettings{
								RebootSetting: to.Ptr(armcompute.WindowsVMGuestPatchAutomaticByPlatformRebootSettingNever),
							},
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
						TimeZone:         to.Ptr("aaaaaaaaaaaaaaaa"),
						WinRM: &armcompute.WinRMConfiguration{
							Listeners: []*armcompute.WinRMListener{
								{
									CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
								}},
						},
					},
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT10M"),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
					SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Name:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Caching:           to.Ptr(armcompute.CachingTypesNone),
							CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskIOPSReadWrite: to.Ptr[int64](28),
							DiskMBpsReadWrite: to.Ptr[int64](15),
							DiskSizeGB:        to.Ptr[int32](1023),
							Lun:               to.Ptr[int32](26),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						}},
					ImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Offer:                to.Ptr("WindowsServer"),
						Publisher:            to.Ptr("MicrosoftWindowsServer"),
						SharedGalleryImageID: to.Ptr("aaaaaa"),
						SKU:                  to.Ptr("2016-Datacenter"),
						Version:              to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("aaaaaaaaaaaaaaa"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						DiskSizeGB: to.Ptr[int32](6),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						VhdContainers: []*string{
							to.Ptr("aa")},
						WriteAcceleratorEnabled: to.Ptr(true),
					},
				},
				UserData: to.Ptr("aaaaaaaaaaaaa"),
			},
			ZoneBalance: to.Ptr(true),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaa")},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSetUpdate, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineScaleSetUpdate{}

	exampleRes = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSetUpdate, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientUpdateResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Delete_Force.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a VM scale set."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Delete_Force.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Delete_Force.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_WithDiskControllerType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with Disk Controller Type"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks:          []*armcompute.VirtualMachineScaleSetDataDisk{},
					DiskControllerType: to.Ptr("NVMe"),
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetVMScaleSetsUserData)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_WithDiskControllerType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			TimeCreated:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_AutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set placed on a dedicated host group through automatic placement."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_AutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_WithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set with UserData"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"

	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetResponse{VirtualMachineScaleSet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetVMScaleSetsUserData)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Get_WithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Deallocate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Deallocate_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeallocateResponse{}, nil)
		return
	}
	poller, err := client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{Hibernate: to.Ptr(true),
		VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Deallocate_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeallocateResponse{}, nil)
		return
	}
	poller, err = client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{Hibernate: nil,
		VMInstanceIDs: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Deallocate_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_DeleteInstances() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_DeleteInstances_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaa"
	exampleVmInstanceIDs = armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
	}

	fakeServer.BeginDeleteInstances = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleVmInstanceIDs, vmInstanceIDs))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse{}, nil)
		return
	}
	poller, err := client.BeginDeleteInstances(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmInstanceIDs, &armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_DeleteInstances_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaa"
	exampleVmInstanceIDs = armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
	}

	fakeServer.BeginDeleteInstances = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleVmInstanceIDs, vmInstanceIDs))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse{}, nil)
		return
	}
	poller, err = client.BeginDeleteInstances(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmInstanceIDs, &armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{ForceDeletion: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_DeleteInstances_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetInstanceView_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_GetInstanceView_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineScaleSetInstanceView{
		OrchestrationServices: []*armcompute.OrchestrationServiceSummary{
			{
				ServiceName:  to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
				ServiceState: to.Ptr(armcompute.OrchestrationServiceStateNotRunning),
			}},
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
			}},
		VirtualMachine: &armcompute.VirtualMachineScaleSetInstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.VirtualMachineStatusCodeCount{
				{
					Code:  to.Ptr("aa"),
					Count: to.Ptr[int32](21),
				}},
		},
		Extensions: []*armcompute.VirtualMachineScaleSetVMExtensionsSummary{
			{
				Name: to.Ptr("aaaaaaaaaaa"),
				StatusesSummary: []*armcompute.VirtualMachineStatusCodeCount{
					{
						Code:  to.Ptr("aa"),
						Count: to.Ptr[int32](21),
					}},
			}},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse{VirtualMachineScaleSetInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetInstanceView_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetInstanceView))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetInstanceView_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_GetInstanceView_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineScaleSetInstanceView{}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse{VirtualMachineScaleSetInstanceView: exampleRes}, nil)
		return
	}
	res, err = client.GetInstanceView(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetInstanceView_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetInstanceView))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rgcompute"

	exampleRes := armcompute.VirtualMachineScaleSetListResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineScaleSetIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key3951": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
						Enabled:     to.Ptr(true),
						GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
					Overprovision:            to.Ptr(true),
					PlatformFaultDomainCount: to.Ptr[int32](1),
					ProvisioningState:        to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScaleInPolicy: &armcompute.ScaleInPolicy{
						ForceDeletion: to.Ptr(true),
						Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
							to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
					},
					SinglePlacementGroup: to.Ptr(true),
					SpotRestorePolicy: &armcompute.SpotRestorePolicy{
						Enabled:        to.Ptr(true),
						RestoreTimeout: to.Ptr("aaaaaaaaaa"),
					},
					UniqueID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							DisableAutomaticRollback: to.Ptr(true),
							EnableAutomaticOSUpgrade: to.Ptr(true),
							UseRollingUpgradePolicy:  to.Ptr(true),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
							EnableCrossZoneUpgrade:                to.Ptr(true),
							MaxBatchInstancePercent:               to.Ptr[int32](49),
							MaxSurge:                              to.Ptr(true),
							MaxUnhealthyInstancePercent:           to.Ptr[int32](81),
							MaxUnhealthyUpgradedInstancePercent:   to.Ptr[int32](98),
							PauseTimeBetweenBatches:               to.Ptr("aaaaaaaaaaaaaaa"),
							PrioritizeUnhealthyInstances:          to.Ptr(true),
							RollbackFailedInstancesOnPolicyBreach: to.Ptr(true),
						},
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaa"),
									Order:                  to.Ptr[int32](29),
									PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaaaaaaaa"),
								}},
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](4),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
							ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Extensions: []*armcompute.VirtualMachineScaleSetExtension{
								{
									ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Name: to.Ptr("aa"),
									Type: to.Ptr("aaaaa"),
									Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
										Type:                    to.Ptr("aaaaaaaa"),
										AutoUpgradeMinorVersion: to.Ptr(true),
										EnableAutomaticUpgrade:  to.Ptr(true),
										ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										ProtectedSettings:       map[string]any{},
										ProvisionAfterExtensions: []*string{
											to.Ptr("aaaaaaaaaaaaaa")},
										ProvisioningState:  to.Ptr("Succeeded"),
										Publisher:          to.Ptr("aaaaaaaaaaaaa"),
										Settings:           map[string]any{},
										SuppressFailures:   to.Ptr(true),
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
								}},
						},
						LicenseType: to.Ptr("aaaa"),
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							HealthProbe: &armcompute.APIEntityReference{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
							},
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaa")},
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerInboundNatPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](18),
															IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																{
																	IPTagType: to.Ptr("aaaaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaa"),
											KeyData: to.Ptr("aaaaaa"),
										}},
								},
							},
							Secrets: []*armcompute.VaultSecretGroup{
								{
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									VaultCertificates: []*armcompute.VaultCertificate{
										{
											CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
											CertificateURL:   to.Ptr("aaaaaaa"),
										}},
								}},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                   to.Ptr("aaaaaaaaaa"),
								ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								Offer:                to.Ptr("databricks"),
								Publisher:            to.Ptr("azuredatabricks"),
								SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								SKU:                  to.Ptr("databricksworker"),
								Version:              to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Name:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](30),
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								VhdContainers: []*string{
									to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						UserData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					ZoneBalance: to.Ptr(true),
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
				Zones: []*string{
					to.Ptr("aaaaaaa")},
			},
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineScaleSetIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key3951": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
						Enabled:     to.Ptr(true),
						GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
					Overprovision:            to.Ptr(true),
					PlatformFaultDomainCount: to.Ptr[int32](1),
					ProvisioningState:        to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScaleInPolicy: &armcompute.ScaleInPolicy{
						ForceDeletion: to.Ptr(true),
						Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
							to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
					},
					SinglePlacementGroup: to.Ptr(true),
					SpotRestorePolicy: &armcompute.SpotRestorePolicy{
						Enabled:        to.Ptr(true),
						RestoreTimeout: to.Ptr("aaaaaaaaaa"),
					},
					UniqueID: to.Ptr("aaaaa"),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							DisableAutomaticRollback: to.Ptr(true),
							EnableAutomaticOSUpgrade: to.Ptr(true),
							UseRollingUpgradePolicy:  to.Ptr(true),
						},
						Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
							EnableCrossZoneUpgrade:              to.Ptr(true),
							MaxBatchInstancePercent:             to.Ptr[int32](49),
							MaxSurge:                            to.Ptr(true),
							MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
							MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
							PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
							PrioritizeUnhealthyInstances:        to.Ptr(true),
						},
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaa"),
									Order:                  to.Ptr[int32](29),
									PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaaaaaaaa"),
								}},
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](4),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
							ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Extensions: []*armcompute.VirtualMachineScaleSetExtension{
								{
									ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Name: to.Ptr("aa"),
									Type: to.Ptr("aaaaa"),
									Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
										Type:                    to.Ptr("aaaaaaaa"),
										AutoUpgradeMinorVersion: to.Ptr(true),
										EnableAutomaticUpgrade:  to.Ptr(true),
										ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										ProtectedSettings:       map[string]any{},
										ProvisionAfterExtensions: []*string{
											to.Ptr("aaaaaaaaaaaaaa")},
										ProvisioningState:  to.Ptr("Succeeded"),
										Publisher:          to.Ptr("aaaaaaaaaaaaa"),
										Settings:           map[string]any{},
										SuppressFailures:   to.Ptr(true),
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							HealthProbe: &armcompute.APIEntityReference{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
							},
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("myNic1"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaa")},
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("myIPConfig"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerInboundNatPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](18),
															IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																{
																	IPTagType: to.Ptr("aaaaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("admin"),
							ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
							CustomData:         to.Ptr("a"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaa"),
											KeyData: to.Ptr("aaaaaa"),
										}},
								},
							},
							Secrets: []*armcompute.VaultSecretGroup{
								{
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									VaultCertificates: []*armcompute.VaultCertificate{
										{
											CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
											CertificateURL:   to.Ptr("aaaaaaa"),
										}},
								}},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                   to.Ptr("aaa"),
								ExactVersion:         to.Ptr("aa"),
								Offer:                to.Ptr("databricks"),
								Publisher:            to.Ptr("azuredatabricks"),
								SharedGalleryImageID: to.Ptr("aaaaaaa"),
								SKU:                  to.Ptr("databricksworker"),
								Version:              to.Ptr("3.15.2"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Name:         to.Ptr("a"),
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](30),
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								VhdContainers: []*string{
									to.Ptr("aaaaaaaaaaaaaaaa")},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						UserData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					},
					ZoneBalance: to.Ptr(true),
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D2s_v3"),
					Capacity: to.Ptr[int64](4),
					Tier:     to.Ptr("Standard"),
				},
				Zones: []*string{
					to.Ptr("aaaaaaaa")},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.VirtualMachineScaleSetsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListResponse{VirtualMachineScaleSetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"

	exampleRes = armcompute.VirtualMachineScaleSetListResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("eastus"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("eastus"),
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.VirtualMachineScaleSetsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListResponse{VirtualMachineScaleSetListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ListAll() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ListAll_MaximumSet_Gen"},
	})

	exampleRes := armcompute.VirtualMachineScaleSetListWithLinkResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				Name:     to.Ptr("{virtualMachineScaleSetName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key8425": to.Ptr("aaa"),
				},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineScaleSetIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key3951": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineScaleSetProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
						Enabled:     to.Ptr(true),
						GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
					Overprovision:            to.Ptr(true),
					PlatformFaultDomainCount: to.Ptr[int32](1),
					ProvisioningState:        to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScaleInPolicy: &armcompute.ScaleInPolicy{
						ForceDeletion: to.Ptr(true),
						Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
							to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
					},
					SinglePlacementGroup: to.Ptr(true),
					SpotRestorePolicy: &armcompute.SpotRestorePolicy{
						Enabled:        to.Ptr(true),
						RestoreTimeout: to.Ptr("aaaaaaaaaa"),
					},
					UniqueID: to.Ptr("aaaaaaaa"),
					UpgradePolicy: &armcompute.UpgradePolicy{
						AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
							DisableAutomaticRollback: to.Ptr(true),
							EnableAutomaticOSUpgrade: to.Ptr(true),
						},
						Mode: to.Ptr(armcompute.UpgradeModeManual),
						RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
							EnableCrossZoneUpgrade:                to.Ptr(true),
							MaxBatchInstancePercent:               to.Ptr[int32](49),
							MaxSurge:                              to.Ptr(true),
							MaxUnhealthyInstancePercent:           to.Ptr[int32](81),
							MaxUnhealthyUpgradedInstancePercent:   to.Ptr[int32](98),
							PauseTimeBetweenBatches:               to.Ptr("aaaaaaaaaaaaaaa"),
							PrioritizeUnhealthyInstances:          to.Ptr(true),
							RollbackFailedInstancesOnPolicyBreach: to.Ptr(true),
						},
					},
					VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaa"),
									Order:                  to.Ptr[int32](29),
									PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaaaaaaaa"),
								}},
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](4),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
							ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Extensions: []*armcompute.VirtualMachineScaleSetExtension{
								{
									ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Name: to.Ptr("aa"),
									Type: to.Ptr("aaaaa"),
									Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
										Type:                    to.Ptr("aaaaaaaa"),
										AutoUpgradeMinorVersion: to.Ptr(true),
										EnableAutomaticUpgrade:  to.Ptr(true),
										ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										ProtectedSettings:       map[string]any{},
										ProvisionAfterExtensions: []*string{
											to.Ptr("aaaaaaaaaaaaaa")},
										ProvisioningState:  to.Ptr("Succeeded"),
										Publisher:          to.Ptr("aaaaaaaaaaaaa"),
										Settings:           map[string]any{},
										SuppressFailures:   to.Ptr(true),
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaa"),
						NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
							HealthProbe: &armcompute.APIEntityReference{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
							},
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									Name: to.Ptr("{vmss-name}"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaa")},
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												Name: to.Ptr("{vmss-name}"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerInboundNatPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](18),
															IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																{
																	IPTagType: to.Ptr("aaaaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
							AdminUsername:      to.Ptr("{your-username}"),
							ComputerNamePrefix: to.Ptr("{vmss-name}"),
							CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaa"),
											KeyData: to.Ptr("aaaaaa"),
										}},
								},
							},
							Secrets: []*armcompute.VaultSecretGroup{
								{
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									VaultCertificates: []*armcompute.VaultCertificate{
										{
											CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
											CertificateURL:   to.Ptr("aaaaaaa"),
										}},
								}},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
							DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
								{
									Name:              to.Ptr("aaaaaaaaaaaaaa"),
									Caching:           to.Ptr(armcompute.CachingTypesNone),
									CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiskIOPSReadWrite: to.Ptr[int64](11),
									DiskMBpsReadWrite: to.Ptr[int64](13),
									DiskSizeGB:        to.Ptr[int32](11),
									Lun:               to.Ptr[int32](24),
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									WriteAcceleratorEnabled: to.Ptr(true),
								}},
							ImageReference: &armcompute.ImageReference{
								ID:                   to.Ptr("a"),
								ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Offer:                to.Ptr("WindowsServer"),
								Publisher:            to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								SKU:                  to.Ptr("2016-Datacenter"),
								Version:              to.Ptr("latest"),
							},
							OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
								Name:         to.Ptr("aaaaaaaaaaaaaaa"),
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](30),
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								VhdContainers: []*string{
									to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						UserData: to.Ptr("aaa"),
					},
					ZoneBalance: to.Ptr(true),
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_D1_v2"),
					Capacity: to.Ptr[int64](3),
					Tier:     to.Ptr("Standard"),
				},
				Zones: []*string{
					to.Ptr("aaaaaaaaaaaaaaaaaaaa")},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.VirtualMachineScaleSetsClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListAllResponse{VirtualMachineScaleSetListWithLinkResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListAll_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListWithLinkResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ListAll_MinimumSet_Gen"},
	})

	exampleRes = armcompute.VirtualMachineScaleSetListWithLinkResult{
		Value: []*armcompute.VirtualMachineScaleSet{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.VirtualMachineScaleSetsClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientListAllResponse{VirtualMachineScaleSetListWithLinkResult: exampleRes}, nil)
		return
	}
	pager = client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ListAll_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListWithLinkResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_GetOSUpgradeHistory() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetOSUpgradeHistory_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_GetOSUpgradeHistory_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaa"

	exampleRes := armcompute.VirtualMachineScaleSetListOSUpgradeHistory{
		Value: []*armcompute.UpgradeOperationHistoricalStatusInfo{
			{
				Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
				Location: to.Ptr("aaaaaaaaaaaaa"),
				Properties: &armcompute.UpgradeOperationHistoricalStatusInfoProperties{
					Error: &armcompute.APIError{
						Code: to.Ptr("aaaaaaa"),
						Innererror: &armcompute.InnerError{
							Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
							Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						Message: to.Ptr("aaaaaaaaa"),
						Target:  to.Ptr("aaaaaaa"),
						Details: []*armcompute.APIErrorBase{
							{
								Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Message: to.Ptr("aa"),
								Target:  to.Ptr("aaaa"),
							}},
					},
					Progress: &armcompute.RollingUpgradeProgressInfo{
						FailedInstanceCount:     to.Ptr[int32](25),
						InProgressInstanceCount: to.Ptr[int32](20),
						PendingInstanceCount:    to.Ptr[int32](27),
						SuccessfulInstanceCount: to.Ptr[int32](6),
					},
					RollbackInfo: &armcompute.RollbackStatusInfo{
						FailedRolledbackInstanceCount: to.Ptr[int32](2),
						RollbackError: &armcompute.APIError{
							Code: to.Ptr("aaaaaaa"),
							Innererror: &armcompute.InnerError{
								Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							Message: to.Ptr("aaaaaaaaa"),
							Target:  to.Ptr("aaaaaaa"),
							Details: []*armcompute.APIErrorBase{
								{
									Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Message: to.Ptr("aa"),
									Target:  to.Ptr("aaaa"),
								}},
						},
						SuccessfullyRolledbackInstanceCount: to.Ptr[int32](12),
					},
					RunningStatus: &armcompute.UpgradeOperationHistoryStatus{
						Code:      to.Ptr(armcompute.UpgradeStateRollingForward),
						EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:05:40.443Z"); return t }()),
						StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:05:40.442Z"); return t }()),
					},
					StartedBy: to.Ptr(armcompute.UpgradeOperationInvokerUnknown),
					TargetImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						ExactVersion:         to.Ptr("aaaaaaa"),
						Offer:                to.Ptr("WindowsServer"),
						Publisher:            to.Ptr("MicrosoftWindowsServer"),
						SharedGalleryImageID: to.Ptr("aaaaaa"),
						SKU:                  to.Ptr("2016-Datacenter"),
						Version:              to.Ptr("latest"),
					},
				},
			}},
	}

	fakeServer.NewGetOSUpgradeHistoryPager = func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse{VirtualMachineScaleSetListOSUpgradeHistory: exampleRes}, nil)
		return
	}
	pager := client.NewGetOSUpgradeHistoryPager(exampleResourceGroupName, exampleVmScaleSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetOSUpgradeHistory_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListOSUpgradeHistory))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetOSUpgradeHistory_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_GetOSUpgradeHistory_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineScaleSetListOSUpgradeHistory{
		Value: []*armcompute.UpgradeOperationHistoricalStatusInfo{
			{}},
	}

	fakeServer.NewGetOSUpgradeHistoryPager = func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse{VirtualMachineScaleSetListOSUpgradeHistory: exampleRes}, nil)
		return
	}
	pager = client.NewGetOSUpgradeHistoryPager(exampleResourceGroupName, exampleVmScaleSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_GetOSUpgradeHistory_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetListOSUpgradeHistory))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_PowerOff() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_PowerOff_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaa"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientPowerOffResponse{}, nil)
		return
	}
	poller, err := client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
		VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_PowerOff_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "a"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientPowerOffResponse{}, nil)
		return
	}
	poller, err = client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{SkipShutdown: nil,
		VMInstanceIDs: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PowerOff_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Restart() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Restart_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Restart_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientRestartResponse{}, nil)
		return
	}
	poller, err = client.BeginRestart(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{VMInstanceIDs: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Start() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Start_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginStartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Start_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientStartResponse{}, nil)
		return
	}
	poller, err = client.BeginStart(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginStartOptions{VMInstanceIDs: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Start_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Reapply() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("b4f1213b-cacc-4816-8bfb-f30f90643de8", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Reapply_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "VirtualMachineScaleSetReapplyTestRG"
	exampleVmScaleSetName = "VMSSReapply-Test-ScaleSet"

	fakeServer.BeginReapply = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReapplyOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReapplyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReapplyResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReapplyResponse{}, nil)
		return
	}
	poller, err := client.BeginReapply(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Reapply_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "VirtualMachineScaleSetReapplyTestRG"
	exampleVmScaleSetName = "VMSSReapply-Test-ScaleSet"

	fakeServer.BeginReapply = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReapplyOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReapplyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReapplyResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReapplyResponse{}, nil)
		return
	}
	poller, err = client.BeginReapply(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reapply_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Redeploy() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Redeploy_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientRedeployResponse{}, nil)
		return
	}
	poller, err := client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Redeploy_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientRedeployResponse{}, nil)
		return
	}
	poller, err = client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{VMInstanceIDs: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Redeploy_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_PerformMaintenance() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_PerformMaintenance_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err := client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_PerformMaintenance_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err = client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{VMInstanceIDs: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_PerformMaintenance_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_UpdateInstances() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_UpdateInstances_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmInstanceIDs = armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
	}

	fakeServer.BeginUpdateInstances = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleVmInstanceIDs, vmInstanceIDs))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse{}, nil)
		return
	}
	poller, err := client.BeginUpdateInstances(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmInstanceIDs, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_UpdateInstances_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmInstanceIDs = armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
	}

	fakeServer.BeginUpdateInstances = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleVmInstanceIDs, vmInstanceIDs))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse{}, nil)
		return
	}
	poller, err = client.BeginUpdateInstances(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmInstanceIDs, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_UpdateInstances_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_Reimage() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Reimage_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{VMScaleSetReimageInput: &armcompute.VirtualMachineScaleSetReimageParameters{
		TempDisk: to.Ptr(true),
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_Reimage_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReimageResponse{}, nil)
		return
	}
	poller, err = client.BeginReimage(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{VMScaleSetReimageInput: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Reimage_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ReimageAll() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ReimageAll_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaa"

	fakeServer.BeginReimageAll = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReimageAllResponse{}, nil)
		return
	}
	poller, err := client.BeginReimageAll(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
		InstanceIDs: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaa")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ReimageAll_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimageAll = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientReimageAllResponse{}, nil)
		return
	}
	poller, err = client.BeginReimageAll(ctx, exampleResourceGroupName, exampleVmScaleSetName, &armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{VMInstanceIDs: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ReimageAll_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var examplePlatformUpdateDomain int32
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaa"
	examplePlatformUpdateDomain = 30

	exampleRes := armcompute.RecoveryWalkResponse{
		NextPlatformUpdateDomain: to.Ptr[int32](7),
		WalkPerformed:            to.Ptr(true),
	}

	fakeServer.ForceRecoveryServiceFabricPlatformUpdateDomainWalk = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, platformUpdateDomain int32, options *armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(examplePlatformUpdateDomain, platformUpdateDomain)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse{RecoveryWalkResponse: exampleRes}, nil)
		return
	}
	res, err := client.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx, exampleResourceGroupName, exampleVmScaleSetName, examplePlatformUpdateDomain, &armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{Zone: nil,
		PlacementGroupID: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RecoveryWalkResponse))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaa"
	examplePlatformUpdateDomain = 9

	exampleRes = armcompute.RecoveryWalkResponse{}

	fakeServer.ForceRecoveryServiceFabricPlatformUpdateDomainWalk = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, platformUpdateDomain int32, options *armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(examplePlatformUpdateDomain, platformUpdateDomain)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse{RecoveryWalkResponse: exampleRes}, nil)
		return
	}
	res, err = client.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx, exampleResourceGroupName, exampleVmScaleSetName, examplePlatformUpdateDomain, &armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{Zone: nil,
		PlacementGroupID: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RecoveryWalkResponse))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_ConvertToSinglePlacementGroup() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleParameters armcompute.VMScaleSetConvertToSinglePlacementGroupInput
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.VMScaleSetConvertToSinglePlacementGroupInput{
		ActivePlacementGroupID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	}

	fakeServer.ConvertToSinglePlacementGroup = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VMScaleSetConvertToSinglePlacementGroupInput, options *armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse{}, nil)
		return
	}
	_, err = client.ConvertToSinglePlacementGroup(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaa"
	exampleParameters = armcompute.VMScaleSetConvertToSinglePlacementGroupInput{}

	fakeServer.ConvertToSinglePlacementGroup = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VMScaleSetConvertToSinglePlacementGroupInput, options *armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse{}, nil)
		return
	}
	_, err = client.ConvertToSinglePlacementGroup(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_ConvertToSinglePlacementGroup_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSets_SetOrchestrationServiceState() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_SetOrchestrationServiceState_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleParameters armcompute.OrchestrationServiceStateInput
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.OrchestrationServiceStateInput{
		Action:      to.Ptr(armcompute.OrchestrationServiceStateActionResume),
		ServiceName: to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
	}

	fakeServer.BeginSetOrchestrationServiceState = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.OrchestrationServiceStateInput, options *armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse{}, nil)
		return
	}
	poller, err := client.BeginSetOrchestrationServiceState(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSet_SetOrchestrationServiceState_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.OrchestrationServiceStateInput{
		Action:      to.Ptr(armcompute.OrchestrationServiceStateActionResume),
		ServiceName: to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
	}

	fakeServer.BeginSetOrchestrationServiceState = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.OrchestrationServiceStateInput, options *armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse{}, nil)
		return
	}
	poller, err = client.BeginSetOrchestrationServiceState(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_SetOrchestrationServiceState_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_CreateOrUpdate_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmssExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetExtension
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaa"
	exampleVmssExtensionName = "aaaaaaaaaaaaaaaaaaaaa"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetExtension{
		Name: to.Ptr("{extension-name}"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]any{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]any{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetExtension, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_CreateOrUpdate_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaa"
	exampleVmssExtensionName = "aaaaaaaaaaa"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetExtension{}

	exampleRes = armcompute.VirtualMachineScaleSetExtension{}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetExtension, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientCreateOrUpdateResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_CreateOrUpdate_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmssExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetExtensionUpdate
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmssExtensionName = "aaaa"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetExtensionUpdate{
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]any{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]any{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetExtensionUpdate, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmssExtensionName = "aa"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetExtensionUpdate{}

	exampleRes = armcompute.VirtualMachineScaleSetExtension{}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetExtensionUpdate, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientUpdateResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmssExtensionName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmssExtensionName = "aaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaa"
	exampleVmssExtensionName = "aaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, options *armcompute.VirtualMachineScaleSetExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Get_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleVmssExtensionName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmssExtensionName = "aaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]any{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, options *armcompute.VirtualMachineScaleSetExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientGetResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, &armcompute.VirtualMachineScaleSetExtensionsClientGetOptions{Expand: to.Ptr("aaaaaaa")})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_Get_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "a"
	exampleVmssExtensionName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineScaleSetExtension{}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmssExtensionName string, options *armcompute.VirtualMachineScaleSetExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleVmssExtensionName, vmssExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientGetResponse{VirtualMachineScaleSetExtension: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleVmssExtensionName, &armcompute.VirtualMachineScaleSetExtensionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetExtensions_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineScaleSetExtensionListResult{
		Value: []*armcompute.VirtualMachineScaleSetExtension{
			{
				ID:   to.Ptr("aaaaaaaa"),
				Name: to.Ptr("{extension-name}"),
				Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
				Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
					Type:                    to.Ptr("{extension-Type}"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					EnableAutomaticUpgrade:  to.Ptr(true),
					ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
					ProtectedSettings:       map[string]any{},
					ProvisionAfterExtensions: []*string{
						to.Ptr("aa")},
					ProvisioningState:  to.Ptr("Succeeded"),
					Publisher:          to.Ptr("{extension-Publisher}"),
					Settings:           map[string]any{},
					SuppressFailures:   to.Ptr(true),
					TypeHandlerVersion: to.Ptr("{handler-version}"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetExtensionsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetExtensionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetExtensionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientListResponse{VirtualMachineScaleSetExtensionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleVmScaleSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetExtensionListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtension_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineScaleSetExtensionListResult{
		Value: []*armcompute.VirtualMachineScaleSetExtension{
			{}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetExtensionsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetExtensionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetExtensionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetExtensionsClientListResponse{VirtualMachineScaleSetExtensionListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleResourceGroupName, exampleVmScaleSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetExtensionListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_Cancel() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetRollingUpgradesServer{}
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetRollingUpgradesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_Cancel_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaa"

	fakeServer.BeginCancel = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginCancelOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse{}, nil)
		return
	}
	poller, err := client.BeginCancel(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_Cancel_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaa"

	fakeServer.BeginCancel = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginCancelOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientCancelResponse{}, nil)
		return
	}
	poller, err = client.BeginCancel(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_Cancel_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartOSUpgrade() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetRollingUpgradesServer{}
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetRollingUpgradesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaa"

	fakeServer.BeginStartOSUpgrade = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartOSUpgradeOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse{}, nil)
		return
	}
	poller, err := client.BeginStartOSUpgrade(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaa"

	fakeServer.BeginStartOSUpgrade = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartOSUpgradeOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientStartOSUpgradeResponse{}, nil)
		return
	}
	poller, err = client.BeginStartOSUpgrade(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_StartOSUpgrade_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_StartExtensionUpgrade() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetRollingUpgradesServer{}
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetRollingUpgradesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_RollingUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start an extension rolling upgrade."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"

	fakeServer.BeginStartExtensionUpgrade = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartExtensionUpgradeOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientStartExtensionUpgradeResponse{}, nil)
		return
	}
	poller, err := client.BeginStartExtensionUpgrade(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_RollingUpgrade.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtension_RollingUpgrade.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetRollingUpgrades_GetLatest() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetRollingUpgradesServer{}
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetRollingUpgradesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_GetLatest_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_GetLatest_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.RollingUpgradeStatusInfo{
		Name:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("aaaaaaaaaa"),
		Location: to.Ptr("aaaaaa"),
		Tags: map[string]*string{
			"key8533": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.RollingUpgradeStatusInfoProperties{
			Error: &armcompute.APIError{
				Code: to.Ptr("aaaaaaa"),
				Innererror: &armcompute.InnerError{
					Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
					Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				},
				Message: to.Ptr("aaaaaaaaa"),
				Target:  to.Ptr("aaaaaaa"),
				Details: []*armcompute.APIErrorBase{
					{
						Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
						Message: to.Ptr("aa"),
						Target:  to.Ptr("aaaa"),
					}},
			},
			Policy: &armcompute.RollingUpgradePolicy{
				EnableCrossZoneUpgrade:                to.Ptr(true),
				MaxBatchInstancePercent:               to.Ptr[int32](49),
				MaxSurge:                              to.Ptr(true),
				MaxUnhealthyInstancePercent:           to.Ptr[int32](81),
				MaxUnhealthyUpgradedInstancePercent:   to.Ptr[int32](98),
				PauseTimeBetweenBatches:               to.Ptr("aaaaaaaaaaaaaaa"),
				PrioritizeUnhealthyInstances:          to.Ptr(true),
				RollbackFailedInstancesOnPolicyBreach: to.Ptr(true),
			},
			Progress: &armcompute.RollingUpgradeProgressInfo{
				FailedInstanceCount:     to.Ptr[int32](25),
				InProgressInstanceCount: to.Ptr[int32](20),
				PendingInstanceCount:    to.Ptr[int32](27),
				SuccessfulInstanceCount: to.Ptr[int32](6),
			},
			RunningStatus: &armcompute.RollingUpgradeRunningStatus{
				Code:           to.Ptr(armcompute.RollingUpgradeStatusCodeRollingForward),
				LastAction:     to.Ptr(armcompute.RollingUpgradeActionTypeStart),
				LastActionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:06:23.362Z"); return t }()),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:06:23.362Z"); return t }()),
			},
		},
	}

	fakeServer.GetLatest = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse{RollingUpgradeStatusInfo: exampleRes}, nil)
		return
	}
	res, err := client.GetLatest(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_GetLatest_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RollingUpgradeStatusInfo))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_GetLatest_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrade_GetLatest_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.RollingUpgradeStatusInfo{
		ID:       to.Ptr("aaaaaaaaaa"),
		Location: to.Ptr("aaaaaa"),
	}

	fakeServer.GetLatest = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetRollingUpgradesClientGetLatestResponse{RollingUpgradeStatusInfo: exampleRes}, nil)
		return
	}
	res, err = client.GetLatest(ctx, exampleResourceGroupName, exampleVmScaleSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetRollingUpgrade_GetLatest_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RollingUpgradeStatusInfo))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetVMExtension
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetVMExtension{
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetVMExtension, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientCreateOrUpdateResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineScaleSetVMExtensionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineScaleSetVMExtensionUpdate{
		Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, extensionParameters armcompute.VirtualMachineScaleSetVMExtensionUpdate, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientUpdateResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Delete.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleVmExtensionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleVmExtensionName = "myVMExtension"

	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, vmExtensionName string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientGetResponse{VirtualMachineScaleSetVMExtension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleVmExtensionName, &armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMExtensions_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMExtensionsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extensions in Vmss instance."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVMExtensionsListResult{
		Value: []*armcompute.VirtualMachineScaleSetVMExtension{
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
				Name: to.Ptr("myVMExtension"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher"),
					Settings: map[string]any{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			},
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension1"),
				Name: to.Ptr("myVMExtension1"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType1"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher1"),
					Settings: map[string]any{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.0"),
				},
			}},
	}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMExtensionsClientListResponse{VirtualMachineScaleSetVMExtensionsListResult: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVMExtension_List.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtensionsListResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Reimage() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Reimage_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{VMScaleSetVMReimageInput: &armcompute.VirtualMachineScaleSetVMReimageParameters{
		TempDisk: to.Ptr(true),
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Reimage_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaa"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientReimageResponse{}, nil)
		return
	}
	poller, err = client.BeginReimage(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{VMScaleSetVMReimageInput: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Reimage_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_ReimageAll() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_ReimageAll_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimageAll = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse{}, nil)
		return
	}
	poller, err := client.BeginReimageAll(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_ReimageAll_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginReimageAll = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse{}, nil)
		return
	}
	poller, err = client.BeginReimageAll(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_ReimageAll_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Deallocate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Deallocate_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse{}, nil)
		return
	}
	poller, err := client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Deallocate_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse{}, nil)
		return
	}
	poller, err = client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Deallocate_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleParameters armcompute.VirtualMachineScaleSetVM
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineScaleSetVM{
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Plan: &armcompute.Plan{
			Name:          to.Ptr("aaaaaaaaaa"),
			Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("aaaaaaaaaaaaa"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](9),
					VCPUsPerCore:   to.Ptr[int32](12),
				},
			},
			InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
				BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Disks: []*armcompute.DiskInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						EncryptionSettings: []*armcompute.DiskEncryptionSettings{
							{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							}},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
					}},
				MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
					IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
					LastOperationMessage:                  to.Ptr("aaaaaa"),
					LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
					MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
				},
				PlacementGroupID:     to.Ptr("aaa"),
				PlatformFaultDomain:  to.Ptr[int32](14),
				PlatformUpdateDomain: to.Ptr[int32](23),
				RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				VMAgent: &armcompute.VirtualMachineAgentInstanceView{
					ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
						{
							Type: to.Ptr("aaaaaaaaaaaaa"),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							},
							TypeHandlerVersion: to.Ptr("aaaaa"),
						}},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				},
				VMHealth: &armcompute.VirtualMachineHealthStatus{
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					}},
			},
			LicenseType: to.Ptr("aaaaaaaaaa"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
								DNSServers: []*string{
									to.Ptr("aaaaaa")},
							},
							DscpConfiguration: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
								{
									Name: to.Ptr("aa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](2),
												IPTags: []*armcompute.VirtualMachineIPTag{
													{
														IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							Primary:      to.Ptr(true),
						},
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerInboundNatPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](18),
												IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
													{
														IPTagType: to.Ptr("aaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword:            to.Ptr("aaaaaaaaaaaaaaaa"),
				AdminUsername:            to.Ptr("Foo12"),
				AllowExtensionOperations: to.Ptr(true),
				ComputerName:             to.Ptr("test000000"),
				CustomData:               to.Ptr("aaaa"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("aaa"),
								KeyData: to.Ptr("aaaaaa"),
							}},
					},
				},
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
						{
							ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
							Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							PassName:      to.Ptr("OobeSystem"),
							SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
						}},
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
					TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					WinRM: &armcompute.WinRMConfiguration{
						Listeners: []*armcompute.WinRMListener{
							{
								CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
							}},
					},
				},
			},
			ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
				ProtectFromScaleIn:         to.Ptr(true),
				ProtectFromScaleSetActions: to.Ptr(true),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
				SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](128),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						Lun: to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						WriteAcceleratorEnabled: to.Ptr(true),
					}},
				ImageReference: &armcompute.ImageReference{
					ID:                   to.Ptr("a"),
					Offer:                to.Ptr("WindowsServer"),
					Publisher:            to.Ptr("MicrosoftWindowsServer"),
					SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					SKU:                  to.Ptr("2012-R2-Datacenter"),
					Version:              to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					DiskSizeGB: to.Ptr[int32](127),
					EncryptionSettings: &armcompute.DiskEncryptionSettings{
						DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
							SecretURL: to.Ptr("aaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						Enabled: to.Ptr(true),
						KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
							KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
					},
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("aaaaaaaaaaaa"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					WriteAcceleratorEnabled: to.Ptr(true),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
	}

	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:       to.Ptr("{vmss-vm-name}"),
		Type:       to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location:   to.Ptr("westus"),
		Tags:       map[string]*string{},
		InstanceID: to.Ptr("aaaaaaaaaaaa"),
		Plan: &armcompute.Plan{
			Name:          to.Ptr("aaaaaaaaaa"),
			Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("aaaaaaaaaaaaa"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](9),
					VCPUsPerCore:   to.Ptr[int32](12),
				},
			},
			InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
				AssignedHost: to.Ptr("aaaaaaa"),
				BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
					ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaa"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Disks: []*armcompute.DiskInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						EncryptionSettings: []*armcompute.DiskEncryptionSettings{
							{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							}},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
					}},
				MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
					IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
					LastOperationMessage:                  to.Ptr("aaaaaa"),
					LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
					MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
				},
				PlacementGroupID:     to.Ptr("aaa"),
				PlatformFaultDomain:  to.Ptr[int32](14),
				PlatformUpdateDomain: to.Ptr[int32](23),
				RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				VMAgent: &armcompute.VirtualMachineAgentInstanceView{
					ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
						{
							Type: to.Ptr("aaaaaaaaaaaaa"),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							},
							TypeHandlerVersion: to.Ptr("aaaaa"),
						}},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				},
				VMHealth: &armcompute.VirtualMachineHealthStatus{
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					}},
			},
			LatestModelApplied:     to.Ptr(true),
			LicenseType:            to.Ptr("aaaaaaaaaa"),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
								DNSServers: []*string{
									to.Ptr("aaaaaa")},
							},
							DscpConfiguration: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
								{
									Name: to.Ptr("aa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](2),
												IPTags: []*armcompute.VirtualMachineIPTag{
													{
														IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							Primary:      to.Ptr(true),
						},
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerInboundNatPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](18),
												IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
													{
														IPTagType: to.Ptr("aaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:            to.Ptr("Foo12"),
				AllowExtensionOperations: to.Ptr(true),
				ComputerName:             to.Ptr("test000000"),
				CustomData:               to.Ptr("aaaa"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("aaa"),
								KeyData: to.Ptr("aaaaaa"),
							}},
					},
				},
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
						{
							ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
							Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							PassName:      to.Ptr("OobeSystem"),
							SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
						}},
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
					TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					WinRM: &armcompute.WinRMConfiguration{
						Listeners: []*armcompute.WinRMListener{
							{
								CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
							}},
					},
				},
			},
			ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
				ProtectFromScaleIn:         to.Ptr(true),
				ProtectFromScaleSetActions: to.Ptr(true),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
				SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:              to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:           to.Ptr(armcompute.CachingTypesNone),
						CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DeleteOption:      to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
						DetachOption:      to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskIOPSReadWrite: to.Ptr[int64](18),
						DiskMBpsReadWrite: to.Ptr[int64](29),
						DiskSizeGB:        to.Ptr[int32](128),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						Lun: to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						WriteAcceleratorEnabled: to.Ptr(true),
					}},
				ImageReference: &armcompute.ImageReference{
					ID:                   to.Ptr("a"),
					ExactVersion:         to.Ptr("4.127.20180315"),
					Offer:                to.Ptr("WindowsServer"),
					Publisher:            to.Ptr("MicrosoftWindowsServer"),
					SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					SKU:                  to.Ptr("2012-R2-Datacenter"),
					Version:              to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					DiskSizeGB: to.Ptr[int32](127),
					EncryptionSettings: &armcompute.DiskEncryptionSettings{
						DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
							SecretURL: to.Ptr("aaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						Enabled: to.Ptr(true),
						KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
							KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
					},
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("aaaaaaaaaaaa"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					WriteAcceleratorEnabled: to.Ptr(true),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					EnableAutomaticUpgrade:  to.Ptr(true),
					ForceUpdateTag:          to.Ptr("aaaaaaa"),
					InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					ProtectedSettings:  map[string]any{},
					ProvisioningState:  to.Ptr("Succeeded"),
					Publisher:          to.Ptr("Microsoft.Compute"),
					Settings:           map[string]any{},
					SuppressFailures:   to.Ptr(true),
					TypeHandlerVersion: to.Ptr("1.9"),
				},
			}},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
		Zones: []*string{
			to.Ptr("a")},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.VirtualMachineScaleSetVM, options *armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientUpdateResponse{VirtualMachineScaleSetVM: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineScaleSetVM{
		Location: to.Ptr("westus"),
	}

	exampleRes = armcompute.VirtualMachineScaleSetVM{
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("westus"),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.VirtualMachineScaleSetVM, options *armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientUpdateResponse{VirtualMachineScaleSetVM: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Delete_Force.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a virtual machine from a VM scale set."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Delete_Force.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Delete_Force.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_WithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with UserData"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile:        &armcompute.HardwareProfile{},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientGetResponse{VirtualMachineScaleSetVM: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_WithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_WithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with VMSizeProperties"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "{vmss-name}"
	exampleInstanceID = "0"

	exampleRes = armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientGetResponse{VirtualMachineScaleSetVM: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_WithVMSizeProperties.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_InstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine from a VM scale set placed on a dedicated host group through automatic placement."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineScaleSetVMInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOSDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-01T04:58:58.088Z"); return t }()),
					}},
			}},
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T04:59:58.185Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/Unavailable"),
					DisplayStatus: to.Ptr("Not Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesWarning),
					Message:       to.Ptr("VM status blob is found but not yet populated."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-01T05:00:32.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("Unknown"),
		},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse{VirtualMachineScaleSetVMInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Get_InstanceViewAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMInstanceView))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVirtualMachineScaleSetName string
	exampleResourceGroupName = "rgcompute"
	exampleVirtualMachineScaleSetName = "aaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineScaleSetVMListResult{
		Value: []*armcompute.VirtualMachineScaleSetVM{
			{
				Name:       to.Ptr("{vmss-vm-name}"),
				Type:       to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
				Location:   to.Ptr("westus"),
				Tags:       map[string]*string{},
				InstanceID: to.Ptr("aaaaaaaaaaaa"),
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineScaleSetVMProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("aaaaaaaaaaaaa"),
						},
					},
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](9),
							VCPUsPerCore:   to.Ptr[int32](12),
						},
					},
					InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
						AssignedHost: to.Ptr("aaaaaaa"),
						BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
							ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
							SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaa"),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							},
						},
						Disks: []*armcompute.DiskInstanceView{
							{
								Name: to.Ptr("aaaaaaaaaaa"),
								EncryptionSettings: []*armcompute.DiskEncryptionSettings{
									{
										DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
											SecretURL: to.Ptr("aaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
										Enabled: to.Ptr(true),
										KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
											KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
							}},
						MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
							IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
							LastOperationMessage:                  to.Ptr("aaaaaa"),
							LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
							MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
							MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
							PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
							PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						},
						PlacementGroupID:     to.Ptr("aaa"),
						PlatformFaultDomain:  to.Ptr[int32](14),
						PlatformUpdateDomain: to.Ptr[int32](23),
						RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						VMAgent: &armcompute.VirtualMachineAgentInstanceView{
							ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
								{
									Type: to.Ptr("aaaaaaaaaaaaa"),
									Status: &armcompute.InstanceViewStatus{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									},
									TypeHandlerVersion: to.Ptr("aaaaa"),
								}},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						},
						VMHealth: &armcompute.VirtualMachineHealthStatus{
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							},
						},
						Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
							{
								Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
								Type: to.Ptr("aaaaaaaaa"),
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								Substatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							}},
					},
					LatestModelApplied:     to.Ptr(true),
					LicenseType:            to.Ptr("aaaaaaaaaa"),
					ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
							{
								Name: to.Ptr("aaaaaaaaaaa"),
								Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
										DNSServers: []*string{
											to.Ptr("aaaaaa")},
									},
									DscpConfiguration: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
										{
											Name: to.Ptr("aa"),
											Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
															DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](2),
														IPTags: []*armcompute.VirtualMachineIPTag{
															{
																IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
														PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
								Properties: &armcompute.NetworkInterfaceReferenceProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									Primary:      to.Ptr(true),
								},
							}},
					},
					NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("vmsstestnetconfig5415"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("vmsstestnetconfig9693"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerInboundNatPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](18),
														IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
															{
																IPTagType: to.Ptr("aaaaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("test000000"),
						CustomData:               to.Ptr("aaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("aaa"),
										KeyData: to.Ptr("aaaaaa"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets:                     []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
						ProtectFromScaleIn:         to.Ptr(true),
						ProtectFromScaleSetActions: to.Ptr(true),
					},
					ProvisioningState: to.Ptr("Succeeded"),
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{
							{
								Name:              to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
								Caching:           to.Ptr(armcompute.CachingTypesNone),
								CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DeleteOption:      to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DetachOption:      to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
								DiskIOPSReadWrite: to.Ptr[int64](18),
								DiskMBpsReadWrite: to.Ptr[int64](29),
								DiskSizeGB:        to.Ptr[int32](128),
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								Lun: to.Ptr[int32](1),
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								ToBeDetached: to.Ptr(true),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						ImageReference: &armcompute.ImageReference{
							ID:                   to.Ptr("a"),
							ExactVersion:         to.Ptr("4.127.20180315"),
							Offer:                to.Ptr("WindowsServer"),
							Publisher:            to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							SKU:                  to.Ptr("2012-R2-Datacenter"),
							Version:              to.Ptr("4.127.20180315"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](127),
							EncryptionSettings: &armcompute.DiskEncryptionSettings{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							},
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
					VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
				},
				Resources: []*armcompute.VirtualMachineExtension{
					{
						Name:     to.Ptr("CustomScriptExtension-DSC"),
						Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
						Location: to.Ptr("westus"),
						Tags:     map[string]*string{},
						Properties: &armcompute.VirtualMachineExtensionProperties{
							Type:                    to.Ptr("CustomScriptExtension"),
							AutoUpgradeMinorVersion: to.Ptr(true),
							EnableAutomaticUpgrade:  to.Ptr(true),
							ForceUpdateTag:          to.Ptr("aaaaaaa"),
							InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
								Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
								Type: to.Ptr("aaaaaaaaa"),
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								Substatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							ProtectedSettings:  map[string]any{},
							ProvisioningState:  to.Ptr("Succeeded"),
							Publisher:          to.Ptr("Microsoft.Compute"),
							Settings:           map[string]any{},
							SuppressFailures:   to.Ptr(true),
							TypeHandlerVersion: to.Ptr("1.9"),
						},
					}},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Classic"),
					Capacity: to.Ptr[int64](29),
					Tier:     to.Ptr("aaaaaaaaaaaaaa"),
				},
				Zones: []*string{
					to.Ptr("a")},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, virtualMachineScaleSetName string, options *armcompute.VirtualMachineScaleSetVMsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVirtualMachineScaleSetName, virtualMachineScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientListResponse{VirtualMachineScaleSetVMListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleVirtualMachineScaleSetName, &armcompute.VirtualMachineScaleSetVMsClientListOptions{Filter: to.Ptr("aaaaaaaaaaaaaa"),
		Select: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
		Expand: to.Ptr("aaaaaaaaaaaaa"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetVMListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVirtualMachineScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineScaleSetVMListResult{
		Value: []*armcompute.VirtualMachineScaleSetVM{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, virtualMachineScaleSetName string, options *armcompute.VirtualMachineScaleSetVMsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVirtualMachineScaleSetName, virtualMachineScaleSetName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientListResponse{VirtualMachineScaleSetVMListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleResourceGroupName, exampleVirtualMachineScaleSetName, &armcompute.VirtualMachineScaleSetVMsClientListOptions{Filter: nil,
		Select: nil,
		Expand: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineScaleSetVMListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_PowerOff() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_PowerOff_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaa"
	exampleInstanceID = "aaaaaaaaa"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse{}, nil)
		return
	}
	poller, err := client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_PowerOff_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse{}, nil)
		return
	}
	poller, err = client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{SkipShutdown: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PowerOff_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Restart() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Restart_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Restart_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaa"
	exampleInstanceID = "aaaaaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRestartResponse{}, nil)
		return
	}
	poller, err = client.BeginRestart(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Restart_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Start() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Start_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Start_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientStartResponse{}, nil)
		return
	}
	poller, err = client.BeginStart(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Start_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_Redeploy() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Redeploy_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRedeployResponse{}, nil)
		return
	}
	poller, err := client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_Redeploy_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRedeployResponse{}, nil)
		return
	}
	poller, err = client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_Redeploy_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_RetrieveBootDiagnosticsData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/myvmScaleSetinstance.screenshot.bmp?{saskey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/myvmScaleSetinstance.serialconsole.log?{saskey}"),
	}

	fakeServer.RetrieveBootDiagnosticsData = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse{RetrieveBootDiagnosticsDataResult: exampleRes}, nil)
		return
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_RetrieveBootDiagnosticsData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_PerformMaintenance() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_PerformMaintenance_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaaaaaa"
	exampleInstanceID = "aaaaaaaaaaaa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err := client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVM_PerformMaintenance_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmScaleSetName = "aaaaaaaaaa"
	exampleInstanceID = "aaaa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err = client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_PerformMaintenance_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_SimulateEviction() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_SimulateEviction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmScaleSetName = "VmScaleSetName"
	exampleInstanceID = "InstanceId"

	fakeServer.SimulateEviction = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse]{}
		resp.SetResponse(http.StatusNoContent, armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse{}, nil)
		return
	}
	_, err = client.SimulateEviction(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetVM_SimulateEviction.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMs_RunCommand() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_RunCommand"},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleParameters armcompute.RunCommandInput
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myVirtualMachineScaleSet"
	exampleInstanceID = "0"
	exampleParameters = armcompute.RunCommandInput{
		CommandID: to.Ptr("RunPowerShellScript"),
		Script: []*string{
			to.Ptr("Write-Host Hello World!")},
	}

	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("Hello World!"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.BeginRunCommand = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachineScaleSetVMsClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginRunCommand(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionsServer{}
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_CreateOrUpdate_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineExtension
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmExtensionName = "aaaaaaaaaaaaa"
	exampleExtensionParameters = armcompute.VirtualMachineExtension{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key9183": to.Ptr("aa"),
		},
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("a"),
			InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
				Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
				Type: to.Ptr("aaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				Substatuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			ProtectedSettings:  map[string]any{},
			Publisher:          to.Ptr("extPublisher"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key9183": to.Ptr("aa"),
		},
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("a"),
			InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
				Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
				Type: to.Ptr("aaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				Substatuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			ProtectedSettings:  map[string]any{},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("extPublisher"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, extensionParameters armcompute.VirtualMachineExtension, options *armcompute.VirtualMachineExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse{VirtualMachineExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtension))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_CreateOrUpdate_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "myVM"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineExtension{
		Location: to.Ptr("westus"),
	}

	exampleRes = armcompute.VirtualMachineExtension{
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, extensionParameters armcompute.VirtualMachineExtension, options *armcompute.VirtualMachineExtensionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientCreateOrUpdateResponse{VirtualMachineExtension: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_CreateOrUpdate_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionsServer{}
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VM extension."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleVmExtensionName string
	var exampleExtensionParameters armcompute.VirtualMachineExtensionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleVmExtensionName = "myVMExtension"
	exampleExtensionParameters = armcompute.VirtualMachineExtensionUpdate{
		Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
				SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
				SourceVault: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
				},
			},
			Publisher: to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
				SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
				SourceVault: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Publisher:         to.Ptr("extPublisher"),
			Settings: map[string]any{
				"UserName": "xyz@microsoft.com",
			},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, extensionParameters armcompute.VirtualMachineExtensionUpdate, options *armcompute.VirtualMachineExtensionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		testsuite.Require().True(reflect.DeepEqual(exampleExtensionParameters, extensionParameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientUpdateResponse{VirtualMachineExtension: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, exampleExtensionParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionsServer{}
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleVmExtensionName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaa"
	exampleVmExtensionName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, options *armcompute.VirtualMachineExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmExtensionName = "aa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, options *armcompute.VirtualMachineExtensionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineExtensionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionsServer{}
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_Get_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleVmExtensionName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVmExtensionName = "aaaaaaa"

	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key9183": to.Ptr("aa"),
		},
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("a"),
			InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
				Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
				Type: to.Ptr("aaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				Substatuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			ProtectedSettings:  map[string]any{},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("extPublisher"),
			Settings:           map[string]any{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, options *armcompute.VirtualMachineExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientGetResponse{VirtualMachineExtension: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, &armcompute.VirtualMachineExtensionsClientGetOptions{Expand: to.Ptr("aaaaaa")})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtension))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_Get_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "myVM"
	exampleVmExtensionName = "myVMExtension"

	exampleRes = armcompute.VirtualMachineExtension{
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, vmExtensionName string, options *armcompute.VirtualMachineExtensionsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleVmExtensionName, vmExtensionName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientGetResponse{VirtualMachineExtension: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmName, exampleVmExtensionName, &armcompute.VirtualMachineExtensionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtension))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensions_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionsServer{}
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineExtensionsListResult{
		Value: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("myVMExtension"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key9183": to.Ptr("aa"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					EnableAutomaticUpgrade:  to.Ptr(true),
					ForceUpdateTag:          to.Ptr("a"),
					InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					ProtectedSettings:  map[string]any{},
					ProvisioningState:  to.Ptr("Succeeded"),
					Publisher:          to.Ptr("extPublisher"),
					Settings:           map[string]any{},
					SuppressFailures:   to.Ptr(true),
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			}},
	}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachineExtensionsClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionsClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionsClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientListResponse{VirtualMachineExtensionsListResult: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachineExtensionsClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaa")})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_List_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionsListResult))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtension_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineExtensionsListResult{}

	fakeServer.List = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachineExtensionsClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionsClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionsClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionsClientListResponse{VirtualMachineExtensionsListResult: exampleRes}, nil)
		return
	}
	res, err = client.List(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachineExtensionsClientListOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachineExtension_List_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionsListResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListByLocation() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListBySubscription_ByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the virtual machines under the specified subscription for the specified location."},
	})
	var exampleLocation string
	exampleLocation = "eastus"

	exampleRes := armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"RG":      to.Ptr("rg"),
					"testTag": to.Ptr("1"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
					},
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						Secrets:                  []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(true),
							ProvisionVMAgent:       to.Ptr(true),
						},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2012-R2-Datacenter"),
							Version:   to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](127),
							OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
						},
					},
					VMID: to.Ptr("{vmId}"),
				},
			},
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags: map[string]*string{
					"RG":      to.Ptr("rg"),
					"testTag": to.Ptr("1"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
					},
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						Secrets:                  []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							EnableAutomaticUpdates: to.Ptr(true),
							ProvisionVMAgent:       to.Ptr(true),
						},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2012-R2-Datacenter"),
							Version:   to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](127),
							OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
						},
					},
					VMID: to.Ptr("{vmId}"),
				},
			}},
	}

	fakeServer.NewListByLocationPager = func(location string, options *armcompute.VirtualMachinesClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListByLocationResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByLocationPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListBySubscription_ByLocation.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Capture() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Capture_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.VirtualMachineCaptureParameters
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineCaptureParameters{
		DestinationContainerName: to.Ptr("aaaaaaa"),
		OverwriteVhds:            to.Ptr(true),
		VhdPrefix:                to.Ptr("aaaaaaaaa"),
	}

	exampleRes := armcompute.VirtualMachineCaptureResult{
		ID:             to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Schema:         to.Ptr("aaaaa"),
		ContentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		Parameters:     map[string]any{},
		Resources: []any{
			map[string]any{}},
	}

	fakeServer.BeginCapture = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineCaptureParameters, options *armcompute.VirtualMachinesClientBeginCaptureOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCaptureResponse{VirtualMachineCaptureResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCapture(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineCaptureResult))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Capture_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaa"
	exampleParameters = armcompute.VirtualMachineCaptureParameters{
		DestinationContainerName: to.Ptr("aaaaaaa"),
		OverwriteVhds:            to.Ptr(true),
		VhdPrefix:                to.Ptr("aaaaaaaaa"),
	}

	exampleRes = armcompute.VirtualMachineCaptureResult{}

	fakeServer.BeginCapture = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineCaptureParameters, options *armcompute.VirtualMachinesClientBeginCaptureOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCaptureResponse{VirtualMachineCaptureResult: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCapture(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Capture_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineCaptureResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting assessmentMode of ImageDefault."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.VirtualMachine
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingAssessmentModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithAutomaticByPlatformSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of AutomaticByPlatform and AutomaticByPlatformSettings."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						AutomaticByPlatformSettings: &armcompute.LinuxVMGuestPatchAutomaticByPlatformSettings{
							BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
							RebootSetting:                            to.Ptr(armcompute.LinuxVMGuestPatchAutomaticByPlatformRebootSettingNever),
						},
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						AutomaticByPlatformSettings: &armcompute.LinuxVMGuestPatchAutomaticByPlatformSettings{
							BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(true),
							RebootSetting:                            to.Ptr(armcompute.LinuxVMGuestPatchAutomaticByPlatformRebootSettingNever),
						},
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithAutomaticByPlatformSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithAutomaticByPlatformSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of ImageDefault."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_LinuxVmWithPatchSettingModesOfAutomaticByPlatform.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACommunityGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM from a community gallery image"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					CommunityGalleryImageID: to.Ptr("/CommunityGalleries/galleryPublicName/Images/communityGalleryImageName/Versions/communityGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					CommunityGalleryImageID: to.Ptr("/CommunityGalleries/galleryPublicName/Images/communityGalleryImageName/Versions/communityGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACommunityGalleryImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACommunityGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM from a shared gallery image"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					SharedGalleryImageID: to.Ptr("/SharedGalleries/sharedGalleryName/Images/sharedGalleryImageName/Versions/sharedGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					SharedGalleryImageID: to.Ptr("/SharedGalleries/sharedGalleryName/Images/sharedGalleryImageName/Versions/sharedGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASharedGalleryImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASharedGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskControllerType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Disk Controller Type"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DiskControllerType: to.Ptr(armcompute.DiskControllerTypesNVMe),
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			UserData: to.Ptr("U29tZSBDdXN0b20gRGF0YQ=="),
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks:          []*armcompute.DataDisk{},
				DiskControllerType: to.Ptr(armcompute.DiskControllerTypesNVMe),
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskControllerType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskControllerType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithHibernationEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with HibernationEnabled"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2019-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2019-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithHibernationEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithHibernationEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Uefi Settings of secureBoot and vTPM."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUefiSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUefiSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with UserData"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUserData.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithUserData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with VM Size Properties"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			UserData: to.Ptr("U29tZSBDdXN0b20gRGF0YQ=="),
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithVMSizeProperties.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithVMSizeProperties.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithNetworkInterfaceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with network interface configuration"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("{nic-config-name}"),
						Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
								{
									Name: to.Ptr("{ip-config-name}"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
										Primary: to.Ptr(true),
										PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
											Name: to.Ptr("{publicIP-config-name}"),
											Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
												DeleteOption:             to.Ptr(armcompute.DeleteOptionsDetach),
												PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodStatic),
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierGlobal),
											},
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/toBeCreatedNetworkInterface"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithNetworkInterfaceConfiguration.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithNetworkInterfaceConfiguration.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVMWithCustomerManagedKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with securityType ConfidentialVM with Customer Managed Keys"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVMWithCustomerManagedKeys.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVMWithCustomerManagedKeys.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with securityType ConfidentialVM with Platform Managed Keys"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVM.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSecurityTypeConfidentialVM.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting assessmentMode of ImageDefault."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingAssessmentModeOfImageDefault.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByOS."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByOS.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithAutomaticByPlatformSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and AutomaticByPlatformSettings."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						AutomaticByPlatformSettings: &armcompute.WindowsVMGuestPatchAutomaticByPlatformSettings{
							BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(false),
							RebootSetting:                            to.Ptr(armcompute.WindowsVMGuestPatchAutomaticByPlatformRebootSettingNever),
						},
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						AutomaticByPlatformSettings: &armcompute.WindowsVMGuestPatchAutomaticByPlatformSettings{
							BypassPlatformSafetyChecksOnUserSchedule: to.Ptr(false),
							RebootSetting:                            to.Ptr(armcompute.WindowsVMGuestPatchAutomaticByPlatformRebootSettingNever),
						},
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithAutomaticByPlatformSettings.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithAutomaticByPlatformSettings.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfManual.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of Manual."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfManual.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModeOfManual.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WindowsVmWithPatchSettingModesOfAutomaticByPlatform.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_CustomImageVmFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image vm from an unmanaged generalized os image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("926cd555-a07c-4ff5-b214-4aa4dd09d79b"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_CustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_CustomImageVmFromAnUnmanagedGeneralizedOsImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_PlatformImageVmWithUnmanagedOsAndDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image vm with unmanaged os and data disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "{vm-name}"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
						},
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("dataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk0.vhd"),
						},
					},
					{
						Name:         to.Ptr("dataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("5230a749-2f68-4830-900b-702182d32e63"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_PlatformImageVmWithUnmanagedOsAndDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_PlatformImageVmWithUnmanagedOsAndDataDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a custom image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACustomImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromACustomImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a generalized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromAGeneralizedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromAGeneralizedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a specialized shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASpecializedSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_FromASpecializedSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAVmssWithCustomerAssignedPlatformFaultDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myExistingFlexVmss"),
			},
			VMID: to.Ptr("7cce54f2-ecd3-4ddd-a8d9-50984faa3918"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAVmssWithCustomerAssignedPlatformFaultDomain.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAVmssWithCustomerAssignedPlatformFaultDomain.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in an availability set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/NSGEXISTINGAS"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAnAvailabilitySet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_InAnAvailabilitySet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithApplicationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Application Profile."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference:          to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						EnableAutomaticUpgrade:          to.Ptr(false),
						Order:                           to.Ptr[int32](1),
						PackageReferenceID:              to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                            to.Ptr("myTag1"),
						TreatFailureAsDeploymentFailure: to.Ptr(false),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("{image_offer}"),
					Publisher: to.Ptr("{image_publisher}"),
					SKU:       to.Ptr("{image_sku}"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithApplicationProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithApplicationProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with DiskEncryptionSet resource id in the os disk and data disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskencryptionset-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskEncryptionSetResource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithDiskEncryptionSetResource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Host Encryption using encryptionAtHost property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEncryptionAtHost.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEncryptionAtHost.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithScheduledEventsProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Scheduled Events Profile"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT15M"),
				},
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT15M"),
				},
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithScheduledEventsProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithScheduledEventsProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with a marketplace image plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithAMarketplaceImagePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithAMarketplaceImagePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with an extensions time budget."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithExtensionsTimeBudget.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithExtensionsTimeBudget.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEmptyDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with empty data disks."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEmptyDataDisks.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEmptyDataDisks.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Cache disk using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Resource disk using placement property."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithADiffOsDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with managed boot diagnostics."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithManagedBootDiagnostics.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithManagedBootDiagnostics.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with password authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b248db33-62ba-4d2d-b791-811e075ee0f5"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPasswordAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPasswordAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with premium storage."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPremiumStorage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithPremiumStorage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ssh authentication."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("{image_offer}"),
					Publisher: to.Ptr("{image_publisher}"),
					SKU:       to.Ptr("{image_sku}"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSshAuthentication.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithSshAuthentication.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithCapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a VM with capacity reservation"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachine{
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("windows2016"),
			Product:   to.Ptr("windows-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			CapacityReservation: &armcompute.CapacityReservationProfile{
				CapacityReservationGroup: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windows-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("windows2016"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			CapacityReservation: &armcompute.CapacityReservationProfile{
				CapacityReservationGroup: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientCreateOrUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithCapacityReservation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithCapacityReservation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_DetachDataDiskUsingToBeDetachedProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by detaching data disk"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.VirtualMachineUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachineUpdate{
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ToBeDetached: to.Ptr(true),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineUpdate, options *armcompute.VirtualMachinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_DetachDataDiskUsingToBeDetachedProperty.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_DetachDataDiskUsingToBeDetachedProperty.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_ForceDetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by force-detaching data disk"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleParameters = armcompute.VirtualMachineUpdate{
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword: to.Ptr("{your-password}"),
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ToBeDetached: to.Ptr(true),
					},
					{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
				},
			},
		},
	}

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineUpdate, options *armcompute.VirtualMachinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientUpdateResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_ForceDetachDataDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Update_ForceDetachDataDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Delete_Force.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete a VM"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginDeleteOptions{ForceDeletion: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Delete_Force.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Delete_Force.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/my-ppg01"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			UserData:    to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:        to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: to.Ptr(armcompute.InstanceViewTypesUserData)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_AutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine placed on a dedicated host group through automatic placement"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_AutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_WithDiskControllerType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine with Disk Controller Type Properties"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				DiskControllerType: to.Ptr(armcompute.DiskControllerTypesNVMe),
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: to.Ptr(armcompute.InstanceViewTypesUserData)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_WithDiskControllerType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_WithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine with VM Size Properties"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]any{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGetResponse{VirtualMachine: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_WithVMSizeProperties.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachine))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_InstanceView() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_InstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Machine Instance View."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachineInstanceView{
		BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
			ConsoleScreenshotBlobURI: to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.screenshot.bmp"),
			SerialConsoleLogBlobURI:  to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.serialconsole.log"),
		},
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.477Z"); return t }()),
					}},
			},
			{
				Name: to.Ptr("myDataDisk0"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.461Z"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		PatchStatus: &armcompute.VirtualMachinePatchStatus{
			AvailablePatchSummary: &armcompute.AvailablePatchSummary{
				AssessmentActivityID:          to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				CriticalAndSecurityPatchCount: to.Ptr[int32](1),
				LastModifiedTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				OtherPatchCount:               to.Ptr[int32](2),
				RebootPending:                 to.Ptr(true),
				StartTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
			ConfigurationStatuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("PatchModeConfigurationState/Ready"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				},
				{
					Code:          to.Ptr("AssessmentModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_AssessmentModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				}},
			LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
				ExcludedPatchCount:        to.Ptr[int32](1),
				FailedPatchCount:          to.Ptr[int32](1),
				InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9981-33cc88631968"),
				InstalledPatchCount:       to.Ptr[int32](1),
				LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				MaintenanceWindowExceeded: to.Ptr(false),
				NotSelectedPatchCount:     to.Ptr[int32](1),
				PendingPatchCount:         to.Ptr[int32](1),
				StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
				Status:                    to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
		},
		PlatformFaultDomain:  to.Ptr[int32](1),
		PlatformUpdateDomain: to.Ptr[int32](1),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:30:12.805Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
				{
					Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Ready"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					TypeHandlerVersion: to.Ptr("1.5.5.9"),
				}},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T23:11:22.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
		Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
			{
				Name: to.Ptr("IaaSAntiMalware-ext0"),
				Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("Microsoft Antimalware enabled"),
					}},
				TypeHandlerVersion: to.Ptr("1.5.5.9"),
			}},
	}

	fakeServer.InstanceView = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientInstanceViewResponse{VirtualMachineInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.InstanceView(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_InstanceView.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_InstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine placed on a dedicated host group through automatic placement."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes = armcompute.VirtualMachineInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-01T21:29:47.477Z"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-01T21:30:12.805Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-01T23:11:22.000Z"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
	}

	fakeServer.InstanceView = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientInstanceViewResponse{VirtualMachineInstanceView: exampleRes}, nil)
		return
	}
	res, err = client.InstanceView(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Get_InstanceViewAutoPlacedOnDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ConvertToManagedDisks() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_ConvertToManagedDisks_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaa"

	fakeServer.BeginConvertToManagedDisks = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginConvertToManagedDisksOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientConvertToManagedDisksResponse{}, nil)
		return
	}
	poller, err := client.BeginConvertToManagedDisks(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_ConvertToManagedDisks_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaa"

	fakeServer.BeginConvertToManagedDisks = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginConvertToManagedDisksOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientConvertToManagedDisksResponse{}, nil)
		return
	}
	poller, err = client.BeginConvertToManagedDisks(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ConvertToManagedDisks_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Deallocate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Deallocate_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientDeallocateResponse{}, nil)
		return
	}
	poller, err := client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginDeallocateOptions{Hibernate: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Deallocate_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaa"

	fakeServer.BeginDeallocate = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientDeallocateResponse{}, nil)
		return
	}
	poller, err = client.BeginDeallocate(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginDeallocateOptions{Hibernate: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Deallocate_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Generalize() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Generalize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generalize a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVMName"

	fakeServer.Generalize = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGeneralizeOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGeneralizeResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientGeneralizeResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientGeneralizeResponse{}, nil)
		return
	}
	_, err = client.Generalize(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Generalize.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rgcompute"

	exampleRes := armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key5688": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					ApplicationProfile: &armcompute.ApplicationProfile{
						GalleryApplications: []*armcompute.VMGalleryApplication{
							{
								ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Order:                  to.Ptr[int32](4),
								PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Tags:                   to.Ptr("aaaaa"),
							}},
					},
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](26),
					},
					CapacityReservation: &armcompute.CapacityReservationProfile{
						CapacityReservationGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						},
					},
					EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
					ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](7),
							VCPUsPerCore:   to.Ptr[int32](14),
						},
					},
					Host: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					LicenseType: to.Ptr("aaaaaaaaaaaaaaa"),
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersion("2022-05-01")),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
							{
								Name: to.Ptr("aaaaaaaa"),
								Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
									DeleteOption:            to.Ptr(armcompute.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
										DNSServers: []*string{
											to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
									},
									DscpConfiguration: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
										{
											Name: to.Ptr("aaaaaaaa"),
											Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
															DomainNameLabel: to.Ptr("aaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](23),
														IPTags: []*armcompute.VirtualMachineIPTag{
															{
																IPTagType: to.Ptr("aaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
														PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								Properties: &armcompute.NetworkInterfaceReferenceProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									Primary:      to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						CustomData:               to.Ptr("aaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										KeyData: to.Ptr("aaa"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets:                     []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					PlatformFaultDomain: to.Ptr[int32](8),
					Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
					ProvisioningState:   to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT15M"),
						},
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT10M"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							ID:                      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							CommunityGalleryImageID: to.Ptr("aaaa"),
							ExactVersion:            to.Ptr("aaaaaaaaaaaaa"),
							Offer:                   to.Ptr("WindowsServer"),
							Publisher:               to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaa"),
							SKU:                     to.Ptr("2012-R2-Datacenter"),
							Version:                 to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](127),
							EncryptionSettings: &armcompute.DiskEncryptionSettings{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							},
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								SecurityProfile: &armcompute.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
					UserData:    to.Ptr("aaa"),
					VirtualMachineScaleSet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					VMID: to.Ptr("{vmId}"),
				},
				Resources: []*armcompute.VirtualMachineExtension{
					{
						Name:     to.Ptr("aaaaaaaaaaaaa"),
						Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Location: to.Ptr("aaaaaaaaaaaaaaaa"),
						Tags: map[string]*string{
							"key9428": to.Ptr("aaaaaaa"),
						},
						Properties: &armcompute.VirtualMachineExtensionProperties{
							Type:                    to.Ptr("aaaaaaaa"),
							AutoUpgradeMinorVersion: to.Ptr(true),
							EnableAutomaticUpgrade:  to.Ptr(true),
							ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
							InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
								Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								Substatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								TypeHandlerVersion: to.Ptr("aaaaaa"),
							},
							ProtectedSettings: map[string]any{},
							ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
								},
							},
							ProvisioningState:  to.Ptr("Succeeded"),
							Publisher:          to.Ptr("aaaaaaaaaaaaaaaa"),
							Settings:           map[string]any{},
							SuppressFailures:   to.Ptr(true),
							TypeHandlerVersion: to.Ptr("aaaaaaaaaaaa"),
						},
					}},
				Zones: []*string{
					to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa")},
			},
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key5688": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					ApplicationProfile: &armcompute.ApplicationProfile{
						GalleryApplications: []*armcompute.VMGalleryApplication{
							{
								ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Order:                  to.Ptr[int32](4),
								PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Tags:                   to.Ptr("aaaaa"),
							}},
					},
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](26),
					},
					CapacityReservation: &armcompute.CapacityReservationProfile{
						CapacityReservationGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						},
					},
					EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
					ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](7),
							VCPUsPerCore:   to.Ptr[int32](14),
						},
					},
					Host: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					InstanceView: &armcompute.VirtualMachineInstanceView{
						AssignedHost: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
							ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
							},
						},
						ComputerName: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Disks: []*armcompute.DiskInstanceView{
							{
								Name: to.Ptr("a"),
								EncryptionSettings: []*armcompute.DiskEncryptionSettings{
									{
										DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
											SecretURL: to.Ptr("aaaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
										Enabled: to.Ptr(true),
										KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
											KeyURL: to.Ptr("aaaaaaaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
							}},
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
						MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
							IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
							LastOperationMessage:                  to.Ptr("aa"),
							LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
							MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
						},
						OSName:    to.Ptr("aaaaaaaaaaa"),
						OSVersion: to.Ptr("aaaaaaaaaaaaaa"),
						PatchStatus: &armcompute.VirtualMachinePatchStatus{
							AvailablePatchSummary: &armcompute.AvailablePatchSummary{
								AssessmentActivityID:          to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								CriticalAndSecurityPatchCount: to.Ptr[int32](22),
								Error: &armcompute.APIError{
									Code: to.Ptr("aaaaaa"),
									Innererror: &armcompute.InnerError{
										Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									Message: to.Ptr("aaa"),
									Target:  to.Ptr("aaaaaaaaa"),
									Details: []*armcompute.APIErrorBase{
										{
											Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Message: to.Ptr("aaaaaaaaaaaaa"),
											Target:  to.Ptr("aaaaaa"),
										}},
								},
								LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
								OtherPatchCount:  to.Ptr[int32](25),
								RebootPending:    to.Ptr(true),
								StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								Status:           to.Ptr(armcompute.PatchOperationStatusUnknown),
							},
							ConfigurationStatuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
								Error: &armcompute.APIError{
									Code: to.Ptr("aaaaaa"),
									Innererror: &armcompute.InnerError{
										Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									Message: to.Ptr("aaa"),
									Target:  to.Ptr("aaaaaaaaa"),
									Details: []*armcompute.APIErrorBase{
										{
											Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Message: to.Ptr("aaaaaaaaaaaaa"),
											Target:  to.Ptr("aaaaaa"),
										}},
								},
								ExcludedPatchCount:        to.Ptr[int32](1),
								FailedPatchCount:          to.Ptr[int32](30),
								InstallationActivityID:    to.Ptr("aaaaaa"),
								InstalledPatchCount:       to.Ptr[int32](28),
								LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
								MaintenanceWindowExceeded: to.Ptr(true),
								NotSelectedPatchCount:     to.Ptr[int32](20),
								PendingPatchCount:         to.Ptr[int32](2),
								StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
								Status:                    to.Ptr(armcompute.PatchOperationStatusUnknown),
							},
						},
						PlatformFaultDomain:  to.Ptr[int32](29),
						PlatformUpdateDomain: to.Ptr[int32](1),
						RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
							}},
						VMAgent: &armcompute.VirtualMachineAgentInstanceView{
							ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
								{
									Type: to.Ptr("aaaaa"),
									Status: &armcompute.InstanceViewStatus{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									},
									TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								}},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						VMHealth: &armcompute.VirtualMachineHealthStatus{
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
							},
						},
						Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
							{
								Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								Substatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								TypeHandlerVersion: to.Ptr("aaaaaa"),
							}},
					},
					LicenseType: to.Ptr("aaaaaaaaaaaaaa"),
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersion("2022-05-01")),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
							{
								Name: to.Ptr("aaaaaaaa"),
								Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
									DeleteOption:            to.Ptr(armcompute.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
										DNSServers: []*string{
											to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
									},
									DscpConfiguration: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
										{
											Name: to.Ptr("aaaaaaaa"),
											Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
															DomainNameLabel: to.Ptr("aaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](23),
														IPTags: []*armcompute.VirtualMachineIPTag{
															{
																IPTagType: to.Ptr("aaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
														PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								Properties: &armcompute.NetworkInterfaceReferenceProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									Primary:      to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										KeyData: to.Ptr("aaa"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets:                     []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					PlatformFaultDomain: to.Ptr[int32](11),
					Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
					ProvisioningState:   to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT15M"),
						},
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT10M"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							ID:                      to.Ptr("aaaaaaaa"),
							CommunityGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ExactVersion:            to.Ptr("aa"),
							Offer:                   to.Ptr("WindowsServer"),
							Publisher:               to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
							SKU:                     to.Ptr("2012-R2-Datacenter"),
							Version:                 to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](127),
							EncryptionSettings: &armcompute.DiskEncryptionSettings{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							},
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								SecurityProfile: &armcompute.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.685Z"); return t }()),
					UserData:    to.Ptr("aaaaaaaaaaaaaaaaaaa"),
					VirtualMachineScaleSet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					VMID: to.Ptr("{vmId}"),
				},
				Resources: []*armcompute.VirtualMachineExtension{
					{
						Name:     to.Ptr("aaaaaaaaaaaaa"),
						Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Location: to.Ptr("aaaaaaaaaaaaaaaa"),
						Tags: map[string]*string{
							"key9428": to.Ptr("aaaaaaa"),
						},
						Properties: &armcompute.VirtualMachineExtensionProperties{
							Type:                    to.Ptr("aaaaaaaa"),
							AutoUpgradeMinorVersion: to.Ptr(true),
							EnableAutomaticUpgrade:  to.Ptr(true),
							ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
							InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
								Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								Substatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								TypeHandlerVersion: to.Ptr("aaaaaa"),
							},
							ProtectedSettings: map[string]any{},
							ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
								},
							},
							ProvisioningState:  to.Ptr("Succeeded"),
							Publisher:          to.Ptr("aaaaaaaaaaaaaaaa"),
							Settings:           map[string]any{},
							SuppressFailures:   to.Ptr(true),
							TypeHandlerVersion: to.Ptr("aaaaaaaaaaaa"),
						},
					}},
				Zones: []*string{
					to.Ptr("aaaaaa")},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.VirtualMachinesClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, &armcompute.VirtualMachinesClientListOptions{Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
		Expand: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"

	exampleRes = armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/rgcompute/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.VirtualMachinesClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleResourceGroupName, &armcompute.VirtualMachinesClientListOptions{Filter: nil,
		Expand: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListAll() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_ListAll_MaximumSet_Gen"},
	})

	exampleRes := armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key5688": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					ApplicationProfile: &armcompute.ApplicationProfile{
						GalleryApplications: []*armcompute.VMGalleryApplication{
							{
								ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Order:                  to.Ptr[int32](4),
								PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Tags:                   to.Ptr("aaaaa"),
							}},
					},
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](26),
					},
					CapacityReservation: &armcompute.CapacityReservationProfile{
						CapacityReservationGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						},
					},
					EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
					ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](7),
							VCPUsPerCore:   to.Ptr[int32](14),
						},
					},
					Host: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					LicenseType: to.Ptr("aaaaaaaaaaaaaaa"),
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersion("2022-05-01")),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
							{
								Name: to.Ptr("aaaaaaaa"),
								Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
									DeleteOption:            to.Ptr(armcompute.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
										DNSServers: []*string{
											to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
									},
									DscpConfiguration: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
										{
											Name: to.Ptr("aaaaaaaa"),
											Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
															DomainNameLabel: to.Ptr("aaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](23),
														IPTags: []*armcompute.VirtualMachineIPTag{
															{
																IPTagType: to.Ptr("aaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
														PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								Properties: &armcompute.NetworkInterfaceReferenceProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									Primary:      to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						CustomData:               to.Ptr("aaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										KeyData: to.Ptr("aaa"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets:                     []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					PlatformFaultDomain: to.Ptr[int32](8),
					Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
					ProvisioningState:   to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT15M"),
						},
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT10M"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							ID:                      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							CommunityGalleryImageID: to.Ptr("aaaa"),
							ExactVersion:            to.Ptr("aaaaaaaaaaaaa"),
							Offer:                   to.Ptr("WindowsServer"),
							Publisher:               to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaa"),
							SKU:                     to.Ptr("2012-R2-Datacenter"),
							Version:                 to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](127),
							EncryptionSettings: &armcompute.DiskEncryptionSettings{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							},
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								SecurityProfile: &armcompute.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
					UserData:    to.Ptr("aaa"),
					VirtualMachineScaleSet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					VMID: to.Ptr("{vmId}"),
				},
				Resources: []*armcompute.VirtualMachineExtension{
					{
						Name:     to.Ptr("aaaaaaaaaaaaa"),
						Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Location: to.Ptr("aaaaaaaaaaaaaaaa"),
						Tags: map[string]*string{
							"key9428": to.Ptr("aaaaaaa"),
						},
						Properties: &armcompute.VirtualMachineExtensionProperties{
							Type:                    to.Ptr("aaaaaaaa"),
							AutoUpgradeMinorVersion: to.Ptr(true),
							EnableAutomaticUpgrade:  to.Ptr(true),
							ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
							ProtectedSettings:       map[string]any{},
							ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
								},
							},
							ProvisioningState:  to.Ptr("Succeeded"),
							Publisher:          to.Ptr("aaaaaaaaaaaaaaaa"),
							Settings:           map[string]any{},
							SuppressFailures:   to.Ptr(true),
							TypeHandlerVersion: to.Ptr("aaaaaaaaaaaa"),
						},
					}},
				Zones: []*string{
					to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa")},
			},
			{
				Name:     to.Ptr("{virtualMachineName}"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("aaaa"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Identity: &armcompute.VirtualMachineIdentity{
					Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
					PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
					TenantID:    to.Ptr("aaaaa"),
					UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
						"key5688": &armcompute.UserAssignedIdentitiesValue{
							ClientID:    to.Ptr("aaaaaaaaaaa"),
							PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						},
					},
				},
				Plan: &armcompute.Plan{
					Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
					Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.VirtualMachineProperties{
					AdditionalCapabilities: &armcompute.AdditionalCapabilities{
						HibernationEnabled: to.Ptr(true),
						UltraSSDEnabled:    to.Ptr(true),
					},
					ApplicationProfile: &armcompute.ApplicationProfile{
						GalleryApplications: []*armcompute.VMGalleryApplication{
							{
								ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Order:                  to.Ptr[int32](4),
								PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Tags:                   to.Ptr("aaaaa"),
							}},
					},
					AvailabilitySet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](26),
					},
					CapacityReservation: &armcompute.CapacityReservationProfile{
						CapacityReservationGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						},
					},
					EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
					ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					HardwareProfile: &armcompute.HardwareProfile{
						VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](7),
							VCPUsPerCore:   to.Ptr[int32](14),
						},
					},
					Host: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					HostGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					LicenseType: to.Ptr("aaaaaaaaaaaaaa"),
					NetworkProfile: &armcompute.NetworkProfile{
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersion("2022-05-01")),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
							{
								Name: to.Ptr("aaaaaaaa"),
								Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
									DeleteOption:            to.Ptr(armcompute.DeleteOptionsDelete),
									DisableTCPStateTracking: to.Ptr(true),
									DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
										DNSServers: []*string{
											to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
									},
									DscpConfiguration: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
										{
											Name: to.Ptr("aaaaaaaa"),
											Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
													Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
															DomainNameLabel: to.Ptr("aaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](23),
														IPTags: []*armcompute.VirtualMachineIPTag{
															{
																IPTagType: to.Ptr("aaaaa"),
																Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
															}},
														PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
														PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
														PublicIPPrefix: &armcompute.SubResource{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														},
													},
													SKU: &armcompute.PublicIPAddressSKU{
														Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
														Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
													},
												},
												Subnet: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
									Primary: to.Ptr(true),
								},
							}},
						NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								Properties: &armcompute.NetworkInterfaceReferenceProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									Primary:      to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.OSProfile{
						AdminUsername:            to.Ptr("Foo12"),
						AllowExtensionOperations: to.Ptr(true),
						ComputerName:             to.Ptr("Test"),
						CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										KeyData: to.Ptr("aaa"),
									}},
							},
						},
						RequireGuestProvisionSignal: to.Ptr(true),
						Secrets:                     []*armcompute.VaultSecretGroup{},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					PlatformFaultDomain: to.Ptr[int32](11),
					Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
					ProvisioningState:   to.Ptr("Succeeded"),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						OSImageNotificationProfile: &armcompute.OSImageNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT15M"),
						},
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT10M"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.StorageProfile{
						DataDisks: []*armcompute.DataDisk{},
						ImageReference: &armcompute.ImageReference{
							ID:                      to.Ptr("aaaaaaaa"),
							CommunityGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ExactVersion:            to.Ptr("aa"),
							Offer:                   to.Ptr("WindowsServer"),
							Publisher:               to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
							SKU:                     to.Ptr("2012-R2-Datacenter"),
							Version:                 to.Ptr("4.127.20170406"),
						},
						OSDisk: &armcompute.OSDisk{
							Name:         to.Ptr("test"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
							},
							DiskSizeGB: to.Ptr[int32](127),
							EncryptionSettings: &armcompute.DiskEncryptionSettings{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							},
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								SecurityProfile: &armcompute.VMDiskSecurityProfile{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.685Z"); return t }()),
					UserData:    to.Ptr("aaaaaaaaaaaaaaaaaaa"),
					VirtualMachineScaleSet: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					VMID: to.Ptr("{vmId}"),
				},
				Resources: []*armcompute.VirtualMachineExtension{
					{
						Name:     to.Ptr("aaaaaaaaaaaaa"),
						Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Location: to.Ptr("aaaaaaaaaaaaaaaa"),
						Tags: map[string]*string{
							"key9428": to.Ptr("aaaaaaa"),
						},
						Properties: &armcompute.VirtualMachineExtensionProperties{
							Type:                    to.Ptr("aaaaaaaa"),
							AutoUpgradeMinorVersion: to.Ptr(true),
							EnableAutomaticUpgrade:  to.Ptr(true),
							ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
							ProtectedSettings:       map[string]any{},
							ProtectedSettingsFromKeyVault: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"),
								},
							},
							ProvisioningState:  to.Ptr("Succeeded"),
							Publisher:          to.Ptr("aaaaaaaaaaaaaaaa"),
							Settings:           map[string]any{},
							SuppressFailures:   to.Ptr(true),
							TypeHandlerVersion: to.Ptr("aaaaaaaaaaaa"),
						},
					}},
				Zones: []*string{
					to.Ptr("aaaaaa")},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.VirtualMachinesClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListAllResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(&armcompute.VirtualMachinesClientListAllOptions{StatusOnly: to.Ptr("aaaaaa"),
		Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		Expand: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAll_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_ListAll_MinimumSet_Gen"},
	})

	exampleRes = armcompute.VirtualMachineListResult{
		Value: []*armcompute.VirtualMachine{
			{
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
				Location: to.Ptr("eastus"),
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.VirtualMachinesClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListAllResponse{VirtualMachineListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListAllPager(&armcompute.VirtualMachinesClientListAllOptions{StatusOnly: nil,
		Filter: nil,
		Expand: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAll_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_ListAvailableSizes() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAvailableVmSizes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available virtual machine sizes to which the specified virtual machine can be resized"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVmName"

	exampleRes := armcompute.VirtualMachineSizeListResult{
		Value: []*armcompute.VirtualMachineSize{
			{
				Name:                 to.Ptr("Standard_A1_V2"),
				MaxDataDiskCount:     to.Ptr[int32](2),
				MemoryInMB:           to.Ptr[int32](2048),
				NumberOfCores:        to.Ptr[int32](1),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](10240),
			},
			{
				Name:                 to.Ptr("Standard_A2_V2"),
				MaxDataDiskCount:     to.Ptr[int32](4),
				MemoryInMB:           to.Ptr[int32](4096),
				NumberOfCores:        to.Ptr[int32](2),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](20480),
			}},
	}

	fakeServer.NewListAvailableSizesPager = func(resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachinesClientListAvailableSizesResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAvailableSizesPager(exampleResourceGroupName, exampleVmName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_ListAvailableVmSizes.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachines_PowerOff() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_PowerOff_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientPowerOffResponse{}, nil)
		return
	}
	poller, err := client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_PowerOff_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaa"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientPowerOffResponse{}, nil)
		return
	}
	poller, err = client.BeginPowerOff(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginPowerOffOptions{SkipShutdown: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PowerOff_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Reapply() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reapply.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reapply the state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	fakeServer.BeginReapply = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReapplyOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientReapplyResponse{}, nil)
		return
	}
	poller, err := client.BeginReapply(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reapply.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reapply.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Restart() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Restart_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Restart_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaa"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRestartResponse{}, nil)
		return
	}
	poller, err = client.BeginRestart(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Restart_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Start() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Start_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Start_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaa"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientStartResponse{}, nil)
		return
	}
	poller, err = client.BeginStart(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Start_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Redeploy() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Redeploy_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "a"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRedeployResponse{}, nil)
		return
	}
	poller, err := client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_Redeploy_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaaaaaaa"

	fakeServer.BeginRedeploy = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRedeployResponse{}, nil)
		return
	}
	poller, err = client.BeginRedeploy(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Redeploy_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_Reimage() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage_NonEphemeralVMs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Non-Ephemeral Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVMName"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginReimageOptions{Parameters: &armcompute.VirtualMachineReimageParameters{
		ExactVersion: to.Ptr("aaaaaa"),
		OSProfile: &armcompute.OSProfileProvisioningData{
			AdminPassword: to.Ptr("{your-password}"),
			CustomData:    to.Ptr("{your-custom-data}"),
		},
		TempDisk: to.Ptr(true),
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage_NonEphemeralVMs.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage_NonEphemeralVMs.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Virtual Machine."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVMName"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientReimageResponse{}, nil)
		return
	}
	poller, err = client.BeginReimage(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientBeginReimageOptions{Parameters: &armcompute.VirtualMachineReimageParameters{
		TempDisk: to.Ptr(true),
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_Reimage.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_RetrieveBootDiagnosticsData() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_RetrieveBootDiagnosticsData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/vm.screenshot.bmp?{sasKey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/vm.serialconsole.log?{sasKey}"),
	}

	fakeServer.RetrieveBootDiagnosticsData = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse{RetrieveBootDiagnosticsDataResult: exampleRes}, nil)
		return
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx, exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_RetrieveBootDiagnosticsData.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_PerformMaintenance() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_PerformMaintenance_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err := client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachine_PerformMaintenance_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleVmName = "aaaaaaaaaa"

	fakeServer.BeginPerformMaintenance = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientPerformMaintenanceResponse{}, nil)
		return
	}
	poller, err = client.BeginPerformMaintenance(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_PerformMaintenance_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_SimulateEviction() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_SimulateEviction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "ResourceGroup"
	exampleVmName = "VMName"

	fakeServer.SimulateEviction = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientSimulateEvictionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.Responder[armcompute.VirtualMachinesClientSimulateEvictionResponse]{}
		resp.SetResponse(http.StatusNoContent, armcompute.VirtualMachinesClientSimulateEvictionResponse{}, nil)
		return
	}
	_, err = client.SimulateEviction(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_SimulateEviction.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachines_AssessPatches() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_AssessPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assess patch state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroupName"
	exampleVmName = "myVMName"

	exampleRes := armcompute.VirtualMachineAssessPatchesResult{
		AssessmentActivityID: to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		AvailablePatches: []*armcompute.VirtualMachineSoftwarePatchProperties{
			{
				Name:            to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				KbID:                 to.Ptr("2267602"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.283Z"); return t }()),
				PatchID:              to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00.000Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorNeverReboots),
				Version:              to.Ptr(""),
			},
			{
				Name:            to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				KbID:                 to.Ptr("890830"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.283Z"); return t }()),
				PatchID:              to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00.000Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorCanRequestReboot),
				Version:              to.Ptr(""),
			}},
		CriticalAndSecurityPatchCount: to.Ptr[int32](1),
		OtherPatchCount:               to.Ptr[int32](2),
		RebootPending:                 to.Ptr(true),
		StartDateTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
		Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}

	fakeServer.BeginAssessPatches = func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginAssessPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientAssessPatchesResponse{VirtualMachineAssessPatchesResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginAssessPatches(ctx, exampleResourceGroupName, exampleVmName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_AssessPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_AssessPatches.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineAssessPatchesResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_InstallPatches() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_InstallPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Install patch state of a virtual machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleInstallPatchesInput armcompute.VirtualMachineInstallPatchesParameters
	exampleResourceGroupName = "myResourceGroupName"
	exampleVmName = "myVMName"
	exampleInstallPatchesInput = armcompute.VirtualMachineInstallPatchesParameters{
		MaximumDuration: to.Ptr("PT4H"),
		RebootSetting:   to.Ptr(armcompute.VMGuestPatchRebootSettingIfRequired),
		WindowsParameters: &armcompute.WindowsParameters{
			ClassificationsToInclude: []*armcompute.VMGuestPatchClassificationWindows{
				to.Ptr(armcompute.VMGuestPatchClassificationWindowsCritical),
				to.Ptr(armcompute.VMGuestPatchClassificationWindowsSecurity)},
			MaxPatchPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T02:36:43.053Z"); return t }()),
		},
	}

	exampleRes := armcompute.VirtualMachineInstallPatchesResult{
		ExcludedPatchCount:        to.Ptr[int32](0),
		FailedPatchCount:          to.Ptr[int32](0),
		InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		InstalledPatchCount:       to.Ptr[int32](3),
		MaintenanceWindowExceeded: to.Ptr(false),
		NotSelectedPatchCount:     to.Ptr[int32](0),
		Patches: []*armcompute.PatchInstallationDetail{
			{
				Name: to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStateInstalled),
				KbID:              to.Ptr("2267602"),
				PatchID:           to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				Version:           to.Ptr(""),
			},
			{
				Name: to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStatePending),
				KbID:              to.Ptr("890830"),
				PatchID:           to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				Version:           to.Ptr(""),
			}},
		PendingPatchCount: to.Ptr[int32](2),
		RebootStatus:      to.Ptr(armcompute.VMGuestPatchRebootStatusCompleted),
		StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.255Z"); return t }()),
		Status:            to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}

	fakeServer.BeginInstallPatches = func(ctx context.Context, resourceGroupName string, vmName string, installPatchesInput armcompute.VirtualMachineInstallPatchesParameters, options *armcompute.VirtualMachinesClientBeginInstallPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleInstallPatchesInput, installPatchesInput))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientInstallPatchesResponse{VirtualMachineInstallPatchesResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginInstallPatches(ctx, exampleResourceGroupName, exampleVmName, exampleInstallPatchesInput, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_InstallPatches.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExamples/VirtualMachine_InstallPatches.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineInstallPatchesResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachines_RunCommand() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachinesServer{}
	client, err := armcompute.NewVirtualMachinesClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachinesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommand"},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleParameters armcompute.RunCommandInput
	exampleResourceGroupName = "crptestar98131"
	exampleVmName = "vm3036"
	exampleParameters = armcompute.RunCommandInput{
		CommandID: to.Ptr("RunPowerShellScript"),
	}

	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("This is a sample script with parameters value1 value2"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.BeginRunCommand = func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachinesClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachinesClientRunCommandResponse{RunCommandResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginRunCommand(ctx, exampleResourceGroupName, exampleVmName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesServer{}
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_Get_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	var exampleOffer string
	var exampleSkus string
	var exampleVersion string
	exampleLocation = "aaaaaa"
	examplePublisherName = "aaa"
	exampleOffer = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleVersion = "aaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineImage{
		ID:   to.Ptr("aaaaaaaaaaa"),
		Name: to.Ptr("aaaaaaaaa"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Location: to.Ptr("aaaaa"),
		Tags: map[string]*string{
			"key6817": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineImageProperties{
			AutomaticOSUpgradeProperties: &armcompute.AutomaticOSUpgradeProperties{
				AutomaticOSUpgradeSupported: to.Ptr(true),
			},
			DataDiskImages: []*armcompute.DataDiskImage{
				{
					Lun: to.Ptr[int32](17),
				}},
			Disallowed: &armcompute.DisallowedConfiguration{
				VMDiskType: to.Ptr(armcompute.VMDiskTypesNone),
			},
			Features: []*armcompute.VirtualMachineImageFeature{
				{
					Name:  to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Value: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				}},
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			ImageDeprecationStatus: &armcompute.ImageDeprecationStatus{
				AlternativeOption: &armcompute.AlternativeOption{
					Type:  to.Ptr(armcompute.AlternativeTypeOffer),
					Value: to.Ptr("aaaaaaa"),
				},
				ImageState:               to.Ptr(armcompute.ImageStateScheduledForDeprecation),
				ScheduledDeprecationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-01-13T00:00:00.000Z"); return t }()),
			},
			OSDiskImage: &armcompute.OSDiskImage{
				OperatingSystem: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			Plan: &armcompute.PurchasePlan{
				Name:      to.Ptr("aaaaaaaaa"),
				Product:   to.Ptr("aaaaaaaaaaaaaa"),
				Publisher: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, publisherName string, offer string, skus string, version string, options *armcompute.VirtualMachineImagesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientGetResponse{VirtualMachineImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, examplePublisherName, exampleOffer, exampleSkus, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImage))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_Get_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaa"
	exampleOffer = "aa"
	exampleSkus = "aaaaaaaaa"
	exampleVersion = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.VirtualMachineImage{
		ID:       to.Ptr("aaaaaaaaaaa"),
		Name:     to.Ptr("aaaaaaaaa"),
		Location: to.Ptr("aaaaa"),
	}

	fakeServer.Get = func(ctx context.Context, location string, publisherName string, offer string, skus string, version string, options *armcompute.VirtualMachineImagesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientGetResponse{VirtualMachineImage: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleLocation, examplePublisherName, exampleOffer, exampleSkus, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImage))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesServer{}
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_List_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	var exampleOffer string
	var exampleSkus string
	exampleLocation = "aaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaa"
	exampleOffer = "aaaaaaaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.List = func(ctx context.Context, location string, publisherName string, offer string, skus string, options *armcompute.VirtualMachineImagesClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, exampleLocation, examplePublisherName, exampleOffer, exampleSkus, &armcompute.VirtualMachineImagesClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Top:     to.Ptr[int32](18),
		Orderby: to.Ptr("aa"),
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_List_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_List_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaa"
	examplePublisherName = "aaaaaaaaaaa"
	exampleOffer = "aaaaaaaaaa"
	exampleSkus = "aaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.List = func(ctx context.Context, location string, publisherName string, offer string, skus string, options *armcompute.VirtualMachineImagesClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.List(ctx, exampleLocation, examplePublisherName, exampleOffer, exampleSkus, &armcompute.VirtualMachineImagesClientListOptions{Expand: nil,
		Top:     nil,
		Orderby: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_List_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_ListOffers() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesServer{}
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListOffers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_ListOffers_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	exampleLocation = "aaaaaaa"
	examplePublisherName = "aaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.ListOffers = func(ctx context.Context, location string, publisherName string, options *armcompute.VirtualMachineImagesClientListOffersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListOffersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListOffersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListOffersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.ListOffers(ctx, exampleLocation, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListOffers_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListOffers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_ListOffers_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.ListOffers = func(ctx context.Context, location string, publisherName string, options *armcompute.VirtualMachineImagesClientListOffersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListOffersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListOffersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListOffersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.ListOffers(ctx, exampleLocation, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListOffers_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_ListPublishers() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesServer{}
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListPublishers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_ListPublishers_MaximumSet_Gen"},
	})
	var exampleLocation string
	exampleLocation = "aaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.ListPublishers = func(ctx context.Context, location string, options *armcompute.VirtualMachineImagesClientListPublishersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListPublishersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListPublishersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListPublishersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.ListPublishers(ctx, exampleLocation, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListPublishers_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListPublishers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImage_ListPublishers_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.ListPublishers = func(ctx context.Context, location string, options *armcompute.VirtualMachineImagesClientListPublishersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListPublishersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListPublishersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListPublishersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.ListPublishers(ctx, exampleLocation, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImage_ListPublishers_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImages_ListByEdgeZone() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesServer{}
	client, err := armcompute.NewVirtualMachineImagesClient("5ece5940-d962-4dad-a98f-ca9ac0f021a5", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListByEdgeZone_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListByEdgeZone_MaximumSet_Gen"},
	})
	var exampleLocation string
	var exampleEdgeZone string
	exampleLocation = "WestUS"
	exampleEdgeZone = "microsoftlosangeles1"

	exampleRes := armcompute.VMImagesInEdgeZoneListResult{
		Value: []*armcompute.VirtualMachineImageResource{
			{
				ID:   to.Ptr("/Subscriptions/5ece5940-d962-4dad-a98f-ca9ac0f021a5/Providers/Microsoft.Compute/Locations/westus/Publishers/CANONICAL/ArtifactTypes/VMImage/Offers/UBUNTUSERVER/Skus/18_04-LTS-GEN2/Versions/18.04.202107200"),
				Name: to.Ptr("18.04.202107200"),
				ExtendedLocation: &armcompute.ExtendedLocation{
					Name: to.Ptr("microsoftlosangeles1"),
					Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
				},
				Location: to.Ptr("WestUS"),
			}},
	}

	fakeServer.ListByEdgeZone = func(ctx context.Context, location string, edgeZone string, options *armcompute.VirtualMachineImagesClientListByEdgeZoneOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListByEdgeZoneResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListByEdgeZoneResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListByEdgeZoneResponse{VMImagesInEdgeZoneListResult: exampleRes}, nil)
		return
	}
	res, err := client.ListByEdgeZone(ctx, exampleLocation, exampleEdgeZone, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListByEdgeZone_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VMImagesInEdgeZoneListResult))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListByEdgeZone_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListByEdgeZone_MinimumSet_Gen"},
	})
	exampleLocation = "WestUS"
	exampleEdgeZone = "microsoftlosangeles1"

	exampleRes = armcompute.VMImagesInEdgeZoneListResult{
		Value: []*armcompute.VirtualMachineImageResource{},
	}

	fakeServer.ListByEdgeZone = func(ctx context.Context, location string, edgeZone string, options *armcompute.VirtualMachineImagesClientListByEdgeZoneOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesClientListByEdgeZoneResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		resp = azfake.Responder[armcompute.VirtualMachineImagesClientListByEdgeZoneResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesClientListByEdgeZoneResponse{VMImagesInEdgeZoneListResult: exampleRes}, nil)
		return
	}
	res, err = client.ListByEdgeZone(ctx, exampleLocation, exampleEdgeZone, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListByEdgeZone_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VMImagesInEdgeZoneListResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesEdgeZoneServer{}
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesEdgeZoneServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen"},
	})
	var exampleLocation string
	var exampleEdgeZone string
	var examplePublisherName string
	var exampleOffer string
	var exampleSkus string
	var exampleVersion string
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaa"
	exampleOffer = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaa"
	exampleVersion = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineImage{
		ID:   to.Ptr("aaaaaaaaaaa"),
		Name: to.Ptr("aaaaaaaaa"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Location: to.Ptr("aaaaa"),
		Tags: map[string]*string{
			"key6817": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineImageProperties{
			AutomaticOSUpgradeProperties: &armcompute.AutomaticOSUpgradeProperties{
				AutomaticOSUpgradeSupported: to.Ptr(true),
			},
			DataDiskImages: []*armcompute.DataDiskImage{
				{
					Lun: to.Ptr[int32](17),
				}},
			Disallowed: &armcompute.DisallowedConfiguration{
				VMDiskType: to.Ptr(armcompute.VMDiskTypesNone),
			},
			Features: []*armcompute.VirtualMachineImageFeature{
				{
					Name:  to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Value: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				}},
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			OSDiskImage: &armcompute.OSDiskImage{
				OperatingSystem: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			Plan: &armcompute.PurchasePlan{
				Name:      to.Ptr("aaaaaaaaa"),
				Product:   to.Ptr("aaaaaaaaaaaaaa"),
				Publisher: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, version string, options *armcompute.VirtualMachineImagesEdgeZoneClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientGetResponse{VirtualMachineImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, exampleOffer, exampleSkus, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImage))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleOffer = "aaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaaaaaaaaaa"
	exampleVersion = "aa"

	exampleRes = armcompute.VirtualMachineImage{
		ID:       to.Ptr("aaaaaaaaaaa"),
		Name:     to.Ptr("aaaaaaaaa"),
		Location: to.Ptr("aaaaa"),
	}

	fakeServer.Get = func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, version string, options *armcompute.VirtualMachineImagesEdgeZoneClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientGetResponse{VirtualMachineImage: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, exampleOffer, exampleSkus, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImage))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesEdgeZoneServer{}
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesEdgeZoneServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_List_MaximumSet_Gen"},
	})
	var exampleLocation string
	var exampleEdgeZone string
	var examplePublisherName string
	var exampleOffer string
	var exampleSkus string
	exampleLocation = "aaaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaa"
	exampleOffer = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.List = func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.List(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, exampleOffer, exampleSkus, &armcompute.VirtualMachineImagesEdgeZoneClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Top:     to.Ptr[int32](12),
		Orderby: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_List_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_List_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaa"
	exampleOffer = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleSkus = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.List = func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleOffer, offer)
		testsuite.Require().Equal(exampleSkus, skus)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.List(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, exampleOffer, exampleSkus, &armcompute.VirtualMachineImagesEdgeZoneClientListOptions{Expand: nil,
		Top:     nil,
		Orderby: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_List_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_ListOffers() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesEdgeZoneServer{}
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesEdgeZoneServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen"},
	})
	var exampleLocation string
	var exampleEdgeZone string
	var examplePublisherName string
	exampleLocation = "aaaaaaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.ListOffers = func(ctx context.Context, location string, edgeZone string, publisherName string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOffersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.ListOffers(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.ListOffers = func(ctx context.Context, location string, edgeZone string, publisherName string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOffersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.ListOffers(ctx, exampleLocation, exampleEdgeZone, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineImagesEdgeZone_ListPublishers() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineImagesEdgeZoneServer{}
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineImagesEdgeZoneServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen"},
	})
	var exampleLocation string
	var exampleEdgeZone string
	exampleLocation = "aaaaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}

	fakeServer.ListPublishers = func(ctx context.Context, location string, edgeZone string, options *armcompute.VirtualMachineImagesEdgeZoneClientListPublishersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err := client.ListPublishers(ctx, exampleLocation, exampleEdgeZone, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen"},
	})
	exampleLocation = "aaaa"
	exampleEdgeZone = "aaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			ID:       to.Ptr("aaaaaaaaaaa"),
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}

	fakeServer.ListPublishers = func(ctx context.Context, location string, edgeZone string, options *armcompute.VirtualMachineImagesEdgeZoneClientListPublishersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleEdgeZone, edgeZone)
		resp = azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse{VirtualMachineImageResourceArray: exampleRes}, nil)
		return
	}
	res, err = client.ListPublishers(ctx, exampleLocation, exampleEdgeZone, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineImageExamples/VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionImagesServer{}
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_Get_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	var exampleTypeParam string
	var exampleVersion string
	exampleLocation = "aaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaa"
	exampleTypeParam = "aaaaaaaaaaaaaaaaaa"
	exampleVersion = "aaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineExtensionImage{
		Name:     to.Ptr("aaaaaaaaaaaaaaa"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
		Location: to.Ptr("aaaaaaaaaaaaa"),
		Tags: map[string]*string{
			"key9885": to.Ptr("aaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineExtensionImageProperties{
			ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
			HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
			SupportsMultipleExtensions: to.Ptr(true),
			VMScaleSetEnabled:          to.Ptr(true),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, publisherName string, typeParam string, version string, options *armcompute.VirtualMachineExtensionImagesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleTypeParam, typeParam)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientGetResponse{VirtualMachineExtensionImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, examplePublisherName, exampleTypeParam, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImage))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_Get_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleTypeParam = "aa"
	exampleVersion = "aaa"

	exampleRes = armcompute.VirtualMachineExtensionImage{
		Name:     to.Ptr("aaaaaaaaaaaaaaa"),
		ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
		Location: to.Ptr("aaaaaaaaaaaaa"),
	}

	fakeServer.Get = func(ctx context.Context, location string, publisherName string, typeParam string, version string, options *armcompute.VirtualMachineExtensionImagesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleTypeParam, typeParam)
		testsuite.Require().Equal(exampleVersion, version)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientGetResponse{VirtualMachineExtensionImage: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleLocation, examplePublisherName, exampleTypeParam, exampleVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImage))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_ListTypes() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionImagesServer{}
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListTypes_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_ListTypes_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key9885": to.Ptr("aaaaaaaaa"),
			},
			Properties: &armcompute.VirtualMachineExtensionImageProperties{
				ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
				HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
				SupportsMultipleExtensions: to.Ptr(true),
				VMScaleSetEnabled:          to.Ptr(true),
			},
		}}

	fakeServer.ListTypes = func(ctx context.Context, location string, publisherName string, options *armcompute.VirtualMachineExtensionImagesClientListTypesOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListTypesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListTypesResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientListTypesResponse{VirtualMachineExtensionImageArray: exampleRes}, nil)
		return
	}
	res, err := client.ListTypes(ctx, exampleLocation, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListTypes_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListTypes_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_ListTypes_MinimumSet_Gen"},
	})
	exampleLocation = "aaaa"
	examplePublisherName = "aa"

	exampleRes = []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
		}}

	fakeServer.ListTypes = func(ctx context.Context, location string, publisherName string, options *armcompute.VirtualMachineExtensionImagesClientListTypesOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListTypesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListTypesResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientListTypesResponse{VirtualMachineExtensionImageArray: exampleRes}, nil)
		return
	}
	res, err = client.ListTypes(ctx, exampleLocation, examplePublisherName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListTypes_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray))
}

func (testsuite *FakeTestSuite) TestVirtualMachineExtensionImages_ListVersions() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineExtensionImagesServer{}
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineExtensionImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListVersions_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_ListVersions_MaximumSet_Gen"},
	})
	var exampleLocation string
	var examplePublisherName string
	var exampleTypeParam string
	exampleLocation = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaa"
	exampleTypeParam = "aaaaaaaaaaaaaaaaaa"

	exampleRes := []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key9885": to.Ptr("aaaaaaaaa"),
			},
			Properties: &armcompute.VirtualMachineExtensionImageProperties{
				ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
				HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
				SupportsMultipleExtensions: to.Ptr(true),
				VMScaleSetEnabled:          to.Ptr(true),
			},
		}}

	fakeServer.ListVersions = func(ctx context.Context, location string, publisherName string, typeParam string, options *armcompute.VirtualMachineExtensionImagesClientListVersionsOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListVersionsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleTypeParam, typeParam)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListVersionsResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientListVersionsResponse{VirtualMachineExtensionImageArray: exampleRes}, nil)
		return
	}
	res, err := client.ListVersions(ctx, exampleLocation, examplePublisherName, exampleTypeParam, &armcompute.VirtualMachineExtensionImagesClientListVersionsOptions{Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
		Top:     to.Ptr[int32](22),
		Orderby: to.Ptr("a"),
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListVersions_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListVersions_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImage_ListVersions_MinimumSet_Gen"},
	})
	exampleLocation = "aaaaaaaaa"
	examplePublisherName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleTypeParam = "aaaa"

	exampleRes = []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
		}}

	fakeServer.ListVersions = func(ctx context.Context, location string, publisherName string, typeParam string, options *armcompute.VirtualMachineExtensionImagesClientListVersionsOptions) (resp azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListVersionsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublisherName, publisherName)
		testsuite.Require().Equal(exampleTypeParam, typeParam)
		resp = azfake.Responder[armcompute.VirtualMachineExtensionImagesClientListVersionsResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineExtensionImagesClientListVersionsResponse{VirtualMachineExtensionImageArray: exampleRes}, nil)
		return
	}
	res, err = client.ListVersions(ctx, exampleLocation, examplePublisherName, exampleTypeParam, &armcompute.VirtualMachineExtensionImagesClientListVersionsOptions{Filter: nil,
		Top:     nil,
		Orderby: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/virtualMachineExtensionImageExamples/VirtualMachineExtensionImage_ListVersions_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray))
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an availability set."},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	var exampleParameters armcompute.AvailabilitySet
	exampleResourceGroupName = "myResourceGroup"
	exampleAvailabilitySetName = "myAvailabilitySet"
	exampleParameters = armcompute.AvailabilitySet{
		Location: to.Ptr("westus"),
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
	}

	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("Classic"),
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, availabilitySetName string, parameters armcompute.AvailabilitySet, options *armcompute.AvailabilitySetsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.AvailabilitySetsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientCreateOrUpdateResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleAvailabilitySetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Update() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	var exampleParameters armcompute.AvailabilitySetUpdate
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.AvailabilitySetUpdate{
		Tags: map[string]*string{
			"key2574": to.Ptr("aaaaaaaa"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			VirtualMachines: []*armcompute.SubResource{
				{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("DSv3-Type1"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}

	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key2505": to.Ptr("aa"),
			"key9626": to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					DisplayStatus: to.Ptr("aaaaaa"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("a"),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
				}},
			VirtualMachines: []*armcompute.SubResource{
				{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, availabilitySetName string, parameters armcompute.AvailabilitySetUpdate, options *armcompute.AvailabilitySetsClientUpdateOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.AvailabilitySetsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientUpdateResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleAvailabilitySetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.AvailabilitySetUpdate{}

	exampleRes = armcompute.AvailabilitySet{
		Location: to.Ptr("westus"),
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, availabilitySetName string, parameters armcompute.AvailabilitySetUpdate, options *armcompute.AvailabilitySetsClientUpdateOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.AvailabilitySetsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientUpdateResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err = client.Update(ctx, exampleResourceGroupName, exampleAvailabilitySetName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Delete() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaaaaaaaaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientDeleteOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.Responder[armcompute.AvailabilitySetsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleAvailabilitySetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientDeleteOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.Responder[armcompute.AvailabilitySetsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleAvailabilitySetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_Get() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Get_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaa"

	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key2505": to.Ptr("aa"),
			"key9626": to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					DisplayStatus: to.Ptr("aaaaaa"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("a"),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
				}},
			VirtualMachines: []*armcompute.SubResource{
				{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientGetOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.Responder[armcompute.AvailabilitySetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientGetResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleAvailabilitySetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Get_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_Get_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaaaaaaaaaa"

	exampleRes = armcompute.AvailabilitySet{
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientGetOptions) (resp azfake.Responder[armcompute.AvailabilitySetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.Responder[armcompute.AvailabilitySetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.AvailabilitySetsClientGetResponse{AvailabilitySet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleAvailabilitySetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_Get_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AvailabilitySet))
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List availability sets in a subscription."},
	})

	exampleRes := armcompute.AvailabilitySetListResult{
		Value: []*armcompute.AvailabilitySet{
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags: map[string]*string{
					"{tagName}": to.Ptr("{tagValue}"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines:           []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags: map[string]*string{
					"{tagName}": to.Ptr("{tagValue}"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					VirtualMachines:           []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name: to.Ptr("Classic"),
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.AvailabilitySetsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListBySubscriptionResponse{AvailabilitySetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(&armcompute.AvailabilitySetsClientListBySubscriptionOptions{Expand: to.Ptr("virtualMachines\\$ref")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AvailabilitySetListResult))
	}
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_List() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_List_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rgcompute"

	exampleRes := armcompute.AvailabilitySetListResult{
		Value: []*armcompute.AvailabilitySet{
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Tags: map[string]*string{
					"key2039": to.Ptr("aaaaaaaaaaaaa"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaaaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("aaaaaa"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
						}},
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Classic"),
					Capacity: to.Ptr[int64](22),
					Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("australiasoutheast"),
				Tags: map[string]*string{
					"key5849": to.Ptr("aaaaaaaaaaaaaaa"),
				},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaaaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("aaaaaa"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
						}},
					VirtualMachines: []*armcompute.SubResource{
						{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
						}},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Classic"),
					Capacity: to.Ptr[int64](23),
					Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaaaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("aaaaaa"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
						}},
					VirtualMachines: []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Classic"),
					Capacity: to.Ptr[int64](26),
					Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				},
			},
			{
				Name:     to.Ptr("{availabilitySetName}"),
				Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				Location: to.Ptr("westcentralus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.AvailabilitySetProperties{
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					PlatformUpdateDomainCount: to.Ptr[int32](5),
					ProximityPlacementGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaaaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("aaaaaa"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
						}},
					VirtualMachines: []*armcompute.SubResource{},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Classic"),
					Capacity: to.Ptr[int64](6),
					Tier:     to.Ptr("aaaaaaaaaaaaaaaaaa"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.AvailabilitySetsClientListOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListResponse{AvailabilitySetListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_List_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AvailabilitySetListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_List_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"

	exampleRes = armcompute.AvailabilitySetListResult{
		Value: []*armcompute.AvailabilitySet{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet1"),
				Location: to.Ptr("australiasoutheast"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet2"),
				Location: to.Ptr("australiasoutheast"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet3"),
				Location: to.Ptr("westcentralus"),
			},
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet4"),
				Location: to.Ptr("westcentralus"),
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.AvailabilitySetsClientListOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListResponse{AvailabilitySetListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_List_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.AvailabilitySetListResult))
	}
}

func (testsuite *FakeTestSuite) TestAvailabilitySets_ListAvailableSizes() {
	ctx := context.Background()
	fakeServer := fake.AvailabilitySetsServer{}
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewAvailabilitySetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListAvailableSizes_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_ListAvailableSizes_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleAvailabilitySetName string
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.VirtualMachineSizeListResult{
		Value: []*armcompute.VirtualMachineSize{
			{
				Name:                 to.Ptr("Standard_A1_V2"),
				MaxDataDiskCount:     to.Ptr[int32](2),
				MemoryInMB:           to.Ptr[int32](2048),
				NumberOfCores:        to.Ptr[int32](1),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](10240),
			},
			{
				Name:                 to.Ptr("Standard_A2_V2"),
				MaxDataDiskCount:     to.Ptr[int32](4),
				MemoryInMB:           to.Ptr[int32](4096),
				NumberOfCores:        to.Ptr[int32](2),
				OSDiskSizeInMB:       to.Ptr[int32](1047552),
				ResourceDiskSizeInMB: to.Ptr[int32](20480),
			}},
	}

	fakeServer.NewListAvailableSizesPager = func(resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListAvailableSizesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListAvailableSizesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListAvailableSizesResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAvailableSizesPager(exampleResourceGroupName, exampleAvailabilitySetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListAvailableSizes_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListAvailableSizes_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySet_ListAvailableSizes_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleAvailabilitySetName = "aa"

	exampleRes = armcompute.VirtualMachineSizeListResult{}

	fakeServer.NewListAvailableSizesPager = func(resourceGroupName string, availabilitySetName string, options *armcompute.AvailabilitySetsClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.AvailabilitySetsClientListAvailableSizesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleAvailabilitySetName, availabilitySetName)
		resp = azfake.PagerResponder[armcompute.AvailabilitySetsClientListAvailableSizesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.AvailabilitySetsClientListAvailableSizesResponse{VirtualMachineSizeListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListAvailableSizesPager(exampleResourceGroupName, exampleAvailabilitySetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/availabilitySetExamples/AvailabilitySet_ListAvailableSizes_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineSizeListResult))
	}
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	var exampleParameters armcompute.ProximityPlacementGroup
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"
	exampleParameters = armcompute.ProximityPlacementGroup{
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			Intent: &armcompute.ProximityPlacementGroupPropertiesIntent{
				VMSizes: []*string{
					to.Ptr("Basic_A0"),
					to.Ptr("Basic_A2")},
			},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			Intent: &armcompute.ProximityPlacementGroupPropertiesIntent{
				VMSizes: []*string{
					to.Ptr("Basic_A0"),
					to.Ptr("Basic_A2")},
			},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, parameters armcompute.ProximityPlacementGroup, options *armcompute.ProximityPlacementGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientCreateOrUpdateResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Update() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	var exampleParameters armcompute.ProximityPlacementGroupUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"
	exampleParameters = armcompute.ProximityPlacementGroupUpdate{
		Tags: map[string]*string{
			"additionalProp1": to.Ptr("string"),
		},
	}

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, parameters armcompute.ProximityPlacementGroupUpdate, options *armcompute.ProximityPlacementGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientUpdateResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Patch.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Delete() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a proximity placement group."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, options *armcompute.ProximityPlacementGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Delete.json")
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_Get() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get proximity placement groups."},
	})
	var exampleResourceGroupName string
	var exampleProximityPlacementGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleProximityPlacementGroupName = "myProximityPlacementGroup"

	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			Intent: &armcompute.ProximityPlacementGroupPropertiesIntent{
				VMSizes: []*string{
					to.Ptr("Basic_A0"),
					to.Ptr("Basic_A2")},
			},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, proximityPlacementGroupName string, options *armcompute.ProximityPlacementGroupsClientGetOptions) (resp azfake.Responder[armcompute.ProximityPlacementGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleProximityPlacementGroupName, proximityPlacementGroupName)
		resp = azfake.Responder[armcompute.ProximityPlacementGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ProximityPlacementGroupsClientGetResponse{ProximityPlacementGroup: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleProximityPlacementGroupName, &armcompute.ProximityPlacementGroupsClientGetOptions{IncludeColocationStatus: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup))
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List proximity placement groups."},
	})

	exampleRes := armcompute.ProximityPlacementGroupListResult{
		Value: []*armcompute.ProximityPlacementGroup{
			{
				Name:     to.Ptr("myProximityPlacementGroup"),
				Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.ProximityPlacementGroupProperties{
					AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					Intent: &armcompute.ProximityPlacementGroupPropertiesIntent{
						VMSizes: []*string{
							to.Ptr("Basic_A0"),
							to.Ptr("Basic_A2")},
					},
					ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
					VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
				},
				Zones: []*string{
					to.Ptr("1")},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.ProximityPlacementGroupsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ProximityPlacementGroupsClientListBySubscriptionResponse{ProximityPlacementGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ProximityPlacementGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestProximityPlacementGroups_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.ProximityPlacementGroupsServer{}
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewProximityPlacementGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List proximity placement group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.ProximityPlacementGroupListResult{
		Value: []*armcompute.ProximityPlacementGroup{
			{
				Name:     to.Ptr("myProximityPlacementGroup"),
				Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.ProximityPlacementGroupProperties{
					AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					Intent: &armcompute.ProximityPlacementGroupPropertiesIntent{
						VMSizes: []*string{
							to.Ptr("Basic_A0"),
							to.Ptr("Basic_A2")},
					},
					ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
					VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
					VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
						{
							ID: to.Ptr("string"),
						}},
				},
				Zones: []*string{
					to.Ptr("1")},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.ProximityPlacementGroupsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ProximityPlacementGroupsClientListByResourceGroupResponse{ProximityPlacementGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/proximityPlacementGroupExamples/ProximityPlacementGroup_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ProximityPlacementGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_CreateOrUpdate_WithUltraSSD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group with Ultra SSD support."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleParameters armcompute.DedicatedHostGroup
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleParameters = armcompute.DedicatedHostGroup{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			AdditionalCapabilities: &armcompute.DedicatedHostGroupPropertiesAdditionalCapabilities{
				UltraSSDEnabled: to.Ptr(true),
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			AdditionalCapabilities: &armcompute.DedicatedHostGroupPropertiesAdditionalCapabilities{
				UltraSSDEnabled: to.Ptr(true),
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, parameters armcompute.DedicatedHostGroup, options *armcompute.DedicatedHostGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_CreateOrUpdate_WithUltraSSD.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleParameters = armcompute.DedicatedHostGroup{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes = armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, parameters armcompute.DedicatedHostGroup, options *armcompute.DedicatedHostGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientCreateOrUpdateResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Update() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleParameters armcompute.DedicatedHostGroupUpdate
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaa"
	exampleParameters = armcompute.DedicatedHostGroupUpdate{
		Tags: map[string]*string{
			"key9921": to.Ptr("aaaaaaaaaa"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](26),
									VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
	}

	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		Type:     to.Ptr("aaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("aaaa"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](26),
									VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, hostGroupName string, parameters armcompute.DedicatedHostGroupUpdate, options *armcompute.DedicatedHostGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientUpdateResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleHostGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaaaaaaa"
	exampleParameters = armcompute.DedicatedHostGroupUpdate{}

	exampleRes = armcompute.DedicatedHostGroup{
		Location: to.Ptr("westus"),
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, hostGroupName string, parameters armcompute.DedicatedHostGroupUpdate, options *armcompute.DedicatedHostGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientUpdateResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err = client.Update(ctx, exampleResourceGroupName, exampleHostGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Delete() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "a"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleHostGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleHostGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_Get() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a dedicated host group."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"

	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost2"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost1"),
					},
					{
						AssetID: to.Ptr("f293d4ac-5eea-4be2-b0c0-0fcaa09aebf8"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost2"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("3")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostGroupsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientGetResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleHostGroupName, &armcompute.DedicatedHostGroupsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Get_UltraSSDEnabledDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultraSSDEnabled dedicated host group."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"

	exampleRes = armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			AdditionalCapabilities: &armcompute.DedicatedHostGroupPropertiesAdditionalCapabilities{
				UltraSSDEnabled: to.Ptr(true),
			},
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("3")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostGroupsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.Responder[armcompute.DedicatedHostGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostGroupsClientGetResponse{DedicatedHostGroup: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleHostGroupName, &armcompute.DedicatedHostGroupsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_Get_UltraSSDEnabledDedicatedHostGroup.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHostGroup))
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListByResourceGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_ListByResourceGroup_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rgcompute"

	exampleRes := armcompute.DedicatedHostGroupListResult{
		Value: []*armcompute.DedicatedHostGroup{
			{
				Name:     to.Ptr("myDedicatedHostGroup"),
				Type:     to.Ptr("aaaa"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
				Location: to.Ptr("westus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.DedicatedHostGroupProperties{
					Hosts: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("aaaa"),
						}},
					InstanceView: &armcompute.DedicatedHostGroupInstanceView{
						Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
							{
								AssetID: to.Ptr("aaaa"),
								AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
									AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
										{
											Count:  to.Ptr[float64](26),
											VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										}},
								},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
							}},
					},
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					SupportAutomaticPlacement: to.Ptr(true),
				},
				Zones: []*string{
					to.Ptr("1")},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DedicatedHostGroupsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostGroupsClientListByResourceGroupResponse{DedicatedHostGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListByResourceGroup_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostGroupListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListByResourceGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_ListByResourceGroup_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"

	exampleRes = armcompute.DedicatedHostGroupListResult{
		Value: []*armcompute.DedicatedHostGroup{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DedicatedHostGroupsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostGroupsClientListByResourceGroupResponse{DedicatedHostGroupListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListByResourceGroup_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestDedicatedHostGroups_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostGroupsServer{}
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListBySubscription_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_ListBySubscription_MaximumSet_Gen"},
	})

	exampleRes := armcompute.DedicatedHostGroupListResult{
		Value: []*armcompute.DedicatedHostGroup{
			{
				Name:     to.Ptr("myDedicatedHostGroup"),
				Type:     to.Ptr("aaaa"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
				Location: to.Ptr("westus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.DedicatedHostGroupProperties{
					Hosts: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("aaaa"),
						}},
					InstanceView: &armcompute.DedicatedHostGroupInstanceView{
						Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
							{
								AssetID: to.Ptr("aaaa"),
								AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
									AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
										{
											Count:  to.Ptr[float64](26),
											VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										}},
								},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
							}},
					},
					PlatformFaultDomainCount:  to.Ptr[int32](3),
					SupportAutomaticPlacement: to.Ptr(true),
				},
				Zones: []*string{
					to.Ptr("1")},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.DedicatedHostGroupsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostGroupsClientListBySubscriptionResponse{DedicatedHostGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListBySubscription_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostGroupListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListBySubscription_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroup_ListBySubscription_MinimumSet_Gen"},
	})

	exampleRes = armcompute.DedicatedHostGroupListResult{
		Value: []*armcompute.DedicatedHostGroup{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.DedicatedHostGroupsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.DedicatedHostGroupsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostGroupsClientListBySubscriptionResponse{DedicatedHostGroupListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHostGroup_ListBySubscription_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host ."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	var exampleParameters armcompute.DedicatedHost
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myDedicatedHost"
	exampleParameters = armcompute.DedicatedHost{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			PlatformFaultDomain: to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(false),
			HostID:               to.Ptr("{GUID}"),
			LicenseType:          to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain:  to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHost, options *armcompute.DedicatedHostsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientCreateOrUpdateResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Update() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	var exampleParameters armcompute.DedicatedHostUpdate
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaaaaa"
	exampleHostName = "aaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.DedicatedHostUpdate{
		Tags: map[string]*string{
			"key8813": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](26),
							VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
			},
			LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain: to.Ptr[int32](1),
		},
	}

	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("aaaaaaaaaaaaaaaa"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](26),
							VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
			},
			LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("DSv3-Type1"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHostUpdate, options *armcompute.DedicatedHostsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientUpdateResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aa"
	exampleHostName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.DedicatedHostUpdate{}

	exampleRes = armcompute.DedicatedHost{
		Location: to.Ptr("westus"),
		SKU:      &armcompute.SKU{},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHostUpdate, options *armcompute.DedicatedHostsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientUpdateResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_Resize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_Update_Resize"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaaaaa"
	exampleHostName = "aaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.DedicatedHostUpdate{
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	exampleRes = armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			LicenseType:          to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain:  to.Ptr[int32](1),
			ProvisioningState:    to.Ptr("Succeeded"),
			ProvisioningTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("DSv3-Type1"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHostUpdate, options *armcompute.DedicatedHostsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientUpdateResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_Resize.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Update_Resize.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Delete() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaa"
	exampleHostName = "aaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaaaaaaaaaaa"
	exampleHostName = "aaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Get() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated host."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myHost"

	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myHost"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](10),
							VMSize: to.Ptr("Standard_A1"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					{
						Code:          to.Ptr("HealthState/available"),
						DisplayStatus: to.Ptr("Host available"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.313Z"); return t }()),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.313Z"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/vm1"),
				}},
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.Responder[armcompute.DedicatedHostsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DedicatedHostsClientGetResponse{DedicatedHost: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, &armcompute.DedicatedHostsClientGetOptions{Expand: to.Ptr(armcompute.InstanceViewTypesInstanceView)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DedicatedHost))
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_ListByHostGroup() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListByHostGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_ListByHostGroup_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	exampleRes := armcompute.DedicatedHostListResult{
		Value: []*armcompute.DedicatedHost{
			{
				Name:     to.Ptr("myDedicatedHost"),
				Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
				Location: to.Ptr("westus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.DedicatedHostProperties{
					AutoReplaceOnFailure: to.Ptr(true),
					HostID:               to.Ptr("{GUID}"),
					InstanceView: &armcompute.DedicatedHostInstanceView{
						AssetID: to.Ptr("aaaaaaaaaaaaaaaa"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](26),
									VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
					},
					LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
					PlatformFaultDomain: to.Ptr[int32](1),
					ProvisioningState:   to.Ptr("Succeeded"),
					ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
					VirtualMachines: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("aaaa"),
						}},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("DSv3-Type1"),
					Capacity: to.Ptr[int64](7),
					Tier:     to.Ptr("aaa"),
				},
			}},
	}

	fakeServer.NewListByHostGroupPager = func(resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostsClientListByHostGroupOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostsClientListByHostGroupResponse{DedicatedHostListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByHostGroupPager(exampleResourceGroupName, exampleHostGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListByHostGroup_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListByHostGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHost_ListByHostGroup_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleHostGroupName = "aaaa"

	exampleRes = armcompute.DedicatedHostListResult{
		Value: []*armcompute.DedicatedHost{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myHost"),
				Location: to.Ptr("westus"),
				SKU:      &armcompute.SKU{},
			}},
	}

	fakeServer.NewListByHostGroupPager = func(resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostsClientListByHostGroupOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		resp = azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostsClientListByHostGroupResponse{DedicatedHostListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListByHostGroupPager(exampleResourceGroupName, exampleHostGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListByHostGroup_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostListResult))
	}
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_Restart() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Dedicated Host."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myHost"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.PollerResponder[armcompute.DedicatedHostsClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DedicatedHostsClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleHostGroupName, exampleHostName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_Restart.json")
}

func (testsuite *FakeTestSuite) TestDedicatedHosts_ListAvailableSizes() {
	ctx := context.Background()
	fakeServer := fake.DedicatedHostsServer{}
	client, err := armcompute.NewDedicatedHostsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDedicatedHostsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListAvailableSizes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Available Dedicated Host Sizes."},
	})
	var exampleResourceGroupName string
	var exampleHostGroupName string
	var exampleHostName string
	exampleResourceGroupName = "myResourceGroup"
	exampleHostGroupName = "myDedicatedHostGroup"
	exampleHostName = "myHost"

	exampleRes := armcompute.DedicatedHostSizeListResult{
		Value: []*string{
			to.Ptr("Dsv3-Type1"),
			to.Ptr("Esv3-Type1")},
	}

	fakeServer.NewListAvailableSizesPager = func(resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostsClientListAvailableSizesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleHostGroupName, hostGroupName)
		testsuite.Require().Equal(exampleHostName, hostName)
		resp = azfake.PagerResponder[armcompute.DedicatedHostsClientListAvailableSizesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DedicatedHostsClientListAvailableSizesResponse{DedicatedHostSizeListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAvailableSizesPager(exampleResourceGroupName, exampleHostGroupName, exampleHostName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/dedicatedHostExamples/DedicatedHost_ListAvailableSizes.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DedicatedHostSizeListResult))
	}
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListBySubscription_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_ListBySubscription_MaximumSet_Gen"},
	})

	exampleRes := armcompute.SSHPublicKeysGroupListResult{
		Value: []*armcompute.SSHPublicKeyResource{
			{
				Name:     to.Ptr("mySshPublicKeyName"),
				Type:     to.Ptr("aaaa"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key6396": to.Ptr("aaaaaaaaaaaaa"),
					"key8839": to.Ptr("aaa"),
				},
				Properties: &armcompute.SSHPublicKeyResourceProperties{
					PublicKey: to.Ptr("{ssh-rsa public key}"),
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.SSHPublicKeysClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.SSHPublicKeysClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.SSHPublicKeysClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SSHPublicKeysClientListBySubscriptionResponse{SSHPublicKeysGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListBySubscription_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SSHPublicKeysGroupListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListBySubscription_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_ListBySubscription_MinimumSet_Gen"},
	})

	exampleRes = armcompute.SSHPublicKeysGroupListResult{
		Value: []*armcompute.SSHPublicKeyResource{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.SSHPublicKeysClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.SSHPublicKeysClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.SSHPublicKeysClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SSHPublicKeysClientListBySubscriptionResponse{SSHPublicKeysGroupListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListBySubscription_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SSHPublicKeysGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListByResourceGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_ListByResourceGroup_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "rgcompute"

	exampleRes := armcompute.SSHPublicKeysGroupListResult{
		Value: []*armcompute.SSHPublicKeyResource{
			{
				Name:     to.Ptr("mySshPublicKeyName"),
				Type:     to.Ptr("aaaa"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key6396": to.Ptr("aaaaaaaaaaaaa"),
					"key8839": to.Ptr("aaa"),
				},
				Properties: &armcompute.SSHPublicKeyResourceProperties{
					PublicKey: to.Ptr("{ssh-rsa public key}"),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.SSHPublicKeysClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.SSHPublicKeysClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.SSHPublicKeysClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SSHPublicKeysClientListByResourceGroupResponse{SSHPublicKeysGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListByResourceGroup_MaximumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SSHPublicKeysGroupListResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListByResourceGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_ListByResourceGroup_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"

	exampleRes = armcompute.SSHPublicKeysGroupListResult{
		Value: []*armcompute.SSHPublicKeyResource{
			{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/rgcompute/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
				Location: to.Ptr("westus"),
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.SSHPublicKeysClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.SSHPublicKeysClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.SSHPublicKeysClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SSHPublicKeysClientListByResourceGroupResponse{SSHPublicKeysGroupListResult: exampleRes}, nil)
		return
	}
	pager = client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_ListByResourceGroup_MinimumSet_Gen.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SSHPublicKeysGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Create() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new SSH public key resource."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	var exampleParameters armcompute.SSHPublicKeyResource
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"
	exampleParameters = armcompute.SSHPublicKeyResource{
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	fakeServer.Create = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters armcompute.SSHPublicKeyResource, options *armcompute.SSHPublicKeysClientCreateOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.SSHPublicKeysClientCreateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientCreateResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err := client.Create(ctx, exampleResourceGroupName, exampleSshPublicKeyName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Update() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	var exampleParameters armcompute.SSHPublicKeyUpdateResource
	exampleResourceGroupName = "rgcompute"
	exampleSshPublicKeyName = "aaaaaaaaaaaa"
	exampleParameters = armcompute.SSHPublicKeyUpdateResource{
		Tags: map[string]*string{
			"key2854": to.Ptr("a"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		Type:     to.Ptr("aaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key6396": to.Ptr("aaaaaaaaaaaaa"),
			"key8839": to.Ptr("aaa"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters armcompute.SSHPublicKeyUpdateResource, options *armcompute.SSHPublicKeysClientUpdateOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.SSHPublicKeysClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientUpdateResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleSshPublicKeyName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleSshPublicKeyName = "aaaaaaaaaaa"
	exampleParameters = armcompute.SSHPublicKeyUpdateResource{}

	exampleRes = armcompute.SSHPublicKeyResource{
		Location: to.Ptr("westus"),
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters armcompute.SSHPublicKeyUpdateResource, options *armcompute.SSHPublicKeysClientUpdateOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.SSHPublicKeysClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientUpdateResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err = client.Update(ctx, exampleResourceGroupName, exampleSshPublicKeyName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Delete() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	exampleResourceGroupName = "rgcompute"
	exampleSshPublicKeyName = "aaaaaaaaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientDeleteOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKey_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleSshPublicKeyName = "aaaaaaaaaaaaaaaaaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientDeleteOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_Get() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ssh public key."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"

	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientGetOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientGetResponse{SSHPublicKeyResource: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource))
}

func (testsuite *FakeTestSuite) TestSSHPublicKeys_GenerateKeyPair() {
	ctx := context.Background()
	fakeServer := fake.SSHPublicKeysServer{}
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSSHPublicKeysServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_GenerateKeyPair.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an SSH key pair."},
	})
	var exampleResourceGroupName string
	var exampleSshPublicKeyName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSshPublicKeyName = "mySshPublicKeyName"

	exampleRes := armcompute.SSHPublicKeyGenerateKeyPairResult{
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		PrivateKey: to.Ptr("{ssh private key}"),
		PublicKey:  to.Ptr("{ssh-rsa public key}"),
	}

	fakeServer.GenerateKeyPair = func(ctx context.Context, resourceGroupName string, sshPublicKeyName string, options *armcompute.SSHPublicKeysClientGenerateKeyPairOptions) (resp azfake.Responder[armcompute.SSHPublicKeysClientGenerateKeyPairResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSshPublicKeyName, sshPublicKeyName)
		resp = azfake.Responder[armcompute.SSHPublicKeysClientGenerateKeyPairResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SSHPublicKeysClientGenerateKeyPairResponse{SSHPublicKeyGenerateKeyPairResult: exampleRes}, nil)
		return
	}
	res, err := client.GenerateKeyPair(ctx, exampleResourceGroupName, exampleSshPublicKeyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/sshPublicKeyExamples/SshPublicKey_GenerateKeyPair.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SSHPublicKeyGenerateKeyPairResult))
}

func (testsuite *FakeTestSuite) TestImages_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlobWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob with DiskEncryptionSet resource."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	var exampleParameters armcompute.Image
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlobWithDiskEncryptionSet.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlobWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlob.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromABlob.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk with DiskEncryptionSet resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDiskWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDiskWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshotWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot with DiskEncryptionSet resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshotWithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshotWithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				OSDisk: &armcompute.ImageOSDisk{
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from an existing virtual machine."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myVM_OsDisk_1_6dc293b7d811433196903acf92665022"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAVM.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_CreateFromAVM.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromABlobIncluded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a blob."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromABlobIncluded.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromABlobIncluded.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromAManagedDiskIncluded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromAManagedDiskIncluded.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromAManagedDiskIncluded.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromASnapshotIncluded.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.Image{
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.Image, options *armcompute.ImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientCreateOrUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromASnapshotIncluded.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Create_DataDiskFromASnapshotIncluded.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_Update() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates tags of an Image."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	var exampleParameters armcompute.ImageUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"
	exampleParameters = armcompute.ImageUpdate{
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, imageName string, parameters armcompute.ImageUpdate, options *armcompute.ImagesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.ImagesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.ImagesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientUpdateResponse{Image: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleImageName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_Delete() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Image_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	exampleResourceGroupName = "rgcompute"
	exampleImageName = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, imageName string, options *armcompute.ImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.ImagesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		resp = azfake.PollerResponder[armcompute.ImagesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Image_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleImageName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, imageName string, options *armcompute.ImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.ImagesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		resp = azfake.PollerResponder[armcompute.ImagesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.ImagesClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Images_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestImages_Get() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a virtual machine image."},
	})
	var exampleResourceGroupName string
	var exampleImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleImageName = "myImage"

	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, imageName string, options *armcompute.ImagesClientGetOptions) (resp azfake.Responder[armcompute.ImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleImageName, imageName)
		resp = azfake.Responder[armcompute.ImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.ImagesClientGetResponse{Image: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleImageName, &armcompute.ImagesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Image))
}

func (testsuite *FakeTestSuite) TestImages_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.ImageListResult{
		Value: []*armcompute.Image{
			{
				Name:     to.Ptr("myImage"),
				Type:     to.Ptr("Microsoft.Compute/images"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.ImageProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.ImageStorageProfile{
						DataDisks: []*armcompute.ImageDataDisk{
							{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								Lun:                to.Ptr[int32](1),
							}},
						OSDisk: &armcompute.ImageOSDisk{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
							},
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
							OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
						},
					},
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.ImagesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.ImagesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.ImagesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ImagesClientListByResourceGroupResponse{ImageListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ImageListResult))
	}
}

func (testsuite *FakeTestSuite) TestImages_List() {
	ctx := context.Background()
	fakeServer := fake.ImagesServer{}
	client, err := armcompute.NewImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a subscription."},
	})

	exampleRes := armcompute.ImageListResult{
		Value: []*armcompute.Image{
			{
				Name:     to.Ptr("myImage"),
				Type:     to.Ptr("Microsoft.Compute/images"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.ImageProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					StorageProfile: &armcompute.ImageStorageProfile{
						DataDisks: []*armcompute.ImageDataDisk{
							{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								Lun:                to.Ptr[int32](1),
							}},
						OSDisk: &armcompute.ImageOSDisk{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
							},
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
							OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ImagesClientListOptions) (resp azfake.PagerResponder[armcompute.ImagesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ImagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ImagesClientListResponse{ImageListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/imageExamples/Image_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ImageListResult))
	}
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_CreateOrUpdate_ForCrossRegionCopy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection for cross region copy."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleParameters armcompute.RestorePointCollection
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "myRpc"
	exampleParameters = armcompute.RestorePointCollection{
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/sourceRpcName"),
			},
		},
	}

	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, parameters armcompute.RestorePointCollection, options *armcompute.RestorePointCollectionsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientCreateOrUpdateResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_CreateOrUpdate_ForCrossRegionCopy.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "myRpc"
	exampleParameters = armcompute.RestorePointCollection{
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, parameters armcompute.RestorePointCollection, options *armcompute.RestorePointCollectionsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientCreateOrUpdateResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err = client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Update() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollection_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleParameters armcompute.RestorePointCollectionUpdate
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.RestorePointCollectionUpdate{
		Tags: map[string]*string{
			"key8536": to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
		},
	}

	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags:     map[string]*string{},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					ID:   to.Ptr("aaaaaaaaaaa"),
					Properties: &armcompute.RestorePointProperties{
						ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesCrashConsistent),
						ExcludeDisks: []*armcompute.APIEntityReference{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SourceMetadata: &armcompute.RestorePointSourceMetadata{
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled:    to.Ptr(true),
									StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								},
							},
							HardwareProfile: &armcompute.HardwareProfile{
								VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
								VMSizeProperties: &armcompute.VMSizeProperties{
									VCPUsAvailable: to.Ptr[int32](9),
									VCPUsPerCore:   to.Ptr[int32](12),
								},
							},
							LicenseType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location:    to.Ptr("westus"),
							OSProfile: &armcompute.OSProfile{
								AdminUsername:            to.Ptr("admin"),
								AllowExtensionOperations: to.Ptr(true),
								ComputerName:             to.Ptr("computerName"),
								CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(true),
									PatchSettings: &armcompute.LinuxPatchSettings{
										AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
										PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
									},
									ProvisionVMAgent: to.Ptr(true),
									SSH: &armcompute.SSHConfiguration{
										PublicKeys: []*armcompute.SSHPublicKey{
											{
												Path:    to.Ptr("aaa"),
												KeyData: to.Ptr("aaaaaa"),
											}},
									},
								},
								RequireGuestProvisionSignal: to.Ptr(true),
								Secrets: []*armcompute.VaultSecretGroup{
									{
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										VaultCertificates: []*armcompute.VaultCertificate{
											{
												CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												CertificateURL:   to.Ptr("aaaaaaa"),
											}},
									}},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
										{
											ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
											Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											PassName:      to.Ptr("OobeSystem"),
											SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
										}},
									EnableAutomaticUpdates: to.Ptr(true),
									PatchSettings: &armcompute.PatchSettings{
										AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
										EnableHotpatching: to.Ptr(true),
										PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
									},
									ProvisionVMAgent: to.Ptr(true),
									TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									WinRM: &armcompute.WinRMConfiguration{
										Listeners: []*armcompute.WinRMListener{
											{
												CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
												Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
											}},
									},
								},
							},
							SecurityProfile: &armcompute.SecurityProfile{
								EncryptionAtHost: to.Ptr(true),
								SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
								UefiSettings: &armcompute.UefiSettings{
									SecureBootEnabled: to.Ptr(true),
									VTpmEnabled:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
								DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
									{
										Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
										Caching: to.Ptr(armcompute.CachingTypesNone),
										DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
										},
										DiskSizeGB: to.Ptr[int32](24),
										Lun:        to.Ptr[int32](1),
										ManagedDisk: &armcompute.ManagedDiskParameters{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
											DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
												ID: to.Ptr("aaaaaaaaaaaa"),
											},
											StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
										},
									}},
								OSDisk: &armcompute.RestorePointSourceVMOSDisk{
									Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									Caching: to.Ptr(armcompute.CachingTypesReadWrite),
									DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
									},
									DiskSizeGB: to.Ptr[int32](3),
									EncryptionSettings: &armcompute.DiskEncryptionSettings{
										DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
											SecretURL: to.Ptr("aaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
										Enabled: to.Ptr(true),
										KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
											KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
									},
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
								},
							},
							VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.593Z"); return t }()),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, parameters armcompute.RestorePointCollectionUpdate, options *armcompute.RestorePointCollectionsClientUpdateOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientUpdateResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollection_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.RestorePointCollectionUpdate{}

	exampleRes = armcompute.RestorePointCollection{
		Location: to.Ptr("norwayeast"),
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, parameters armcompute.RestorePointCollectionUpdate, options *armcompute.RestorePointCollectionsClientUpdateOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientUpdateResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err = client.Update(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Delete() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollection_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.RestorePointCollectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.PollerResponder[armcompute.RestorePointCollectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.RestorePointCollectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollection_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.RestorePointCollectionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.PollerResponder[armcompute.RestorePointCollectionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.RestorePointCollectionsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_Get() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection (but not the restore points contained in the restore point collection)"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "myRpc"

	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientGetResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, &armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Get_WithContainedRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection, including the restore points contained in the restore point collection"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"

	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("rpcName"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name: to.Ptr("restorePointName"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName"),
					Properties: &armcompute.RestorePointProperties{
						ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
						ExcludeDisks: []*armcompute.APIEntityReference{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SourceMetadata: &armcompute.RestorePointSourceMetadata{
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled: to.Ptr(true),
								},
							},
							HardwareProfile: &armcompute.HardwareProfile{
								VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
							},
							Location: to.Ptr("westus"),
							OSProfile: &armcompute.OSProfile{
								AdminUsername:               to.Ptr("admin"),
								AllowExtensionOperations:    to.Ptr(true),
								ComputerName:                to.Ptr("computerName"),
								RequireGuestProvisionSignal: to.Ptr(true),
								Secrets:                     []*armcompute.VaultSecretGroup{},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									EnableAutomaticUpdates: to.Ptr(true),
									ProvisionVMAgent:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
								DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
									{
										Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
										Caching: to.Ptr(armcompute.CachingTypesNone),
										DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
										},
										Lun: to.Ptr[int32](1),
										ManagedDisk: &armcompute.ManagedDiskParameters{
											ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
											StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
										},
									}},
								OSDisk: &armcompute.RestorePointSourceVMOSDisk{
									Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									Caching: to.Ptr(armcompute.CachingTypesReadWrite),
									DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
									},
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
								},
							},
							VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.840Z"); return t }()),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, options *armcompute.RestorePointCollectionsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		resp = azfake.Responder[armcompute.RestorePointCollectionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointCollectionsClientGetResponse{RestorePointCollection: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, &armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_Get_WithContainedRestorePoints.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePointCollection))
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_List() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.RestorePointCollectionListResult{
		Value: []*armcompute.RestorePointCollection{
			{
				Name:     to.Ptr("restorePointCollection1"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
						Location: to.Ptr("westus"),
					},
				},
			},
			{
				Name:     to.Ptr("restorePointCollection2"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
						Location: to.Ptr("westus"),
					},
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.RestorePointCollectionsClientListOptions) (resp azfake.PagerResponder[armcompute.RestorePointCollectionsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.RestorePointCollectionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.RestorePointCollectionsClientListResponse{RestorePointCollectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RestorePointCollectionListResult))
	}
}

func (testsuite *FakeTestSuite) TestRestorePointCollections_ListAll() {
	ctx := context.Background()
	fakeServer := fake.RestorePointCollectionsServer{}
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointCollectionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a subscription"},
	})

	exampleRes := armcompute.RestorePointCollectionListResult{
		Value: []*armcompute.RestorePointCollection{
			{
				Name:     to.Ptr("restorePointCollection1"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup1/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Test"),
						Location: to.Ptr("westus"),
					},
				},
			},
			{
				Name:     to.Ptr("restorePointCollection2"),
				Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup2/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"myTag1": to.Ptr("tagValue1"),
				},
				Properties: &armcompute.RestorePointCollectionProperties{
					ProvisioningState:        to.Ptr("Succeeded"),
					RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
					Source: &armcompute.RestorePointCollectionSourceProperties{
						ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Prod"),
						Location: to.Ptr("westus"),
					},
				},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.RestorePointCollectionsClientListAllOptions) (resp azfake.PagerResponder[armcompute.RestorePointCollectionsClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.RestorePointCollectionsClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.RestorePointCollectionsClientListAllResponse{RestorePointCollectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePointCollection_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RestorePointCollectionListResult))
	}
}

func (testsuite *FakeTestSuite) TestRestorePoints_Create() {
	ctx := context.Background()
	fakeServer := fake.RestorePointsServer{}
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Copy_BetweenRegions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Copy a restore point to a different region"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleRestorePointName string
	var exampleParameters armcompute.RestorePoint
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"
	exampleParameters = armcompute.RestorePoint{
		Properties: &armcompute.RestorePointProperties{
			SourceRestorePoint: &armcompute.APIEntityReference{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/sourceRpcName/restorePoints/sourceRpName"),
			},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, parameters armcompute.RestorePoint, options *armcompute.RestorePointsClientBeginCreateOptions) (resp azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, armcompute.RestorePointsClientCreateResponse{}, nil)
		return
	}
	poller, err := client.BeginCreate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Copy_BetweenRegions.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Copy_BetweenRegions.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a restore point"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"
	exampleParameters = armcompute.RestorePoint{
		Properties: &armcompute.RestorePointProperties{
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
				}},
		},
	}

	fakeServer.BeginCreate = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, parameters armcompute.RestorePoint, options *armcompute.RestorePointsClientBeginCreateOptions) (resp azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.RestorePointsClientCreateResponse]{}
		resp.SetTerminalResponse(http.StatusCreated, armcompute.RestorePointsClientCreateResponse{}, nil)
		return
	}
	poller, err = client.BeginCreate(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Create.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Create.json")
}

func (testsuite *FakeTestSuite) TestRestorePoints_Delete() {
	ctx := context.Background()
	fakeServer := fake.RestorePointsServer{}
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePoint_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleRestorePointName string
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaaaaaaa"
	exampleRestorePointName = "a"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, options *armcompute.RestorePointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.RestorePointsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		resp = azfake.PollerResponder[armcompute.RestorePointsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.RestorePointsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePoint_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleRestorePointCollectionName = "aaaaaaaaaaaaaaaaa"
	exampleRestorePointName = "aaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, options *armcompute.RestorePointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.RestorePointsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		resp = azfake.PollerResponder[armcompute.RestorePointsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.RestorePointsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestRestorePoints_Get() {
	ctx := context.Background()
	fakeServer := fake.RestorePointsServer{}
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewRestorePointsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point"},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"

	exampleRes := armcompute.RestorePoint{
		Name: to.Ptr("rpName"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		Properties: &armcompute.RestorePointProperties{
			ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			SourceMetadata: &armcompute.RestorePointSourceMetadata{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
				},
				Location: to.Ptr("westus"),
				OSProfile: &armcompute.OSProfile{
					AdminUsername:               to.Ptr("admin"),
					AllowExtensionOperations:    to.Ptr(true),
					ComputerName:                to.Ptr("computerName"),
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
					DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
						{
							Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
							Caching: to.Ptr(armcompute.CachingTypesNone),
							DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					OSDisk: &armcompute.RestorePointSourceVMOSDisk{
						Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						Caching: to.Ptr(armcompute.CachingTypesReadWrite),
						DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
					},
				},
				VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.840Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, options *armcompute.RestorePointsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		resp = azfake.Responder[armcompute.RestorePointsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointsClientGetResponse{RestorePoint: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, &armcompute.RestorePointsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePoint))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Get_WithInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get restore point with instance view"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpcName"
	exampleRestorePointName = "rpName"

	exampleRes = armcompute.RestorePoint{
		Name: to.Ptr("rpName"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		Properties: &armcompute.RestorePointProperties{
			ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
			InstanceView: &armcompute.RestorePointInstanceView{
				DiskRestorePoints: []*armcompute.DiskRestorePointInstanceView{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						ReplicationStatus: &armcompute.DiskRestorePointReplicationStatus{
							CompletionPercent: to.Ptr[int32](100),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("ReplicationState/succeeded"),
								DisplayStatus: to.Ptr("Succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
						},
					},
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
						ReplicationStatus: &armcompute.DiskRestorePointReplicationStatus{
							CompletionPercent: to.Ptr[int32](100),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("ReplicationState/succeeded"),
								DisplayStatus: to.Ptr("Succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
						},
					}},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ReplicationState/succeeded"),
						DisplayStatus: to.Ptr("Succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SourceMetadata: &armcompute.RestorePointSourceMetadata{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
				},
				Location: to.Ptr("westus"),
				OSProfile: &armcompute.OSProfile{
					AdminUsername:               to.Ptr("admin"),
					AllowExtensionOperations:    to.Ptr(true),
					ComputerName:                to.Ptr("computerName"),
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
					DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
						{
							Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
							Caching: to.Ptr(armcompute.CachingTypesNone),
							DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					OSDisk: &armcompute.RestorePointSourceVMOSDisk{
						Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						Caching: to.Ptr(armcompute.CachingTypesReadWrite),
						DiskRestorePoint: &armcompute.DiskRestorePointAttributes{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
					},
				},
				VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.840Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, restorePointName string, options *armcompute.RestorePointsClientGetOptions) (resp azfake.Responder[armcompute.RestorePointsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleRestorePointName, restorePointName)
		resp = azfake.Responder[armcompute.RestorePointsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.RestorePointsClientGetResponse{RestorePoint: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleRestorePointName, &armcompute.RestorePointsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/restorePointExamples/RestorePoint_Get_WithInstanceView.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RestorePoint))
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a capacity reservation group."},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleParameters armcompute.CapacityReservationGroup
	exampleResourceGroupName = "myResourceGroup"
	exampleCapacityReservationGroupName = "myCapacityReservationGroup"
	exampleParameters = armcompute.CapacityReservationGroup{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("2")},
	}

	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("2")},
	}

	fakeServer.CreateOrUpdate = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, parameters armcompute.CapacityReservationGroup, options *armcompute.CapacityReservationGroupsClientCreateOrUpdateOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientCreateOrUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientCreateOrUpdateResponse{CapacityReservationGroup: exampleRes}, nil)
		return
	}
	res, err := client.CreateOrUpdate(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservationGroup))
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_Update() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroup_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleParameters armcompute.CapacityReservationGroupUpdate
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.CapacityReservationGroupUpdate{
		Tags: map[string]*string{
			"key5355": to.Ptr("aaa"),
		},
		Properties: &armcompute.CapacityReservationGroupProperties{
			InstanceView: &armcompute.CapacityReservationGroupInstanceView{},
		},
	}

	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.CapacityReservationGroupProperties{
			CapacityReservations: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
			InstanceView: &armcompute.CapacityReservationGroupInstanceView{
				CapacityReservations: []*armcompute.CapacityReservationInstanceViewWithName{
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("aaaa"),
								}},
						},
						Name: to.Ptr("aaaaaaaaaaaaaaaa"),
					}},
			},
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("2")},
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, parameters armcompute.CapacityReservationGroupUpdate, options *armcompute.CapacityReservationGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientUpdateResponse{CapacityReservationGroup: exampleRes}, nil)
		return
	}
	res, err := client.Update(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservationGroup))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroup_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.CapacityReservationGroupUpdate{}

	exampleRes = armcompute.CapacityReservationGroup{
		Location: to.Ptr("westus"),
	}

	fakeServer.Update = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, parameters armcompute.CapacityReservationGroupUpdate, options *armcompute.CapacityReservationGroupsClientUpdateOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientUpdateResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientUpdateResponse{CapacityReservationGroup: exampleRes}, nil)
		return
	}
	res, err = client.Update(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservationGroup))
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_Delete() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroup_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "a"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, options *armcompute.CapacityReservationGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroup_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.Delete = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, options *armcompute.CapacityReservationGroupsClientDeleteOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientDeleteResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientDeleteResponse{}, nil)
		return
	}
	_, err = client.Delete(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_Get() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a capacity reservation Group."},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleCapacityReservationGroupName = "myCapacityReservationGroup"

	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.CapacityReservationGroupProperties{
			CapacityReservations: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
				}},
			InstanceView: &armcompute.CapacityReservationGroupInstanceView{
				CapacityReservations: []*armcompute.CapacityReservationInstanceViewWithName{
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							CurrentCapacity: to.Ptr[int32](5),
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
								},
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
								}},
						},
						Name: to.Ptr("myCapacityReservation1"),
					},
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							CurrentCapacity: to.Ptr[int32](5),
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
								},
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM4"),
								}},
						},
						Name: to.Ptr("myCapacityReservation2"),
					}},
			},
		},
		Zones: []*string{
			to.Ptr("3"),
			to.Ptr("1")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, options *armcompute.CapacityReservationGroupsClientGetOptions) (resp azfake.Responder[armcompute.CapacityReservationGroupsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		resp = azfake.Responder[armcompute.CapacityReservationGroupsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationGroupsClientGetResponse{CapacityReservationGroup: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, &armcompute.CapacityReservationGroupsClientGetOptions{Expand: to.Ptr(armcompute.CapacityReservationGroupInstanceViewTypesInstanceView)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservationGroup))
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservation groups in resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.CapacityReservationGroupListResult{
		Value: []*armcompute.CapacityReservationGroup{
			{
				Name:     to.Ptr("{capacityReservationGroupName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.CapacityReservationGroupProperties{
					CapacityReservations: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
						},
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
						}},
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
						}},
				},
			},
			{
				Name:     to.Ptr("{capacityReservationGroupName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.CapacityReservationGroupProperties{
					CapacityReservations: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation3"),
						},
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation4"),
						}},
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
						}},
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.CapacityReservationGroupsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.CapacityReservationGroupsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.CapacityReservationGroupsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CapacityReservationGroupsClientListByResourceGroupResponse{CapacityReservationGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, &armcompute.CapacityReservationGroupsClientListByResourceGroupOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CapacityReservationGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestCapacityReservationGroups_ListBySubscription() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationGroupsServer{}
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationGroupsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservation groups in subscription."},
	})

	exampleRes := armcompute.CapacityReservationGroupListResult{
		Value: []*armcompute.CapacityReservationGroup{
			{
				Name:     to.Ptr("{capacityReservationGroupName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.CapacityReservationGroupProperties{
					CapacityReservations: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
						},
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
						}},
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/virtualMachines/myVM1"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/virtualMachines/myVM2"),
						}},
				},
			},
			{
				Name:     to.Ptr("{capacityReservationGroupName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.CapacityReservationGroupProperties{
					CapacityReservations: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation3"),
						},
						{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation4"),
						}},
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/virtualMachines/myVM3"),
						}},
				},
			}},
	}

	fakeServer.NewListBySubscriptionPager = func(options *armcompute.CapacityReservationGroupsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcompute.CapacityReservationGroupsClientListBySubscriptionResponse]) {
		resp = azfake.PagerResponder[armcompute.CapacityReservationGroupsClientListBySubscriptionResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CapacityReservationGroupsClientListBySubscriptionResponse{CapacityReservationGroupListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListBySubscriptionPager(&armcompute.CapacityReservationGroupsClientListBySubscriptionOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservationGroup_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CapacityReservationGroupListResult))
	}
}

func (testsuite *FakeTestSuite) TestCapacityReservations_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationsServer{}
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a capacity reservation ."},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleCapacityReservationName string
	var exampleParameters armcompute.CapacityReservation
	exampleResourceGroupName = "myResourceGroup"
	exampleCapacityReservationGroupName = "myCapacityReservationGroup"
	exampleCapacityReservationName = "myCapacityReservation"
	exampleParameters = armcompute.CapacityReservation{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.CapacityReservationProperties{
			PlatformFaultDomainCount: to.Ptr[int32](3),
			ProvisioningState:        to.Ptr("Succeeded"),
			ProvisioningTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			ReservationID:            to.Ptr("{GUID}"),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, parameters armcompute.CapacityReservation, options *armcompute.CapacityReservationsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CapacityReservationsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CapacityReservationsClientCreateOrUpdateResponse{CapacityReservation: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservation))
}

func (testsuite *FakeTestSuite) TestCapacityReservations_Update() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationsServer{}
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservation_Update_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleCapacityReservationName string
	var exampleParameters armcompute.CapacityReservationUpdate
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaa"
	exampleCapacityReservationName = "aaaaaaaaaaaaaaaaaaa"
	exampleParameters = armcompute.CapacityReservationUpdate{
		Tags: map[string]*string{
			"key4974": to.Ptr("aaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.CapacityReservationProperties{
			InstanceView: &armcompute.CapacityReservationInstanceView{
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				UtilizationInfo: &armcompute.CapacityReservationUtilization{},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}

	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		Type:     to.Ptr("aaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.CapacityReservationProperties{
			InstanceView: &armcompute.CapacityReservationInstanceView{
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				UtilizationInfo: &armcompute.CapacityReservationUtilization{
					VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("aaaa"),
						}},
				},
			},
			PlatformFaultDomainCount: to.Ptr[int32](3),
			ProvisioningState:        to.Ptr("Succeeded"),
			ProvisioningTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			ReservationID:            to.Ptr("{GUID}"),
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, parameters armcompute.CapacityReservationUpdate, options *armcompute.CapacityReservationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CapacityReservationsClientUpdateResponse{CapacityReservation: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MaximumSet_Gen.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MaximumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservation))

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservation_Update_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleCapacityReservationName = "aaa"
	exampleParameters = armcompute.CapacityReservationUpdate{}

	exampleRes = armcompute.CapacityReservation{
		Location: to.Ptr("westus"),
		SKU:      &armcompute.SKU{},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, parameters armcompute.CapacityReservationUpdate, options *armcompute.CapacityReservationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CapacityReservationsClientUpdateResponse{CapacityReservation: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MinimumSet_Gen.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Update_MinimumSet_Gen.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservation))
}

func (testsuite *FakeTestSuite) TestCapacityReservations_Delete() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationsServer{}
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservation_Delete_MaximumSet_Gen"},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleCapacityReservationName string
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaaaaaaaaaa"
	exampleCapacityReservationName = "aaaaaaaaaaaaaaaaaaaaaaaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, options *armcompute.CapacityReservationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		resp = azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CapacityReservationsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MaximumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MaximumSet_Gen.json")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservation_Delete_MinimumSet_Gen"},
	})
	exampleResourceGroupName = "rgcompute"
	exampleCapacityReservationGroupName = "aaa"
	exampleCapacityReservationName = "aaaaaa"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, options *armcompute.CapacityReservationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		resp = azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CapacityReservationsClientDeleteResponse{}, nil)
		return
	}
	poller, err = client.BeginDelete(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MinimumSet_Gen.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Delete_MinimumSet_Gen.json")
}

func (testsuite *FakeTestSuite) TestCapacityReservations_Get() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationsServer{}
	client, err := armcompute.NewCapacityReservationsClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a capacity reservation."},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	var exampleCapacityReservationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleCapacityReservationGroupName = "myCapacityReservationGroup"
	exampleCapacityReservationName = "myCapacityReservation"

	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.CapacityReservationProperties{
			InstanceView: &armcompute.CapacityReservationInstanceView{
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
				UtilizationInfo: &armcompute.CapacityReservationUtilization{
					CurrentCapacity: to.Ptr[int32](5),
					VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
						}},
				},
			},
			PlatformFaultDomainCount: to.Ptr[int32](3),
			ProvisioningState:        to.Ptr("Succeeded"),
			ProvisioningTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			ReservationID:            to.Ptr("{GUID}"),
			TimeCreated:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
				},
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
				},
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, options *armcompute.CapacityReservationsClientGetOptions) (resp azfake.Responder[armcompute.CapacityReservationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		testsuite.Require().Equal(exampleCapacityReservationName, capacityReservationName)
		resp = azfake.Responder[armcompute.CapacityReservationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CapacityReservationsClientGetResponse{CapacityReservation: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleCapacityReservationGroupName, exampleCapacityReservationName, &armcompute.CapacityReservationsClientGetOptions{Expand: to.Ptr(armcompute.CapacityReservationInstanceViewTypesInstanceView)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CapacityReservation))
}

func (testsuite *FakeTestSuite) TestCapacityReservations_ListByCapacityReservationGroup() {
	ctx := context.Background()
	fakeServer := fake.CapacityReservationsServer{}
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCapacityReservationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_ListByReservationGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservations in reservation group."},
	})
	var exampleResourceGroupName string
	var exampleCapacityReservationGroupName string
	exampleResourceGroupName = "myResourceGroup"
	exampleCapacityReservationGroupName = "myCapacityReservationGroup"

	exampleRes := armcompute.CapacityReservationListResult{
		Value: []*armcompute.CapacityReservation{
			{
				Name:     to.Ptr("{capacityReservationName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservations"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/CapacityReservation/{capacityReservationName}"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"department": to.Ptr("HR"),
				},
				Properties: &armcompute.CapacityReservationProperties{
					PlatformFaultDomainCount: to.Ptr[int32](3),
					ProvisioningState:        to.Ptr("Succeeded"),
					ProvisioningTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
					ReservationID:            to.Ptr("{GUID}"),
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
						}},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_DS1_v2"),
					Capacity: to.Ptr[int64](4),
				},
				Zones: []*string{
					to.Ptr("1")},
			},
			{
				Name:     to.Ptr("{capacityReservationName}"),
				Type:     to.Ptr("Microsoft.Compute/CapacityReservations"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/CapacityReservation/{capacityReservationName}"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"department": to.Ptr("HR"),
				},
				Properties: &armcompute.CapacityReservationProperties{
					PlatformFaultDomainCount: to.Ptr[int32](3),
					ProvisioningState:        to.Ptr("Succeeded"),
					ProvisioningTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.313Z"); return t }()),
					ReservationID:            to.Ptr("{GUID}"),
					VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM4"),
						}},
				},
				SKU: &armcompute.SKU{
					Name:     to.Ptr("Standard_A1_v2"),
					Capacity: to.Ptr[int64](4),
				},
				Zones: []*string{
					to.Ptr("1")},
			}},
	}

	fakeServer.NewListByCapacityReservationGroupPager = func(resourceGroupName string, capacityReservationGroupName string, options *armcompute.CapacityReservationsClientListByCapacityReservationGroupOptions) (resp azfake.PagerResponder[armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCapacityReservationGroupName, capacityReservationGroupName)
		resp = azfake.PagerResponder[armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse{CapacityReservationListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByCapacityReservationGroupPager(exampleResourceGroupName, exampleCapacityReservationGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/capacityReservationExamples/CapacityReservation_ListByReservationGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CapacityReservationListResult))
	}
}

func (testsuite *FakeTestSuite) TestLogAnalytics_ExportRequestRateByInterval() {
	ctx := context.Background()
	fakeServer := fake.LogAnalyticsServer{}
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewLogAnalyticsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_RequestRateByInterval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all Api requests made to Compute Resource Provider within the given time period broken down by intervals."},
	})
	var exampleLocation string
	var exampleParameters armcompute.RequestRateByIntervalInput
	exampleLocation = "westus"
	exampleParameters = armcompute.RequestRateByIntervalInput{
		BlobContainerSasURI: to.Ptr("https://somesasuri"),
		FromTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862Z"); return t }()),
		GroupByResourceName: to.Ptr(true),
		ToTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862Z"); return t }()),
		IntervalLength:      to.Ptr(armcompute.IntervalInMinsFiveMins),
	}

	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/RequestRateByInterval_20180121-0154_20180123-0154.csv"),
		},
	}

	fakeServer.BeginExportRequestRateByInterval = func(ctx context.Context, location string, parameters armcompute.RequestRateByIntervalInput, options *armcompute.LogAnalyticsClientBeginExportRequestRateByIntervalOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse{LogAnalyticsOperationResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginExportRequestRateByInterval(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_RequestRateByInterval.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_RequestRateByInterval.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult))
}

func (testsuite *FakeTestSuite) TestLogAnalytics_ExportThrottledRequests() {
	ctx := context.Background()
	fakeServer := fake.LogAnalyticsServer{}
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewLogAnalyticsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_ThrottledRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all throttled Api requests made to Compute Resource Provider within the given time period."},
	})
	var exampleLocation string
	var exampleParameters armcompute.ThrottledRequestsInput
	exampleLocation = "westus"
	exampleParameters = armcompute.ThrottledRequestsInput{
		BlobContainerSasURI:        to.Ptr("https://somesasuri"),
		FromTime:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862Z"); return t }()),
		GroupByClientApplicationID: to.Ptr(false),
		GroupByOperationName:       to.Ptr(true),
		GroupByResourceName:        to.Ptr(false),
		GroupByUserAgent:           to.Ptr(false),
		ToTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862Z"); return t }()),
	}

	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/ThrottledRequests_20180121-0154_20180123-0154.csv"),
		},
	}

	fakeServer.BeginExportThrottledRequests = func(ctx context.Context, location string, parameters armcompute.ThrottledRequestsInput, options *armcompute.LogAnalyticsClientBeginExportThrottledRequestsOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.LogAnalyticsClientExportThrottledRequestsResponse{LogAnalyticsOperationResult: exampleRes}, nil)
		return
	}
	poller, err := client.BeginExportThrottledRequests(ctx, exampleLocation, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_ThrottledRequests.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/logAnalyticExamples/LogAnalytics_ThrottledRequests.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("subid", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/RunCommand_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandList"},
	})
	var exampleLocation string
	exampleLocation = "SoutheastAsia"

	exampleRes := armcompute.RunCommandListResult{
		Value: []*armcompute.RunCommandDocumentBase{
			{
				Description: to.Ptr("Configure the machine to enable remote PowerShell."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("EnableRemotePS"),
				Label:       to.Ptr("Enable remote PowerShell"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Shows detailed information for the IP address, subnet mask and default gateway for each adapter bound to TCP/IP."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("IPConfig"),
				Label:       to.Ptr("List IP configuration"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RunPowerShellScript"),
				Label:       to.Ptr("Executes a PowerShell script"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Custom multiline shell script should be defined in script property. Optional parameters can be set in parameters property."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RunShellScript"),
				Label:       to.Ptr("Executes a Linux shell script"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
			},
			{
				Description: to.Ptr("Get the configuration of all network interfaces."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ifconfig"),
				Label:       to.Ptr("List network configuration"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
			},
			{
				Description: to.Ptr("Checks if the local Administrator account is disabled, and if so enables it."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("EnableAdminAccount"),
				Label:       to.Ptr("Enable administrator account"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Reset built-in Administrator account password."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ResetAccountPassword"),
				Label:       to.Ptr("Reset built-in Administrator account password"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Checks registry settings and domain policy settings. Suggests policy actions if machine is part of a domain or modifies the settings to default values."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("RDPSettings"),
				Label:       to.Ptr("Verify RDP Listener Settings"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Sets the default or user specified port number for Remote Desktop connections. Enables firewall rule for inbound access to the port."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("SetRDPPort"),
				Label:       to.Ptr("Set Remote Desktop port"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			{
				Description: to.Ptr("Removes the SSL certificate tied to the RDP listener and restores the RDP listerner security to default. Use this script if you see any issues with the certificate."),
				Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
				ID:          to.Ptr("ResetRDPCert"),
				Label:       to.Ptr("Restore RDP Authentication mode to defaults"),
				OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.VirtualMachineRunCommandsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineRunCommandsClientListResponse{RunCommandListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/RunCommand_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RunCommandListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/RunCommand_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandGet"},
	})
	var exampleLocation string
	var exampleCommandID string
	exampleLocation = "SoutheastAsia"
	exampleCommandID = "RunPowerShellScript"

	exampleRes := armcompute.RunCommandDocument{
		Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
		Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
		ID:          to.Ptr("RunPowerShellScript"),
		Label:       to.Ptr("Executes a PowerShell script"),
		OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
		Parameters: []*armcompute.RunCommandParameterDefinition{
			{
				Name:         to.Ptr("arg1"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value1"),
			},
			{
				Name:         to.Ptr("arg2"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value2"),
			}},
		Script: []*string{
			to.Ptr("param("),
			to.Ptr("    [string]$arg1,"),
			to.Ptr("    [string]$arg2"),
			to.Ptr(")"),
			to.Ptr("Write-Host This is a sample script with parameters $arg1 $arg2")},
	}

	fakeServer.Get = func(ctx context.Context, location string, commandID string, options *armcompute.VirtualMachineRunCommandsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleCommandID, commandID)
		resp = azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientGetResponse{RunCommandDocument: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleCommandID, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/RunCommand_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RunCommandDocument))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommand
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommand{
		Location: to.Ptr("West US"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt?sp=racw&st=2022-10-07T19:40:21Z&se=2022-10-08T03:40:21Z&spr=https&sv=2021-06-08&sr=b&sig=Yh7B%2Fy83olbYBdfsfbUREvd7ol8Dq5EVP3lAO4Kj4xDcN8%3D"),
			OutputBlobManagedIdentity: &armcompute.RunCommandManagedIdentity{
				ClientID: to.Ptr("22d35efb-0c99-4041-8c5b-6d24db33a69a"),
			},
			OutputBlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			RunAsPassword: to.Ptr("<runAsPassword>"),
			RunAsUser:     to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1?sp=r&st=2022-10-07T19:52:54Z&se=2022-10-08T03:52:54Z&spr=https&sv=2021-06-08&sr=b&sig=zfYFYCgea1PqVERZuwJiewrte5gjTnKGtVJngcw5oc828%3D"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, runCommand armcompute.VirtualMachineRunCommand, options *armcompute.VirtualMachineRunCommandsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientCreateOrUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommandUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommandUpdate{
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobManagedIdentity: &armcompute.RunCommandManagedIdentity{
				ObjectID: to.Ptr("4231e4d2-33e4-4e23-96b2-17888afa6072"),
			},
			ErrorBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt?sp=racw&st=2022-10-07T19:40:21Z&se=2022-10-08T03:40:21Z&spr=https&sv=2021-06-08&sr=b&sig=Yh7B%2Fy83olbYBdfsfbUREvd7ol8Dq5EVP3lAO4Kj4xDcN8%3D"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			RunAsPassword: to.Ptr("<runAsPassword>"),
			RunAsUser:     to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World! ; Remove-Item C:	est	estFile.txt"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World! ; Remove-Item C:	est	estFile.txt"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, runCommand armcompute.VirtualMachineRunCommandUpdate, options *armcompute.VirtualMachineRunCommandsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, options *armcompute.VirtualMachineRunCommandsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineRunCommandsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Delete.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_GetByVirtualMachine() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run command."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"
	exampleRunCommandName = "myRunCommand"

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World! ; Remove-Item C:	est	estFile.txt"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	fakeServer.GetByVirtualMachine = func(ctx context.Context, resourceGroupName string, vmName string, runCommandName string, options *armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions) (resp azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.Responder[armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	res, err := client.GetByVirtualMachine(ctx, exampleResourceGroupName, exampleVmName, exampleRunCommandName, &armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineRunCommands_ListByVirtualMachine() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in a Virtual Machine."},
	})
	var exampleResourceGroupName string
	var exampleVmName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmName = "myVM"

	exampleRes := armcompute.VirtualMachineRunCommandsListResult{
		Value: []*armcompute.VirtualMachineRunCommand{
			{
				Name:     to.Ptr("myRunCommand"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
				Properties: &armcompute.VirtualMachineRunCommandProperties{
					AsyncExecution: to.Ptr(false),
					ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
					OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
					Parameters: []*armcompute.RunCommandInputParameter{
						{
							Name:  to.Ptr("param1"),
							Value: to.Ptr("value1"),
						},
						{
							Name:  to.Ptr("param2"),
							Value: to.Ptr("value2"),
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					RunAsUser:         to.Ptr("user1"),
					Source: &armcompute.VirtualMachineRunCommandScriptSource{
						Script: to.Ptr("Write-Host Hello World!"),
					},
					TimeoutInSeconds:                to.Ptr[int32](0),
					TreatFailureAsDeploymentFailure: to.Ptr(false),
				},
			}},
	}

	fakeServer.NewListByVirtualMachinePager = func(resourceGroupName string, vmName string, options *armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmName, vmName)
		resp = azfake.PagerResponder[armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineRunCommandsClientListByVirtualMachineResponse{VirtualMachineRunCommandsListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListByVirtualMachinePager(exampleResourceGroupName, exampleVmName, &armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineRunCommand_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineRunCommandsListResult))
	}
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommand
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommand{
		Location: to.Ptr("West US"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution:           to.Ptr(false),
			ErrorBlobManagedIdentity: &armcompute.RunCommandManagedIdentity{},
			ErrorBlobURI:             to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobManagedIdentity: &armcompute.RunCommandManagedIdentity{
				ClientID: to.Ptr("22d35efb-0c99-4041-8c5b-6d24db33a69a"),
			},
			OutputBlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			RunAsPassword: to.Ptr("<runAsPassword>"),
			RunAsUser:     to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1"),
				ScriptURIManagedIdentity: &armcompute.RunCommandManagedIdentity{
					ObjectID: to.Ptr("4231e4d2-33e4-4e23-96b2-17888afa6072"),
				},
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(true),
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(true),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, runCommand armcompute.VirtualMachineRunCommand, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientCreateOrUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_CreateOrUpdate.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_CreateOrUpdate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Update() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	var exampleRunCommand armcompute.VirtualMachineRunCommandUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"
	exampleRunCommand = armcompute.VirtualMachineRunCommandUpdate{
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1"),
				ScriptURIManagedIdentity: &armcompute.RunCommandManagedIdentity{
					ObjectID: to.Ptr("4231e4d2-33e4-4e23-96b2-17888afa6072"),
				},
			},
		},
	}

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/scriptcontainer/MyScript.ps1"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, runCommand armcompute.VirtualMachineRunCommandUpdate, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		testsuite.Require().True(reflect.DeepEqual(exampleRunCommand, runCommand))
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientUpdateResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, exampleRunCommand, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Delete() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM run command."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Delete.json")
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_Get() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM run commands."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	var exampleRunCommandName string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"
	exampleRunCommandName = "myRunCommand"

	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
			OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				ScriptURI: to.Ptr("https://gist.githubusercontent.com/myusername/75fd3634w7511116063c60bcc50bee0/raw/04a4c68ac9e1d36asfasdc64bd1d889b104c7abdb8/HelloWorld.ps1"),
			},
			TimeoutInSeconds:                to.Ptr[int32](3600),
			TreatFailureAsDeploymentFailure: to.Ptr(false),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, runCommandName string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		testsuite.Require().Equal(exampleRunCommandName, runCommandName)
		resp = azfake.Responder[armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientGetResponse{VirtualMachineRunCommand: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, exampleRunCommandName, &armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand))
}

func (testsuite *FakeTestSuite) TestVirtualMachineScaleSetVMRunCommands_List() {
	ctx := context.Background()
	fakeServer := fake.VirtualMachineScaleSetVMRunCommandsServer{}
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewVirtualMachineScaleSetVMRunCommandsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in Vmss instance."},
	})
	var exampleResourceGroupName string
	var exampleVmScaleSetName string
	var exampleInstanceID string
	exampleResourceGroupName = "myResourceGroup"
	exampleVmScaleSetName = "myvmScaleSet"
	exampleInstanceID = "0"

	exampleRes := armcompute.VirtualMachineRunCommandsListResult{
		Value: []*armcompute.VirtualMachineRunCommand{
			{
				Name:     to.Ptr("myRunCommand"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.VirtualMachineRunCommandProperties{
					AsyncExecution: to.Ptr(false),
					ErrorBlobURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/MyScriptError.txt"),
					OutputBlobURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/myscriptoutputcontainer/MyScriptoutput.txt"),
					Parameters: []*armcompute.RunCommandInputParameter{
						{
							Name:  to.Ptr("param1"),
							Value: to.Ptr("value1"),
						},
						{
							Name:  to.Ptr("param2"),
							Value: to.Ptr("value2"),
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					RunAsUser:         to.Ptr("user1"),
					Source: &armcompute.VirtualMachineRunCommandScriptSource{
						Script: to.Ptr("Write-Host Hello World! ; Remove-Item C:	est	estFile.txt"),
					},
					TimeoutInSeconds:                to.Ptr[int32](0),
					TreatFailureAsDeploymentFailure: to.Ptr(false),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleVmScaleSetName, vmScaleSetName)
		testsuite.Require().Equal(exampleInstanceID, instanceID)
		resp = azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.VirtualMachineScaleSetVMRunCommandsClientListResponse{VirtualMachineRunCommandsListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleVmScaleSetName, exampleInstanceID, &armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2023-03-01/examples/runCommandExamples/VirtualMachineScaleSetVMRunCommand_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.VirtualMachineRunCommandsListResult))
	}
}

func (testsuite *FakeTestSuite) TestDisks_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscriptionId}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ConfidentialVMSupportedDiskEncryptedWithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a confidential VM supported disk encrypted with customer managed key"},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	var exampleDisk armcompute.Disk
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecureVMDiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
				SecurityType:                to.Ptr(armcompute.DiskSecurityTypesConfidentialVMDiskEncryptedWithCustomerKey),
			},
		},
	}

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecureVMDiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
				SecurityType:                to.Ptr(armcompute.DiskSecurityTypesConfidentialVMDiskEncryptedWithCustomerKey),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ConfidentialVMSupportedDiskEncryptedWithCMK.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ConfidentialVMSupportedDiskEncryptedWithCMK.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk access resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			ProvisioningState:   to.Ptr("Succeeded"),
			PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessEnabled),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskAccess.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskEncryptionSet.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDiskEncryptionSet.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByCopyingASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by copying a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByCopyingASnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByCopyingASnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from a different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromADifferentSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from the same subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_ByImportingBlobFromTheSameSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromImportSecure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from ImportSecure create option"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImportSecure),
				SecurityDataURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd"),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImportSecure),
				SecurityDataURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd"),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromImportSecure.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromImportSecure.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromUploadPreparedSecure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from UploadPreparedSecure create option"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUploadPreparedSecure),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUploadPreparedSecure),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromUploadPreparedSecure.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromUploadPreparedSecure.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAPlatformImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from a platform image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("{sku}"),
				Product:   to.Ptr("{offer}"),
				Publisher: to.Ptr("{publisher}"),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAPlatformImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAPlatformImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryCommunityImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an Azure Compute Gallery community image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					CommunityGalleryImageID: to.Ptr("/CommunityGalleries/{communityGalleryPublicGalleryName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					CommunityGalleryImageID: to.Ptr("/CommunityGalleries/{communityGalleryPublicGalleryName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryCommunityImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryCommunityImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryDirectSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an Azure Compute Gallery direct shared image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					SharedGalleryImageID: to.Ptr("/SharedGalleries/{sharedGalleryUniqueName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					SharedGalleryImageID: to.Ptr("/SharedGalleries/{sharedGalleryUniqueName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryDirectSharedImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryDirectSharedImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an Azure Compute Gallery image."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Providers/Microsoft.Compute/Galleries/{galleryName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				GalleryImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Providers/Microsoft.Compute/Galleries/{galleryName}/Images/{imageName}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryImage.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnAzureComputeGalleryImage.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnExistingManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an existing managed disk in the same or different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk2"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk2"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnExistingManagedDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_FromAnExistingManagedDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDataAccessAuthMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with dataAccessAuthMode"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
			DiskSizeGB:         to.Ptr[int32](200),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
			DiskSizeGB:         to.Ptr[int32](200),
			ProvisioningState:  to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDataAccessAuthMode.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithDataAccessAuthMode.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithOptimizedForFrequentAttach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with optimizedForFrequentAttach."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:                 to.Ptr[int32](200),
			OptimizedForFrequentAttach: to.Ptr(true),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:                 to.Ptr[int32](200),
			OptimizedForFrequentAttach: to.Ptr(true),
			ProvisioningState:          to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithOptimizedForFrequentAttach.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithOptimizedForFrequentAttach.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_PerformancePlus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with performancePlus."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				PerformancePlus: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				PerformancePlus: to.Ptr(true),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_PerformancePlus.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_PerformancePlus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithPremiumV2_LRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with premium v2 account type."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myPremiumV2Disk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskIOPSReadWrite: to.Ptr[int64](125),
			DiskMBpsReadWrite: to.Ptr[int64](3000),
			DiskSizeGB:        to.Ptr[int32](200),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumV2LRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myPremiumV2Disk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumV2LRS),
			Tier: to.Ptr("Premium"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithPremiumV2_LRSAccountType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithPremiumV2_LRSAccountType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with security profile"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSecurityProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSecurityProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSSDZRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ssd zrs account type."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			Tier: to.Ptr("Premium"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSSDZRSAccountType.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithSSDZRSAccountType.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithUltraSSD_ReadOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ultra account type with readOnly property set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myUltraReadOnlyDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](4096),
			},
			DiskIOPSReadWrite: to.Ptr[int64](125),
			DiskMBpsReadWrite: to.Ptr[int64](3000),
			DiskSizeGB:        to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myUltraReadOnlyDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			Tier: to.Ptr("Ultra"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithUltraSSD_ReadOnly.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithUltraSSD_ReadOnly.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_UploadDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed upload disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_UploadDisk.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_UploadDisk.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_InExtendedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk in extended location."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_InExtendedLocation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_InExtendedLocation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_Empty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_Empty.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_Empty.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithLogicalSectorSize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultra managed disk with logicalSectorSize 512E"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.Disk{
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB: to.Ptr[int32](200),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			Tier: to.Ptr("Ultra"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.Disk, options *armcompute.DisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientCreateOrUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithLogicalSectorSize.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Create_WithLogicalSectorSize.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Update() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_CreateOrUpdate_BurstingEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a bursting enabled managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	var exampleDisk armcompute.DiskUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			BurstingEnabled: to.Ptr(true),
			DiskSizeGB:      to.Ptr[int32](1024),
		},
	}

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			BurstingEnabled: to.Ptr(true),
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](1024),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_CreateOrUpdate_BurstingEnabled.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_CreateOrUpdate_BurstingEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddAcceleratedNetworking.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add accelerated networking."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddAcceleratedNetworking.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddAcceleratedNetworking.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ToAddArchitecture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add architecture."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				Architecture: to.Ptr(armcompute.ArchitectureArm64),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				Architecture: to.Ptr(armcompute.ArchitectureArm64),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ToAddArchitecture.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ToAddArchitecture.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddPurchasePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add purchase plan."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddPurchasePlan.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddPurchasePlan.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddSupportsHibernation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add supportsHibernation."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			SupportsHibernation: to.Ptr(true),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			DiskSizeGB:          to.Ptr[int32](127),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState:   to.Ptr("Succeeded"),
			SupportsHibernation: to.Ptr(true),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddSupportsHibernation.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddSupportsHibernation.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ChangeTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to change tier."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			Tier: to.Ptr("P30"),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Tier:              to.Ptr("P30"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ChangeTier.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_ChangeTier.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableBursting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable bursting."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			BurstingEnabled: to.Ptr(false),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableBursting.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableBursting.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableOptimizedForFrequentAttach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable optimizedForFrequentAttach."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			OptimizedForFrequentAttach: to.Ptr(false),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:                 to.Ptr[int32](200),
			OptimizedForFrequentAttach: to.Ptr(false),
			ProvisioningState:          to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableOptimizedForFrequentAttach.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_DisableOptimizedForFrequentAttach.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddDiskControllerTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk with diskControllerTypes."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				DiskControllerTypes: to.Ptr("SCSI"),
			},
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/marketplacetestfirstparty/ArtifactTypes/VMImage/Offers/nvme_test_062/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				DiskControllerTypes: to.Ptr("SCSI"),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddDiskControllerTypes.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_AddDiskControllerTypes.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_RemoveDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed disk to remove disk access resource association."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleDisk = armcompute.DiskUpdate{
		Properties: &armcompute.DiskUpdateProperties{
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
		},
	}

	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskName string, disk armcompute.DiskUpdate, options *armcompute.DisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DisksClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleDisk, disk))
		resp = azfake.PollerResponder[armcompute.DisksClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientUpdateResponse{Disk: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskName, exampleDisk, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_RemoveDiskAccess.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Update_RemoveDiskAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Get() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myManagedDisk"

	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myManagedDisk"),
		Type:     to.Ptr("Microsoft.Compute/disks"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("ManagedDisks"),
		},
		ManagedBy: to.Ptr("/subscriptions/123caaa-123v-v211-a49f-f88ccac5bf88/resourceGroups/ResourceGroupName/providers/Microsoft.Compute/virtualMachines/TestVM414689371c88843d65ec"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB: to.Ptr[int32](10),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079Z"); return t }()),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskName string, options *armcompute.DisksClientGetOptions) (resp azfake.Responder[armcompute.DisksClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		resp = azfake.Responder[armcompute.DisksClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DisksClientGetResponse{Disk: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Disk))
}

func (testsuite *FakeTestSuite) TestDisks_Delete() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, diskName string, options *armcompute.DisksClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DisksClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		resp = azfake.PollerResponder[armcompute.DisksClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleDiskName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_Delete.json")
}

func (testsuite *FakeTestSuite) TestDisks_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskList{
		Value: []*armcompute.Disk{
			{
				Name:     to.Ptr("myManagedDisk1"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk2"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
					},
					DiskSizeGB: to.Ptr[int32](10),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk3"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
						ImageReference: &armcompute.ImageDiskReference{
							ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
						},
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.397Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DisksClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DisksClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DisksClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DisksClientListByResourceGroupResponse{DiskList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskList))
	}
}

func (testsuite *FakeTestSuite) TestDisks_List() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a subscription."},
	})

	exampleRes := armcompute.DiskList{
		Value: []*armcompute.Disk{
			{
				Name:     to.Ptr("myManagedDisk1"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk2"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
				Location: to.Ptr("westus"),
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
					},
					DiskSizeGB: to.Ptr[int32](10),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myManagedDisk3"),
				Type:     to.Ptr("Microsoft.Compute/disks"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk3"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("ManagedDisks"),
				},
				Properties: &armcompute.DiskProperties{
					CreationData: &armcompute.CreationData{
						CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
						ImageReference: &armcompute.ImageDiskReference{
							ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
						},
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.397Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DisksClientListOptions) (resp azfake.PagerResponder[armcompute.DisksClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DisksClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DisksClientListResponse{DiskList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskList))
	}
}

func (testsuite *FakeTestSuite) TestDisks_GrantAccess() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sas on a managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	var exampleGrantAccessData armcompute.GrantAccessData
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleGrantAccessData = armcompute.GrantAccessData{
		Access:            to.Ptr(armcompute.AccessLevelRead),
		DurationInSeconds: to.Ptr[int32](300),
		FileFormat:        to.Ptr(armcompute.FileFormatVHD),
	}

	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}

	fakeServer.BeginGrantAccess = func(ctx context.Context, resourceGroupName string, diskName string, grantAccessData armcompute.GrantAccessData, options *armcompute.DisksClientBeginGrantAccessOptions) (resp azfake.PollerResponder[armcompute.DisksClientGrantAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleGrantAccessData, grantAccessData))
		resp = azfake.PollerResponder[armcompute.DisksClientGrantAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientGrantAccessResponse{AccessURI: exampleRes}, nil)
		return
	}
	poller, err := client.BeginGrantAccess(ctx, exampleResourceGroupName, exampleDiskName, exampleGrantAccessData, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AccessURI))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess_WithVMGuestState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get sas on managed disk and VM guest state"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"
	exampleGrantAccessData = armcompute.GrantAccessData{
		Access:                   to.Ptr(armcompute.AccessLevelRead),
		DurationInSeconds:        to.Ptr[int32](300),
		GetSecureVMGuestStateSAS: to.Ptr(true),
	}

	exampleRes = armcompute.AccessURI{
		AccessSAS:             to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
		SecurityDataAccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/b9bf5824-6122-49e0-ba22-042f76ccd8a1_vmgs?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}

	fakeServer.BeginGrantAccess = func(ctx context.Context, resourceGroupName string, diskName string, grantAccessData armcompute.GrantAccessData, options *armcompute.DisksClientBeginGrantAccessOptions) (resp azfake.PollerResponder[armcompute.DisksClientGrantAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		testsuite.Require().True(reflect.DeepEqual(exampleGrantAccessData, grantAccessData))
		resp = azfake.PollerResponder[armcompute.DisksClientGrantAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientGrantAccessResponse{AccessURI: exampleRes}, nil)
		return
	}
	poller, err = client.BeginGrantAccess(ctx, exampleResourceGroupName, exampleDiskName, exampleGrantAccessData, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess_WithVMGuestState.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_BeginGetAccess_WithVMGuestState.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AccessURI))
}

func (testsuite *FakeTestSuite) TestDisks_RevokeAccess() {
	ctx := context.Background()
	fakeServer := fake.DisksServer{}
	client, err := armcompute.NewDisksClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDisksServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_EndGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revoke access to a managed disk."},
	})
	var exampleResourceGroupName string
	var exampleDiskName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskName = "myDisk"

	fakeServer.BeginRevokeAccess = func(ctx context.Context, resourceGroupName string, diskName string, options *armcompute.DisksClientBeginRevokeAccessOptions) (resp azfake.PollerResponder[armcompute.DisksClientRevokeAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskName, diskName)
		resp = azfake.PollerResponder[armcompute.DisksClientRevokeAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DisksClientRevokeAccessResponse{}, nil)
		return
	}
	poller, err := client.BeginRevokeAccess(ctx, exampleResourceGroupName, exampleDiskName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_EndGetAccess.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskExamples/Disk_EndGetAccess.json")
}

func (testsuite *FakeTestSuite) TestDiskAccesses_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var exampleDiskAccess armcompute.DiskAccess
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	exampleDiskAccess = armcompute.DiskAccess{
		Location: to.Ptr("West US"),
	}

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccess, options *armcompute.DiskAccessesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskAccess, diskAccess))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientCreateOrUpdateResponse{DiskAccess: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskAccessName, exampleDiskAccess, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Update() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var exampleDiskAccess armcompute.DiskAccessUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	exampleDiskAccess = armcompute.DiskAccessUpdate{
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccessUpdate, options *armcompute.DiskAccessesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskAccess, diskAccess))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientUpdateResponse{DiskAccess: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskAccessName, exampleDiskAccess, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Get_WithPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource with private endpoints."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetResponse{DiskAccess: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Get_WithPrivateEndpoints.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes = armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetResponse{DiskAccess: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskAccess))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_Delete() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_Delete.json")
}

func (testsuite *FakeTestSuite) TestDiskAccesses_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskAccessList{
		Value: []*armcompute.DiskAccess{
			{
				Name:     to.Ptr("myDiskAccess"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myDiskAccess2"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
						{
							Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Properties: &armcompute.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armcompute.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
								},
								PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
									Description:     to.Ptr("Auto-Approved"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
							},
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DiskAccessesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListByResourceGroupResponse{DiskAccessList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskAccessList))
	}
}

func (testsuite *FakeTestSuite) TestDiskAccesses_List() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a subscription."},
	})

	exampleRes := armcompute.DiskAccessList{
		Value: []*armcompute.DiskAccess{
			{
				Name:     to.Ptr("myDiskAccess"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("myDiskAccess2"),
				Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("PrivateEndpoints"),
				},
				Properties: &armcompute.DiskAccessProperties{
					PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
						{
							Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
							ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
							Properties: &armcompute.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armcompute.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
								},
								PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
									Description:     to.Ptr("Auto-Approved"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
								},
								ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
							},
						}},
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DiskAccessesClientListOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListResponse{DiskAccessList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccess_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskAccessList))
	}
}

func (testsuite *FakeTestSuite) TestDiskAccesses_GetPrivateLinkResources() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all possible private link resources under disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.PrivateLinkResourceListResult{
		Value: []*armcompute.PrivateLinkResource{
			{
				Name: to.Ptr("disks"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateLinkResources/disks"),
				Properties: &armcompute.PrivateLinkResourceProperties{
					GroupID: to.Ptr("disks"),
					RequiredMembers: []*string{
						to.Ptr("diskAccess_1")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.blob.core.windows.net")},
				},
			}},
	}

	fakeServer.GetPrivateLinkResources = func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetPrivateLinkResourcesOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse{PrivateLinkResourceListResult: exampleRes}, nil)
		return
	}
	res, err := client.GetPrivateLinkResources(ctx, exampleResourceGroupName, exampleDiskAccessName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateLinkResources_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_UpdateAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Approve.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a Private Endpoint Connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	var examplePrivateEndpointConnection armcompute.PrivateEndpointConnection
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"
	examplePrivateEndpointConnection = armcompute.PrivateEndpointConnection{
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description: to.Ptr("Approving myPrivateEndpointConnection"),
				Status:      to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
		},
	}

	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnectionName"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approving myPrivateEndpointConnection"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdateAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, privateEndpointConnection armcompute.PrivateEndpointConnection, options *armcompute.DiskAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		testsuite.Require().True(reflect.DeepEqual(examplePrivateEndpointConnection, privateEndpointConnection))
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdateAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, examplePrivateEndpointConnection, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Approve.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Approve.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_GetAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"

	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnection"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}

	fakeServer.GetAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientGetAPrivateEndpointConnectionOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.Responder[armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse{PrivateEndpointConnection: exampleRes}, nil)
		return
	}
	res, err := client.GetAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection))
}

func (testsuite *FakeTestSuite) TestDiskAccesses_DeleteAPrivateEndpointConnection() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	var examplePrivateEndpointConnectionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"
	examplePrivateEndpointConnectionName = "myPrivateEndpointConnection"

	fakeServer.BeginDeleteAPrivateEndpointConnection = func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		testsuite.Require().Equal(examplePrivateEndpointConnectionName, privateEndpointConnectionName)
		resp = azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse{}, nil)
		return
	}
	poller, err := client.BeginDeleteAPrivateEndpointConnection(ctx, exampleResourceGroupName, exampleDiskAccessName, examplePrivateEndpointConnectionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Delete.json")
}

func (testsuite *FakeTestSuite) TestDiskAccesses_ListPrivateEndpointConnections() {
	ctx := context.Background()
	fakeServer := fake.DiskAccessesServer{}
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskAccessesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_ListByDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	var exampleResourceGroupName string
	var exampleDiskAccessName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskAccessName = "myDiskAccess"

	exampleRes := armcompute.PrivateEndpointConnectionListResult{
		Value: []*armcompute.PrivateEndpointConnection{
			{
				Name: to.Ptr("myPrivateEndpointConnection"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
				Properties: &armcompute.PrivateEndpointConnectionProperties{
					PrivateEndpoint: &armcompute.PrivateEndpoint{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
					},
					PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
						Description:     to.Ptr("Auto-Approved"),
						ActionsRequired: to.Ptr("None"),
						Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
					},
					ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPrivateEndpointConnectionsPager = func(resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientListPrivateEndpointConnectionsOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskAccessName, diskAccessName)
		resp = azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse{PrivateEndpointConnectionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPrivateEndpointConnectionsPager(exampleResourceGroupName, exampleDiskAccessName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_ListByDiskAccess.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.PrivateEndpointConnectionListResult))
	}
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different subscription."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	var exampleDiskEncryptionSet armcompute.DiskEncryptionSet
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSet{
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
	}

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different tenant."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSet{
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
				"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}": &armcompute.UserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferenttenant.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			FederatedClientID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
				"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}": &armcompute.UserAssignedIdentitiesValue{},
			},
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferenttenant.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			FederatedClientID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentTenant.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create_WithKeyVaultFromADifferentTenant.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSet{
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Update() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded"},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	var exampleDiskEncryptionSet armcompute.DiskEncryptionSetUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/KeyVersion2"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079Z"); return t }()),
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabled.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabledInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion2"),
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079Z"); return t }()),
			PreviousKeys: []*armcompute.KeyForDiskEncryptionSet{
				{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				}},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabledInProgress.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update_WithRotationToLatestKeyVersionEnabledInProgress.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"
	exampleDiskEncryptionSet = armcompute.DiskEncryptionSetUpdate{
		Properties: &armcompute.DiskEncryptionSetUpdateProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
		},
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
	}

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079Z"); return t }()),
			PreviousKeys:             []*armcompute.KeyForDiskEncryptionSet{},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		testsuite.Require().True(reflect.DeepEqual(exampleDiskEncryptionSet, diskEncryptionSet))
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientUpdateResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, exampleDiskEncryptionSet, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Get_WithAutoKeyRotationError.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set when auto-key rotation failed."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			AutoKeyRotationError: &armcompute.APIError{
				Code:    to.Ptr("ManagedServiceIdentityNotFound"),
				Message: to.Ptr("Auto-key rotation was disabled as managed service identity associated with DiskEncryptionSet 'myDiskEncryptionSet' was not found. Please update the resource with correct identity to re-enable auto-key rotation."),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:                      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientGetOptions) (resp azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientGetResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Get_WithAutoKeyRotationError.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientGetOptions) (resp azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientGetResponse{DiskEncryptionSet: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskEncryptionSet))
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_Delete() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk encryption set."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskEncryptionSetsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_Delete.json")
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.DiskEncryptionSetList{
		Value: []*armcompute.DiskEncryptionSet{
			{
				Name:     to.Ptr("myDiskEncryptionSet"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			},
			{
				Name:     to.Ptr("myDiskEncryptionSet2"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.DiskEncryptionSetsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListByResourceGroupResponse{DiskEncryptionSetList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskEncryptionSetList))
	}
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_List() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a subscription."},
	})

	exampleRes := armcompute.DiskEncryptionSetList{
		Value: []*armcompute.DiskEncryptionSet{
			{
				Name:     to.Ptr("myDiskEncryptionSet"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			},
			{
				Name:     to.Ptr("myDiskEncryptionSet2"),
				Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Encryption"),
				},
				Identity: &armcompute.EncryptionSetIdentity{
					Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
				},
				Properties: &armcompute.EncryptionSetProperties{
					ActiveKey: &armcompute.KeyForDiskEncryptionSet{
						KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
						SourceVault: &armcompute.SourceVault{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
						},
					},
					EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
					PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
					ProvisioningState: to.Ptr("Succeeded"),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.DiskEncryptionSetsClientListOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListResponse{DiskEncryptionSetList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskEncryptionSetList))
	}
}

func (testsuite *FakeTestSuite) TestDiskEncryptionSets_ListAssociatedResources() {
	ctx := context.Background()
	fakeServer := fake.DiskEncryptionSetsServer{}
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskEncryptionSetsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListAssociatedResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all resources that are encrypted with this disk encryption set."},
	})
	var exampleResourceGroupName string
	var exampleDiskEncryptionSetName string
	exampleResourceGroupName = "myResourceGroup"
	exampleDiskEncryptionSetName = "myDiskEncryptionSet"

	exampleRes := armcompute.ResourceURIList{
		Value: []*string{
			to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
			to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")},
	}

	fakeServer.NewListAssociatedResourcesPager = func(resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientListAssociatedResourcesOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleDiskEncryptionSetName, diskEncryptionSetName)
		resp = azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse{ResourceURIList: exampleRes}, nil)
		return
	}
	pager := client.NewListAssociatedResourcesPager(exampleResourceGroupName, exampleDiskEncryptionSetName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskEncryptionSetExamples/DiskEncryptionSet_ListAssociatedResources.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceURIList))
	}
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_Get() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	var exampleDiskRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"
	exampleDiskRestorePointName = "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"

	exampleRes := armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			FamilyID:            to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessDisabled),
			SourceResourceID:    to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceUniqueID:      to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, diskRestorePointName string, options *armcompute.DiskRestorePointClientGetOptions) (resp azfake.Responder[armcompute.DiskRestorePointClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		testsuite.Require().Equal(exampleDiskRestorePointName, diskRestorePointName)
		resp = azfake.Responder[armcompute.DiskRestorePointClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskRestorePointClientGetResponse{DiskRestorePoint: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, exampleDiskRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskRestorePoint))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_Get_WhenSourceResourceIsFromDifferentRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint when source resource is from a different region"},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"
	exampleDiskRestorePointName = "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"

	exampleRes = armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			CompletionPercent:      to.Ptr[float32](100),
			FamilyID:               to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration:       to.Ptr(armcompute.HyperVGenerationV1),
			NetworkAccessPolicy:    to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			OSType:                 to.Ptr(armcompute.OperatingSystemTypesWindows),
			PublicNetworkAccess:    to.Ptr(armcompute.PublicNetworkAccessDisabled),
			ReplicationState:       to.Ptr("Succeeded"),
			SourceResourceID:       to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceResourceLocation: to.Ptr("eastus2"),
			SourceUniqueID:         to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, diskRestorePointName string, options *armcompute.DiskRestorePointClientGetOptions) (resp azfake.Responder[armcompute.DiskRestorePointClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		testsuite.Require().Equal(exampleDiskRestorePointName, diskRestorePointName)
		resp = azfake.Responder[armcompute.DiskRestorePointClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.DiskRestorePointClientGetResponse{DiskRestorePoint: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, exampleDiskRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_Get_WhenSourceResourceIsFromDifferentRegion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.DiskRestorePoint))
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_ListByRestorePoint() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_ListByVmRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"

	exampleRes := armcompute.DiskRestorePointList{
		Value: []*armcompute.DiskRestorePoint{
			{
				Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
				Properties: &armcompute.DiskRestorePointProperties{
					FamilyID:            to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
					HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
					NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
					OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
					PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessDisabled),
					SourceResourceID:    to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
					SourceUniqueID:      to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
					TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByRestorePointPager = func(resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, options *armcompute.DiskRestorePointClientListByRestorePointOptions) (resp azfake.PagerResponder[armcompute.DiskRestorePointClientListByRestorePointResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		resp = azfake.PagerResponder[armcompute.DiskRestorePointClientListByRestorePointResponse]{}
		resp.AddPage(http.StatusOK, armcompute.DiskRestorePointClientListByRestorePointResponse{DiskRestorePointList: exampleRes}, nil)
		return
	}
	pager := client.NewListByRestorePointPager(exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_ListByVmRestorePoint.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.DiskRestorePointList))
	}
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_GrantAccess() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_BeginGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Grants access to a diskRestorePoint."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	var exampleDiskRestorePointName string
	var exampleGrantAccessData armcompute.GrantAccessData
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"
	exampleDiskRestorePointName = "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"
	exampleGrantAccessData = armcompute.GrantAccessData{
		Access:            to.Ptr(armcompute.AccessLevelRead),
		DurationInSeconds: to.Ptr[int32](300),
		FileFormat:        to.Ptr(armcompute.FileFormatVHDX),
	}

	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}

	fakeServer.BeginGrantAccess = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, diskRestorePointName string, grantAccessData armcompute.GrantAccessData, options *armcompute.DiskRestorePointClientBeginGrantAccessOptions) (resp azfake.PollerResponder[armcompute.DiskRestorePointClientGrantAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		testsuite.Require().Equal(exampleDiskRestorePointName, diskRestorePointName)
		testsuite.Require().True(reflect.DeepEqual(exampleGrantAccessData, grantAccessData))
		resp = azfake.PollerResponder[armcompute.DiskRestorePointClientGrantAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskRestorePointClientGrantAccessResponse{AccessURI: exampleRes}, nil)
		return
	}
	poller, err := client.BeginGrantAccess(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, exampleDiskRestorePointName, exampleGrantAccessData, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_BeginGetAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_BeginGetAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AccessURI))
}

func (testsuite *FakeTestSuite) TestDiskRestorePoint_RevokeAccess() {
	ctx := context.Background()
	fakeServer := fake.DiskRestorePointServer{}
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewDiskRestorePointServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_EndGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revokes access to a diskRestorePoint."},
	})
	var exampleResourceGroupName string
	var exampleRestorePointCollectionName string
	var exampleVmRestorePointName string
	var exampleDiskRestorePointName string
	exampleResourceGroupName = "myResourceGroup"
	exampleRestorePointCollectionName = "rpc"
	exampleVmRestorePointName = "vmrp"
	exampleDiskRestorePointName = "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"

	fakeServer.BeginRevokeAccess = func(ctx context.Context, resourceGroupName string, restorePointCollectionName string, vmRestorePointName string, diskRestorePointName string, options *armcompute.DiskRestorePointClientBeginRevokeAccessOptions) (resp azfake.PollerResponder[armcompute.DiskRestorePointClientRevokeAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleRestorePointCollectionName, restorePointCollectionName)
		testsuite.Require().Equal(exampleVmRestorePointName, vmRestorePointName)
		testsuite.Require().Equal(exampleDiskRestorePointName, diskRestorePointName)
		resp = azfake.PollerResponder[armcompute.DiskRestorePointClientRevokeAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.DiskRestorePointClientRevokeAccessResponse{}, nil)
		return
	}
	poller, err := client.BeginRevokeAccess(ctx, exampleResourceGroupName, exampleRestorePointCollectionName, exampleVmRestorePointName, exampleDiskRestorePointName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_EndGetAccess.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/diskRestorePointExamples/DiskRestorePoint_EndGetAccess.json")
}

func (testsuite *FakeTestSuite) TestSnapshots_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from a different subscription."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	var exampleSnapshot armcompute.Snapshot
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot1"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
		},
	}

	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromADifferentSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from the same subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot1"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_ByImportingAnUnmanagedBlobFromTheSameSubscription.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshotInDifferentRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription in a different region."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot2"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopyStart),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopyStart),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshotInDifferentRegion.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshotInDifferentRegion.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot2"
	exampleSnapshot = armcompute.Snapshot{
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.Snapshot, options *armcompute.SnapshotsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientCreateOrUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshot.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Create_FromAnExistingSnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Update() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update_WithAcceleratedNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a snapshot with accelerated networking."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	var exampleSnapshot armcompute.SnapshotUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"
	exampleSnapshot = armcompute.SnapshotUpdate{
		Properties: &armcompute.SnapshotUpdateProperties{
			DiskSizeGB: to.Ptr[int32](20),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
	}

	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			DiskSizeGB:        to.Ptr[int32](20),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.SnapshotUpdate, options *armcompute.SnapshotsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update_WithAcceleratedNetwork.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update_WithAcceleratedNetwork.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"
	exampleSnapshot = armcompute.SnapshotUpdate{
		Properties: &armcompute.SnapshotUpdateProperties{
			DiskSizeGB: to.Ptr[int32](20),
		},
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
	}

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			DiskSizeGB:        to.Ptr[int32](20),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, snapshotName string, snapshot armcompute.SnapshotUpdate, options *armcompute.SnapshotsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleSnapshot, snapshot))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientUpdateResponse{Snapshot: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleSnapshotName, exampleSnapshot, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Get() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a snapshot."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"

	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Type:     to.Ptr("Microsoft.Compute/snapshots"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Snapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
				SourceUniqueID:   to.Ptr("d633885d-d102-4481-901e-5b2413d1a7be"),
			},
			DiskSizeGB: to.Ptr[int32](100),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, snapshotName string, options *armcompute.SnapshotsClientGetOptions) (resp azfake.Responder[armcompute.SnapshotsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		resp = azfake.Responder[armcompute.SnapshotsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SnapshotsClientGetResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleSnapshotName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_GetIncrementalSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about an incremental snapshot."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "myIncrementalSnapshot"

	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("myIncrementalSnapshot"),
		Type:     to.Ptr("Microsoft.Compute/snapshots"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/myIncrementalSnapshot"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Snapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
				SourceUniqueID:   to.Ptr("d633885d-d102-4481-901e-5b2413d1a7be"),
			},
			DiskSizeBytes: to.Ptr[int64](10737418240),
			DiskSizeGB:    to.Ptr[int32](100),
			DiskState:     to.Ptr(armcompute.DiskState("0")),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:            to.Ptr(armcompute.HyperVGenerationV1),
			Incremental:                 to.Ptr(true),
			IncrementalSnapshotFamilyID: to.Ptr("d1a341d5-1ea7-4a85-b304-944ad8021639"),
			NetworkAccessPolicy:         to.Ptr(armcompute.NetworkAccessPolicy("0")),
			OSType:                      to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState:           to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079Z"); return t }()),
			UniqueID:            to.Ptr("a395e9c1-fb9e-446e-a9ba-7b2fa0bcd305"),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, snapshotName string, options *armcompute.SnapshotsClientGetOptions) (resp azfake.Responder[armcompute.SnapshotsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		resp = azfake.Responder[armcompute.SnapshotsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SnapshotsClientGetResponse{Snapshot: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleSnapshotName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_GetIncrementalSnapshot.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Snapshot))
}

func (testsuite *FakeTestSuite) TestSnapshots_Delete() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a snapshot."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, snapshotName string, options *armcompute.SnapshotsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		resp = azfake.PollerResponder[armcompute.SnapshotsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleSnapshotName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_Delete.json")
}

func (testsuite *FakeTestSuite) TestSnapshots_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.SnapshotList{
		Value: []*armcompute.Snapshot{
			{
				Name:     to.Ptr("mySnapshot"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.927Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.SnapshotsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.SnapshotsClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.SnapshotsClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SnapshotsClientListByResourceGroupResponse{SnapshotList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotList))
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_List() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a subscription."},
	})

	exampleRes := armcompute.SnapshotList{
		Value: []*armcompute.Snapshot{
			{
				Name:     to.Ptr("mySnapshot1"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
						SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.663Z"); return t }()),
				},
			},
			{
				Name:     to.Ptr("mySnapshot2"),
				Type:     to.Ptr("Microsoft.Compute/snapshots"),
				ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"department": to.Ptr("Development"),
					"project":    to.Ptr("Snapshots"),
				},
				Properties: &armcompute.SnapshotProperties{
					CreationData: &armcompute.CreationData{
						CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
						SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
					},
					DiskSizeGB: to.Ptr[int32](200),
					Encryption: &armcompute.Encryption{
						Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
					},
					EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
						Enabled: to.Ptr(true),
						EncryptionSettings: []*armcompute.EncryptionSettingsElement{
							{
								DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
									SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
								KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
									KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
									SourceVault: &armcompute.SourceVault{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
									},
								},
							}},
					},
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr("Succeeded"),
					TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.324Z"); return t }()),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.SnapshotsClientListOptions) (resp azfake.PagerResponder[armcompute.SnapshotsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.SnapshotsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SnapshotsClientListResponse{SnapshotList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SnapshotList))
	}
}

func (testsuite *FakeTestSuite) TestSnapshots_GrantAccess() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_BeginGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sas on a snapshot."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	var exampleGrantAccessData armcompute.GrantAccessData
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"
	exampleGrantAccessData = armcompute.GrantAccessData{
		Access:            to.Ptr(armcompute.AccessLevelRead),
		DurationInSeconds: to.Ptr[int32](300),
		FileFormat:        to.Ptr(armcompute.FileFormatVHDX),
	}

	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}

	fakeServer.BeginGrantAccess = func(ctx context.Context, resourceGroupName string, snapshotName string, grantAccessData armcompute.GrantAccessData, options *armcompute.SnapshotsClientBeginGrantAccessOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientGrantAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		testsuite.Require().True(reflect.DeepEqual(exampleGrantAccessData, grantAccessData))
		resp = azfake.PollerResponder[armcompute.SnapshotsClientGrantAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientGrantAccessResponse{AccessURI: exampleRes}, nil)
		return
	}
	poller, err := client.BeginGrantAccess(ctx, exampleResourceGroupName, exampleSnapshotName, exampleGrantAccessData, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_BeginGetAccess.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_BeginGetAccess.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.AccessURI))
}

func (testsuite *FakeTestSuite) TestSnapshots_RevokeAccess() {
	ctx := context.Background()
	fakeServer := fake.SnapshotsServer{}
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSnapshotsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_EndGetAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revoke access to a snapshot."},
	})
	var exampleResourceGroupName string
	var exampleSnapshotName string
	exampleResourceGroupName = "myResourceGroup"
	exampleSnapshotName = "mySnapshot"

	fakeServer.BeginRevokeAccess = func(ctx context.Context, resourceGroupName string, snapshotName string, options *armcompute.SnapshotsClientBeginRevokeAccessOptions) (resp azfake.PollerResponder[armcompute.SnapshotsClientRevokeAccessResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleSnapshotName, snapshotName)
		resp = azfake.PollerResponder[armcompute.SnapshotsClientRevokeAccessResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.SnapshotsClientRevokeAccessResponse{}, nil)
		return
	}
	poller, err := client.BeginRevokeAccess(ctx, exampleResourceGroupName, exampleSnapshotName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_EndGetAccess.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2023-01-02/examples/snapshotExamples/Snapshot_EndGetAccess.json")
}

func (testsuite *FakeTestSuite) TestResourceSKUs_List() {
	ctx := context.Background()
	fakeServer := fake.ResourceSKUsServer{}
	client, err := armcompute.NewResourceSKUsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewResourceSKUsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})

	exampleRes := armcompute.ResourceSKUsResult{
		Value: []*armcompute.ResourceSKU{
			{
				Name: to.Ptr("Standard_A0"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("20480"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("0.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("50"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armcompute.ResourceSKUCapabilities{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A0"),
				Tier:         to.Ptr("Standard"),
			},
			{
				Name: to.Ptr("Standard_A1"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("71680"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("1.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("True"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("100"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A1"),
				Tier:         to.Ptr("Standard"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ResourceSKUsClientListOptions) (resp azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ResourceSKUsClientListResponse{ResourceSKUsResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil,
		IncludeExtendedLocations: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkus.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUsResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkusForARegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs for the specified region"},
	})

	exampleRes = armcompute.ResourceSKUsResult{
		Value: []*armcompute.ResourceSKU{
			{
				Name: to.Ptr("Standard_A0"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("20480"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("0.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("50"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armcompute.ResourceSKUCapabilities{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A0"),
				Tier:         to.Ptr("Standard"),
			},
			{
				Name: to.Ptr("Standard_A1"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("71680"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("1.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("True"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("100"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A1"),
				Tier:         to.Ptr("Standard"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ResourceSKUsClientListOptions) (resp azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ResourceSKUsClientListResponse{ResourceSKUsResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: to.Ptr("location eq 'westus'"),
		IncludeExtendedLocations: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkusForARegion.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUsResult))
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkusWithExtendedLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs with Extended Location information"},
	})

	exampleRes = armcompute.ResourceSKUsResult{
		Value: []*armcompute.ResourceSKU{
			{
				Name: to.Ptr("Standard_A0"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("20480"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("0.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("50"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
							{
								Name: []*string{
									to.Ptr("2")},
								Capabilities: []*armcompute.ResourceSKUCapabilities{
									{
										Name:  to.Ptr("UltraSSDAvailable"),
										Value: to.Ptr("True"),
									}},
							}},
						Zones: []*string{
							to.Ptr("2"),
							to.Ptr("1")},
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A0"),
				Tier:         to.Ptr("Standard"),
			},
			{
				Name: to.Ptr("Standard_A1"),
				Capabilities: []*armcompute.ResourceSKUCapabilities{
					{
						Name:  to.Ptr("MaxResourceVolumeMB"),
						Value: to.Ptr("71680"),
					},
					{
						Name:  to.Ptr("OSVhdSizeMB"),
						Value: to.Ptr("1047552"),
					},
					{
						Name:  to.Ptr("vCPUs"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("HyperVGenerations"),
						Value: to.Ptr("V1"),
					},
					{
						Name:  to.Ptr("MemoryGB"),
						Value: to.Ptr("1.75"),
					},
					{
						Name:  to.Ptr("MaxDataDiskCount"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("LowPriorityCapable"),
						Value: to.Ptr("True"),
					},
					{
						Name:  to.Ptr("PremiumIO"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("vCPUsAvailable"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ACUs"),
						Value: to.Ptr("100"),
					},
					{
						Name:  to.Ptr("vCPUsPerCore"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("EphemeralOSDiskSupported"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("AcceleratedNetworkingEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("RdmaEnabled"),
						Value: to.Ptr("False"),
					},
					{
						Name:  to.Ptr("MaxNetworkInterfaces"),
						Value: to.Ptr("2"),
					}},
				Family: to.Ptr("standardA0_A7Family"),
				LocationInfo: []*armcompute.ResourceSKULocationInfo{
					{
						Location: to.Ptr("westus"),
						Zones: []*string{
							to.Ptr("1"),
							to.Ptr("2"),
							to.Ptr("3")},
					},
					{
						Type: to.Ptr(armcompute.ExtendedLocationTypeEdgeZone),
						ExtendedLocations: []*string{
							to.Ptr("Las Vegas"),
							to.Ptr("Seattle"),
							to.Ptr("Portland")},
						Location: to.Ptr("westus"),
					}},
				Locations: []*string{
					to.Ptr("westus")},
				ResourceType: to.Ptr("virtualMachines"),
				Size:         to.Ptr("A1"),
				Tier:         to.Ptr("Standard"),
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.ResourceSKUsClientListOptions) (resp azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.ResourceSKUsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.ResourceSKUsClientListResponse{ResourceSKUsResult: exampleRes}, nil)
		return
	}
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil,
		IncludeExtendedLocations: to.Ptr("true"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/Skus/stable/2021-07-01/examples/skus/ListAvailableResourceSkusWithExtendedLocations.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.ResourceSKUsResult))
	}
}

func (testsuite *FakeTestSuite) TestGalleries_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/CommunityGallery_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a community gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGallery armcompute.Gallery
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			SharingProfile: &armcompute.SharingProfile{
				CommunityGalleryInfo: &armcompute.CommunityGalleryInfo{
					Eula:             to.Ptr("eula"),
					PublicNamePrefix: to.Ptr("PirPublic"),
					PublisherContact: to.Ptr("pir@microsoft.com"),
					PublisherURI:     to.Ptr("uri"),
				},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesCommunity),
			},
		},
	}

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				CommunityGalleryInfo: &armcompute.CommunityGalleryInfo{
					Eula:             to.Ptr("eula"),
					PublicNamePrefix: to.Ptr("PirPublic"),
					PublisherContact: to.Ptr("pir@microsoft.com"),
					PublisherURI:     to.Ptr("uri"),
				},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesCommunity),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/CommunityGallery_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/CommunityGallery_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_WithSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with sharing profile."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_WithSharingProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_WithSharingProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_SoftDeletionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with soft deletion enabled."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			SoftDeletePolicy: &armcompute.SoftDeletePolicy{
				IsSoftDeleteEnabled: to.Ptr(true),
			},
		},
	}

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			SoftDeletePolicy: &armcompute.SoftDeletePolicy{
				IsSoftDeleteEnabled: to.Ptr(true),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_SoftDeletionEnabled.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create_SoftDeletionEnabled.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.Gallery{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
		},
	}

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.Gallery, options *armcompute.GalleriesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientCreateOrUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGallery armcompute.GalleryUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGallery = armcompute.GalleryUpdate{
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
		},
	}

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, gallery armcompute.GalleryUpdate, options *armcompute.GalleriesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleGallery, gallery))
		resp = azfake.PollerResponder[armcompute.GalleriesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientUpdateResponse{Gallery: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGallery, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/CommunityGallery_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a community gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				CommunityGalleryInfo: &armcompute.CommunityGalleryInfo{
					CommunityGalleryEnabled: to.Ptr(true),
					Eula:                    to.Ptr("eula"),
					PublicNames: []*string{
						to.Ptr("GalelryPublicName")},
					PublisherContact: to.Ptr("pir@microsoft.com"),
					PublisherURI:     to.Ptr("uri"),
				},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesCommunity),
			},
			SharingStatus: &armcompute.SharingStatus{
				AggregatedState: to.Ptr(armcompute.SharingStateSucceeded),
				Summary: []*armcompute.RegionalSharingStatus{
					{
						Region:  to.Ptr("westus"),
						State:   to.Ptr(armcompute.SharingStateSucceeded),
						Details: to.Ptr(""),
					}},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: nil,
		Expand: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/CommunityGallery_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get_WithExpandSharingProfileGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with expand sharingProfile groups."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: nil,
		Expand: to.Ptr(armcompute.GalleryExpandParamsSharingProfileGroups),
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get_WithExpandSharingProfileGroups.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get_WithSelectPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with select permissions."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: to.Ptr(armcompute.SelectPermissionsPermissions),
		Expand: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get_WithSelectPermissions.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientGetOptions) (resp azfake.Responder[armcompute.GalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.Responder[armcompute.GalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleriesClientGetResponse{Gallery: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, &armcompute.GalleriesClientGetOptions{Select: nil,
		Expand: nil,
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.Gallery))
}

func (testsuite *FakeTestSuite) TestGalleries_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, options *armcompute.GalleriesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleriesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PollerResponder[armcompute.GalleriesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleriesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_Delete.json")
}

func (testsuite *FakeTestSuite) TestGalleries_ListByResourceGroup() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a resource group."},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "myResourceGroup"

	exampleRes := armcompute.GalleryList{
		Value: []*armcompute.Gallery{
			{
				Name:     to.Ptr("myGalleryName"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryProperties{
					Description: to.Ptr("This is the gallery description."),
					Identifier: &armcompute.GalleryIdentifier{
						UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
					},
					ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByResourceGroupPager = func(resourceGroupName string, options *armcompute.GalleriesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.GalleriesClientListByResourceGroupResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.GalleriesClientListByResourceGroupResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleriesClientListByResourceGroupResponse{GalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListByResourceGroupPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ListByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryList))
	}
}

func (testsuite *FakeTestSuite) TestGalleries_List() {
	ctx := context.Background()
	fakeServer := fake.GalleriesServer{}
	client, err := armcompute.NewGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a subscription."},
	})

	exampleRes := armcompute.GalleryList{
		Value: []*armcompute.Gallery{
			{
				Name:     to.Ptr("myGalleryName"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryProperties{
					Description: to.Ptr("This is the gallery description."),
					Identifier: &armcompute.GalleryIdentifier{
						UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
					},
					ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListPager = func(options *armcompute.GalleriesClientListOptions) (resp azfake.PagerResponder[armcompute.GalleriesClientListResponse]) {
		resp = azfake.PagerResponder[armcompute.GalleriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleriesClientListResponse{GalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ListBySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryList))
	}
}

func (testsuite *FakeTestSuite) TestGalleryImages_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImage armcompute.GalleryImage
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImage = armcompute.GalleryImage{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImage armcompute.GalleryImage, options *armcompute.GalleryImagesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImage, galleryImage))
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientCreateOrUpdateResponse{GalleryImage: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImage, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImage armcompute.GalleryImageUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImage = armcompute.GalleryImageUpdate{
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImage armcompute.GalleryImageUpdate, options *armcompute.GalleryImagesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImage, galleryImage))
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientUpdateResponse{GalleryImage: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImage, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImagesClientGetOptions) (resp azfake.Responder[armcompute.GalleryImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.Responder[armcompute.GalleryImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImagesClientGetResponse{GalleryImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImage))
}

func (testsuite *FakeTestSuite) TestGalleryImages_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImagesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryImagesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PollerResponder[armcompute.GalleryImagesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImagesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_Delete.json")
}

func (testsuite *FakeTestSuite) TestGalleryImages_ListByGallery() {
	ctx := context.Background()
	fakeServer := fake.GalleryImagesServer{}
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_ListByGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery images in a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.GalleryImageList{
		Value: []*armcompute.GalleryImage{
			{
				Name:     to.Ptr("myGalleryImageName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryImageProperties{
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					Identifier: &armcompute.GalleryImageIdentifier{
						Offer:     to.Ptr("myOfferName"),
						Publisher: to.Ptr("myPublisherName"),
						SKU:       to.Ptr("mySkuName"),
					},
					OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
					ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
				},
			}},
	}

	fakeServer.NewListByGalleryPager = func(resourceGroupName string, galleryName string, options *armcompute.GalleryImagesClientListByGalleryOptions) (resp azfake.PagerResponder[armcompute.GalleryImagesClientListByGalleryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PagerResponder[armcompute.GalleryImagesClientListByGalleryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryImagesClientListByGalleryResponse{GalleryImageList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryPager(exampleResourceGroupName, exampleGalleryName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImage_ListByGallery.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryImageList))
	}
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVmAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using VM as source."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	var exampleGalleryImageVersion armcompute.GalleryImageVersion
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVmAsSource.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVmAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithCommunityImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using community gallery image as source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					CommunityGalleryImageID: to.Ptr("/communityGalleries/{communityGalleryName}/images/{communityGalleryImageName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					CommunityGalleryImageID: to.Ptr("/communityGalleries/{communityGalleryName}/images/{communityGalleryImageName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithCommunityImageVersionAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithCommunityImageVersionAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using managed image as source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using mix of disks and snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryDiskImageSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryDiskImageSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryDiskImageSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryDiskImageSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithShallowReplicationMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shallow replication mode."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				ReplicationMode: to.Ptr(armcompute.ReplicationModeShallow),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				ReplicationMode:    to.Ptr(armcompute.ReplicationModeShallow),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithShallowReplicationMode.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithShallowReplicationMode.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shared image as source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithImageVersionAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithImageVersionAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryDiskImageSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryDiskImageSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryDiskImageSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryDiskImageSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVHD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using vhd as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryDiskImageSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryDiskImageSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryDiskImageSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryDiskImageSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVHD.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithVHD.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithTargetExtendedLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image version with target extended locations specified."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetExtendedLocations: []*armcompute.GalleryTargetExtendedLocation{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExtendedLocation: &armcompute.GalleryExtendedLocation{
							Name: to.Ptr("microsoftlosangeles1"),
							Type: to.Ptr(armcompute.GalleryExtendedLocationTypeEdgeZone),
						},
						ExtendedLocationReplicaCount: to.Ptr[int32](1),
						StorageAccountType:           to.Ptr(armcompute.EdgeZoneStorageAccountType("StandardSSD_LRS(default)")),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExtendedLocation: &armcompute.GalleryExtendedLocation{
							Name: to.Ptr("microsoftnewyork1"),
							Type: to.Ptr(armcompute.GalleryExtendedLocationTypeEdgeZone),
						},
						ExtendedLocationReplicaCount: to.Ptr[int32](1),
						StorageAccountType:           to.Ptr(armcompute.EdgeZoneStorageAccountType("StandardSSD_LRS(default)")),
					}},
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersion, options *armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientCreateOrUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithTargetExtendedLocations.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Create_WithTargetExtendedLocations.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version (Managed Image as source)."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	var exampleGalleryImageVersion armcompute.GalleryImageVersionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersionUpdate{
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersionUpdate, options *armcompute.GalleryImageVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update_WithoutSourceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version without source id."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"
	exampleGalleryImageVersion = armcompute.GalleryImageVersionUpdate{
		Properties: &armcompute.GalleryImageVersionProperties{
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{},
		},
	}

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, galleryImageVersion armcompute.GalleryImageVersionUpdate, options *armcompute.GalleryImageVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryImageVersion, galleryImageVersion))
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientUpdateResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, exampleGalleryImageVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update_WithoutSourceId.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Update_WithoutSourceId.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with replication status."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					},
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("East US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithReplicationStatus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with snapshots as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryDiskImageSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{diskSnapshotName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryDiskImageSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{snapshotName}"),
					},
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithSnapshotsAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithVhdAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with vhd as a source."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryDiskImageSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryDiskImageSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get_WithVhdAsSource.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
				PolicyViolations: []*armcompute.PolicyViolation{
					{
						Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
						Details:  to.Ptr("This is the policy violation details."),
					}},
				ReportedForPolicyViolation: to.Ptr(true),
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionFullSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.GalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryImageVersionsClientGetResponse{GalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, &armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "1.0.0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.GalleryImageVersionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryImageVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.PollerResponder[armcompute.GalleryImageVersionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryImageVersionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_Delete.json")
}

func (testsuite *FakeTestSuite) TestGalleryImageVersions_ListByGalleryImage() {
	ctx := context.Background()
	fakeServer := fake.GalleryImageVersionsServer{}
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_ListByGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery image versions in a gallery image definition."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryImageName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.GalleryImageVersionList{
		Value: []*armcompute.GalleryImageVersion{
			{
				Name:     to.Ptr("1.0.0"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryImageVersionProperties{
					ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
					PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
						PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.000Z"); return t }()),
						ReplicaCount:       to.Ptr[int32](1),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						TargetRegions: []*armcompute.TargetRegion{
							{
								Name: to.Ptr("West US"),
								Encryption: &armcompute.EncryptionImages{
									DataDiskImages: []*armcompute.DataDiskImageEncryption{
										{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
											Lun:                 to.Ptr[int32](0),
										},
										{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
											Lun:                 to.Ptr[int32](1),
										}},
									OSDiskImage: &armcompute.OSDiskImageEncryption{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									},
								},
								ExcludeFromLatest:    to.Ptr(false),
								RegionalReplicaCount: to.Ptr[int32](1),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							},
							{
								Name:                 to.Ptr("East US"),
								ExcludeFromLatest:    to.Ptr(false),
								RegionalReplicaCount: to.Ptr[int32](2),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							}},
					},
					SafetyProfile: &armcompute.GalleryImageVersionSafetyProfile{
						AllowDeletionOfReplicatedLocations: to.Ptr(false),
						PolicyViolations: []*armcompute.PolicyViolation{
							{
								Category: to.Ptr(armcompute.PolicyViolationCategoryImageFlaggedUnsafe),
								Details:  to.Ptr("This is the policy violation details."),
							}},
						ReportedForPolicyViolation: to.Ptr(true),
					},
					StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
						DataDiskImages: []*armcompute.GalleryDataDiskImage{
							{
								HostCaching: to.Ptr(armcompute.HostCachingNone),
								SizeInGB:    to.Ptr[int32](10),
								Lun:         to.Ptr[int32](1),
							}},
						OSDiskImage: &armcompute.GalleryOSDiskImage{
							HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
							SizeInGB:    to.Ptr[int32](10),
						},
						Source: &armcompute.GalleryArtifactVersionFullSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
						},
					},
				},
			}},
	}

	fakeServer.NewListByGalleryImagePager = func(resourceGroupName string, galleryName string, galleryImageName string, options *armcompute.GalleryImageVersionsClientListByGalleryImageOptions) (resp azfake.PagerResponder[armcompute.GalleryImageVersionsClientListByGalleryImageResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PagerResponder[armcompute.GalleryImageVersionsClientListByGalleryImageResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryImageVersionsClientListByGalleryImageResponse{GalleryImageVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryImagePager(exampleResourceGroupName, exampleGalleryName, exampleGalleryImageName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryImageVersion_ListByGalleryImage.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryImageVersionList))
	}
}

func (testsuite *FakeTestSuite) TestGalleryApplications_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplication armcompute.GalleryApplication
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplication = armcompute.GalleryApplication{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description: to.Ptr("This is the gallery application description."),
			CustomActions: []*armcompute.GalleryApplicationCustomAction{
				{
					Name:        to.Ptr("myCustomAction"),
					Description: to.Ptr("This is the custom action description."),
					Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
						{
							Name:         to.Ptr("myCustomActionParameter"),
							Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
							Description:  to.Ptr("This is the description of the parameter"),
							DefaultValue: to.Ptr("default value of parameter."),
							Required:     to.Ptr(false),
						}},
					Script: to.Ptr("myCustomActionScript"),
				}},
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description: to.Ptr("This is the gallery application description."),
			CustomActions: []*armcompute.GalleryApplicationCustomAction{
				{
					Name:        to.Ptr("myCustomAction"),
					Description: to.Ptr("This is the custom action description."),
					Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
						{
							Name:         to.Ptr("myCustomActionParameter"),
							Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
							Description:  to.Ptr("This is the description of the parameter"),
							DefaultValue: to.Ptr("default value of parameter."),
							Required:     to.Ptr(false),
						}},
					Script: to.Ptr("myCustomActionScript"),
				}},
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplication armcompute.GalleryApplication, options *armcompute.GalleryApplicationsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplication, galleryApplication))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientCreateOrUpdateResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplication, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplication armcompute.GalleryApplicationUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplication = armcompute.GalleryApplicationUpdate{
		Properties: &armcompute.GalleryApplicationProperties{
			Description: to.Ptr("This is the gallery application description."),
			CustomActions: []*armcompute.GalleryApplicationCustomAction{
				{
					Name:        to.Ptr("myCustomAction"),
					Description: to.Ptr("This is the custom action description."),
					Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
						{
							Name:         to.Ptr("myCustomActionParameter"),
							Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
							Description:  to.Ptr("This is the description of the parameter"),
							DefaultValue: to.Ptr("default value of parameter."),
							Required:     to.Ptr(false),
						}},
					Script: to.Ptr("myCustomActionScript"),
				}},
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description: to.Ptr("This is the gallery application description."),
			CustomActions: []*armcompute.GalleryApplicationCustomAction{
				{
					Name:        to.Ptr("myCustomAction"),
					Description: to.Ptr("This is the custom action description."),
					Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
						{
							Name:         to.Ptr("myCustomActionParameter"),
							Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
							Description:  to.Ptr("This is the description of the parameter"),
							DefaultValue: to.Ptr("default value of parameter."),
							Required:     to.Ptr(false),
						}},
					Script: to.Ptr("myCustomActionScript"),
				}},
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplication armcompute.GalleryApplicationUpdate, options *armcompute.GalleryApplicationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplication, galleryApplication))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientUpdateResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplication, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description: to.Ptr("This is the gallery application description."),
			CustomActions: []*armcompute.GalleryApplicationCustomAction{
				{
					Name:        to.Ptr("myCustomAction"),
					Description: to.Ptr("This is the custom action description."),
					Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
						{
							Name:         to.Ptr("myCustomActionParameter"),
							Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
							Description:  to.Ptr("This is the description of the parameter"),
							DefaultValue: to.Ptr("default value of parameter."),
							Required:     to.Ptr(false),
						}},
					Script: to.Ptr("myCustomActionScript"),
				}},
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.Responder[armcompute.GalleryApplicationsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationsClientGetResponse{GalleryApplication: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplication))
}

func (testsuite *FakeTestSuite) TestGalleryApplications_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.PollerResponder[armcompute.GalleryApplicationsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_Delete.json")
}

func (testsuite *FakeTestSuite) TestGalleryApplications_ListByGallery() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationsServer{}
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_ListByGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Applications in a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"

	exampleRes := armcompute.GalleryApplicationList{
		Value: []*armcompute.GalleryApplication{
			{
				Name:     to.Ptr("myGalleryApplicationName"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryApplicationProperties{
					Description: to.Ptr("This is the gallery application description."),
					CustomActions: []*armcompute.GalleryApplicationCustomAction{
						{
							Name:        to.Ptr("myCustomAction"),
							Description: to.Ptr("This is the custom action description."),
							Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
								{
									Name:         to.Ptr("myCustomActionParameter"),
									Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
									Description:  to.Ptr("This is the description of the parameter"),
									DefaultValue: to.Ptr("default value of parameter."),
									Required:     to.Ptr(false),
								}},
							Script: to.Ptr("myCustomActionScript"),
						}},
					Eula:                to.Ptr("This is the gallery application EULA."),
					PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
					ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
					SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			}},
	}

	fakeServer.NewListByGalleryPager = func(resourceGroupName string, galleryName string, options *armcompute.GalleryApplicationsClientListByGalleryOptions) (resp azfake.PagerResponder[armcompute.GalleryApplicationsClientListByGalleryResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		resp = azfake.PagerResponder[armcompute.GalleryApplicationsClientListByGalleryResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryApplicationsClientListByGalleryResponse{GalleryApplicationList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryPager(exampleResourceGroupName, exampleGalleryName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplication_ListByGallery.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryApplicationList))
	}
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	var exampleGalleryApplicationVersion armcompute.GalleryApplicationVersion
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"
	exampleGalleryApplicationVersion = armcompute.GalleryApplicationVersion{
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				CustomActions: []*armcompute.GalleryApplicationCustomAction{
					{
						Name:        to.Ptr("myCustomAction"),
						Description: to.Ptr("This is the custom action description."),
						Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
							{
								Name:         to.Ptr("myCustomActionParameter"),
								Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
								Description:  to.Ptr("This is the description of the parameter"),
								DefaultValue: to.Ptr("default value of parameter."),
								Required:     to.Ptr(false),
							}},
						Script: to.Ptr("myCustomActionScript"),
					}},
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				AdvancedSettings: map[string]*string{
					"timeout": to.Ptr("300"),
					"user":    to.Ptr("root"),
				},
				CustomActions: []*armcompute.GalleryApplicationCustomAction{
					{
						Name:        to.Ptr("myCustomAction"),
						Description: to.Ptr("This is the custom action description."),
						Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
							{
								Name:         to.Ptr("myCustomActionParameter"),
								Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
								Description:  to.Ptr("This is the description of the parameter"),
								DefaultValue: to.Ptr("default value of parameter."),
								Required:     to.Ptr(false),
							}},
						Script: to.Ptr("myCustomActionScript"),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Settings: &armcompute.UserArtifactSettings{
					ConfigFileName:  to.Ptr("configuration.cfg"),
					PackageFileName: to.Ptr("package.zip"),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersion, options *armcompute.GalleryApplicationVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplicationVersion, galleryApplicationVersion))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, exampleGalleryApplicationVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Create.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Create.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Update() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	var exampleGalleryApplicationVersion armcompute.GalleryApplicationVersionUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"
	exampleGalleryApplicationVersion = armcompute.GalleryApplicationVersionUpdate{
		Properties: &armcompute.GalleryApplicationVersionProperties{
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersionUpdate, options *armcompute.GalleryApplicationVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		testsuite.Require().True(reflect.DeepEqual(exampleGalleryApplicationVersion, galleryApplicationVersion))
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientUpdateResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, exampleGalleryApplicationVersion, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Update.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Update.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Get_WithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version with replication status."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				AdvancedSettings: map[string]*string{
					"timeout": to.Ptr("300"),
					"user":    to.Ptr("root"),
				},
				CustomActions: []*armcompute.GalleryApplicationCustomAction{
					{
						Name:        to.Ptr("myCustomAction"),
						Description: to.Ptr("This is the custom action description."),
						Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
							{
								Name:         to.Ptr("myCustomActionParameter"),
								Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
								Description:  to.Ptr("This is the description of the parameter"),
								DefaultValue: to.Ptr("default value of parameter."),
								Required:     to.Ptr(false),
							}},
						Script: to.Ptr("myCustomActionScript"),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Settings: &armcompute.UserArtifactSettings{
					ConfigFileName:  to.Ptr("configuration.cfg"),
					PackageFileName: to.Ptr("package.zip"),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientGetResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, &armcompute.GalleryApplicationVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Get_WithReplicationStatus.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	exampleRes = armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						ExcludeFromLatest:    to.Ptr(false),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				CustomActions: []*armcompute.GalleryApplicationCustomAction{
					{
						Name:        to.Ptr("myCustomAction"),
						Description: to.Ptr("This is the custom action description."),
						Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
							{
								Name:         to.Ptr("myCustomActionParameter"),
								Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
								Description:  to.Ptr("This is the description of the parameter"),
								DefaultValue: to.Ptr("default value of parameter."),
								Required:     to.Ptr(false),
							}},
						Script: to.Ptr("myCustomActionScript"),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
				AllowDeletionOfReplicatedLocations: to.Ptr(false),
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientGetResponse{GalleryApplicationVersion: exampleRes}, nil)
		return
	}
	res, err = client.Get(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, &armcompute.GalleryApplicationVersionsClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion))
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_Delete() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application Version."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	var exampleGalleryApplicationVersionName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"
	exampleGalleryApplicationVersionName = "1.0.0"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		testsuite.Require().Equal(exampleGalleryApplicationVersionName, galleryApplicationVersionName)
		resp = azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GalleryApplicationVersionsClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, exampleGalleryApplicationVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_Delete.json")
}

func (testsuite *FakeTestSuite) TestGalleryApplicationVersions_ListByGalleryApplication() {
	ctx := context.Background()
	fakeServer := fake.GalleryApplicationVersionsServer{}
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGalleryApplicationVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_ListByGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Application Versions in a gallery Application Definition."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleGalleryApplicationName string
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleGalleryApplicationName = "myGalleryApplicationName"

	exampleRes := armcompute.GalleryApplicationVersionList{
		Value: []*armcompute.GalleryApplicationVersion{
			{
				Name:     to.Ptr("1.0.0"),
				Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
				ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
				Location: to.Ptr("West US"),
				Properties: &armcompute.GalleryApplicationVersionProperties{
					ProvisioningState: to.Ptr(armcompute.GalleryProvisioningStateSucceeded),
					PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
						EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00.000Z"); return t }()),
						ExcludeFromLatest:  to.Ptr(false),
						PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.597Z"); return t }()),
						ReplicaCount:       to.Ptr[int32](1),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						TargetRegions: []*armcompute.TargetRegion{
							{
								Name:                 to.Ptr("West US"),
								ExcludeFromLatest:    to.Ptr(false),
								RegionalReplicaCount: to.Ptr[int32](1),
								StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							}},
						CustomActions: []*armcompute.GalleryApplicationCustomAction{
							{
								Name:        to.Ptr("myCustomAction"),
								Description: to.Ptr("This is the custom action description."),
								Parameters: []*armcompute.GalleryApplicationCustomActionParameter{
									{
										Name:         to.Ptr("myCustomActionParameter"),
										Type:         to.Ptr(armcompute.GalleryApplicationCustomActionParameterTypeString),
										Description:  to.Ptr("This is the description of the parameter"),
										DefaultValue: to.Ptr("default value of parameter."),
										Required:     to.Ptr(false),
									}},
								Script: to.Ptr("myCustomActionScript"),
							}},
						EnableHealthCheck: to.Ptr(false),
						ManageActions: &armcompute.UserArtifactManage{
							Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
							Remove:  to.Ptr("del C:\\package "),
						},
						Source: &armcompute.UserArtifactSource{
							MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
						},
					},
					SafetyProfile: &armcompute.GalleryApplicationVersionSafetyProfile{
						AllowDeletionOfReplicatedLocations: to.Ptr(false),
					},
				},
			}},
	}

	fakeServer.NewListByGalleryApplicationPager = func(resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationVersionsClientListByGalleryApplicationOptions) (resp azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().Equal(exampleGalleryApplicationName, galleryApplicationName)
		resp = azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse]{}
		resp.AddPage(http.StatusOK, armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse{GalleryApplicationVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListByGalleryApplicationPager(exampleResourceGroupName, exampleGalleryName, exampleGalleryApplicationName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/GalleryApplicationVersion_ListByGalleryApplication.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.GalleryApplicationVersionList))
	}
}

func (testsuite *FakeTestSuite) TestGallerySharingProfile_Update() {
	ctx := context.Background()
	fakeServer := fake.GallerySharingProfileServer{}
	client, err := armcompute.NewGallerySharingProfileClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewGallerySharingProfileServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_AddToSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add sharing id to the sharing profile of a gallery."},
	})
	var exampleResourceGroupName string
	var exampleGalleryName string
	var exampleSharingUpdate armcompute.SharingUpdate
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleSharingUpdate = armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}

	exampleRes := armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate armcompute.SharingUpdate, options *armcompute.GallerySharingProfileClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleSharingUpdate, sharingUpdate))
		resp = azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GallerySharingProfileClientUpdateResponse{SharingUpdate: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleSharingUpdate, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_AddToSharingProfile.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_AddToSharingProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharingUpdate))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ResetSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reset sharing profile of a gallery."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleSharingUpdate = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}

	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate armcompute.SharingUpdate, options *armcompute.GallerySharingProfileClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleSharingUpdate, sharingUpdate))
		resp = azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GallerySharingProfileClientUpdateResponse{SharingUpdate: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleSharingUpdate, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ResetSharingProfile.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_ResetSharingProfile.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharingUpdate))

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_EnableCommunityGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"share a gallery to community."},
	})
	exampleResourceGroupName = "myResourceGroup"
	exampleGalleryName = "myGalleryName"
	exampleSharingUpdate = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesEnableCommunity),
	}

	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesEnableCommunity),
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate armcompute.SharingUpdate, options *armcompute.GallerySharingProfileClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleGalleryName, galleryName)
		testsuite.Require().True(reflect.DeepEqual(exampleSharingUpdate, sharingUpdate))
		resp = azfake.PollerResponder[armcompute.GallerySharingProfileClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.GallerySharingProfileClientUpdateResponse{SharingUpdate: exampleRes}, nil)
		return
	}
	poller, err = client.BeginUpdate(ctx, exampleResourceGroupName, exampleGalleryName, exampleSharingUpdate, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_EnableCommunityGallery.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/galleryExamples/Gallery_EnableCommunityGallery.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharingUpdate))
}

func (testsuite *FakeTestSuite) TestSharedGalleries_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleriesServer{}
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGallery_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List shared galleries."},
	})
	var exampleLocation string
	exampleLocation = "myLocation"

	exampleRes := armcompute.SharedGalleryList{
		Value: []*armcompute.SharedGallery{
			{
				Name:     to.Ptr("galleryUniqueName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, options *armcompute.SharedGalleriesClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleriesClientListResponse{SharedGalleryList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, &armcompute.SharedGalleriesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGallery_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryList))
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleries_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleriesServer{}
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGallery_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a shared gallery."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"

	exampleRes := armcompute.SharedGallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, options *armcompute.SharedGalleriesClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		resp = azfake.Responder[armcompute.SharedGalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleriesClientGetResponse{SharedGallery: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGallery_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGallery))
}

func (testsuite *FakeTestSuite) TestSharedGalleryImages_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImagesServer{}
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImages_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List shared gallery images."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"

	exampleRes := armcompute.SharedGalleryImageList{
		Value: []*armcompute.SharedGalleryImage{
			{
				Name:     to.Ptr("myGalleryImageName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
				},
				Properties: &armcompute.SharedGalleryImageProperties{
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					Identifier: &armcompute.GalleryImageIdentifier{
						Offer:     to.Ptr("myOfferName"),
						Publisher: to.Ptr("myPublisherName"),
						SKU:       to.Ptr("mySkuName"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, galleryUniqueName string, options *armcompute.SharedGalleryImagesClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleryImagesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		resp = azfake.PagerResponder[armcompute.SharedGalleryImagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleryImagesClientListResponse{SharedGalleryImageList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, exampleGalleryUniqueName, &armcompute.SharedGalleryImagesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImages_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryImageList))
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleryImages_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImagesServer{}
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImage_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a shared gallery image."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.SharedGalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
		},
		Properties: &armcompute.SharedGalleryImageProperties{
			Eula:             to.Ptr("https://www.microsoft.com/en-us/"),
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:             to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			PrivacyStatementURI: to.Ptr("https://www.microsoft.com/en-us/"),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, galleryImageName string, options *armcompute.SharedGalleryImagesClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleryImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.Responder[armcompute.SharedGalleryImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleryImagesClientGetResponse{SharedGalleryImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImage_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGalleryImage))
}

func (testsuite *FakeTestSuite) TestSharedGalleryImageVersions_List() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImageVersionsServer{}
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImageVersions_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List shared gallery image versions."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.SharedGalleryImageVersionList{
		Value: []*armcompute.SharedGalleryImageVersion{
			{
				Name:     to.Ptr("myGalleryImageVersionName"),
				Location: to.Ptr("myLocation"),
				Identifier: &armcompute.SharedGalleryIdentifier{
					UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
				},
				Properties: &armcompute.SharedGalleryImageVersionProperties{
					EndOfLifeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
					ExcludeFromLatest: to.Ptr(false),
					PublishedDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
					StorageProfile: &armcompute.SharedGalleryImageVersionStorageProfile{
						OSDiskImage: &armcompute.SharedGalleryOSDiskImage{
							DiskSizeGB:  to.Ptr[int32](29),
							HostCaching: to.Ptr(armcompute.SharedGalleryHostCachingNone),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(location string, galleryUniqueName string, galleryImageName string, options *armcompute.SharedGalleryImageVersionsClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleryImageVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PagerResponder[armcompute.SharedGalleryImageVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.SharedGalleryImageVersionsClientListResponse{SharedGalleryImageVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, &armcompute.SharedGalleryImageVersionsClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImageVersions_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.SharedGalleryImageVersionList))
	}
}

func (testsuite *FakeTestSuite) TestSharedGalleryImageVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.SharedGalleryImageVersionsServer{}
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewSharedGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImageVersion_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a shared gallery image version."},
	})
	var exampleLocation string
	var exampleGalleryUniqueName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleLocation = "myLocation"
	exampleGalleryUniqueName = "galleryUniqueName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "myGalleryImageVersionName"

	exampleRes := armcompute.SharedGalleryImageVersion{
		Name:     to.Ptr("myGalleryImageVersionName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Properties: &armcompute.SharedGalleryImageVersionProperties{
			EndOfLifeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
			ExcludeFromLatest: to.Ptr(false),
			PublishedDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
			StorageProfile: &armcompute.SharedGalleryImageVersionStorageProfile{
				OSDiskImage: &armcompute.SharedGalleryOSDiskImage{
					DiskSizeGB:  to.Ptr[int32](29),
					HostCaching: to.Ptr(armcompute.SharedGalleryHostCachingNone),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, galleryUniqueName string, galleryImageName string, galleryImageVersionName string, options *armcompute.SharedGalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleGalleryUniqueName, galleryUniqueName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.SharedGalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.SharedGalleryImageVersionsClientGetResponse{SharedGalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, exampleGalleryUniqueName, exampleGalleryImageName, exampleGalleryImageVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/sharedGalleryExamples/SharedGalleryImageVersion_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.SharedGalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestCommunityGalleries_Get() {
	ctx := context.Background()
	fakeServer := fake.CommunityGalleriesServer{}
	client, err := armcompute.NewCommunityGalleriesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCommunityGalleriesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGallery_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a community gallery."},
	})
	var exampleLocation string
	var examplePublicGalleryName string
	exampleLocation = "myLocation"
	examplePublicGalleryName = "publicGalleryName"

	exampleRes := armcompute.CommunityGallery{
		Name: to.Ptr("publicGalleryName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGallery"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName"),
		},
		Location: to.Ptr("myLocation"),
	}

	fakeServer.Get = func(ctx context.Context, location string, publicGalleryName string, options *armcompute.CommunityGalleriesClientGetOptions) (resp azfake.Responder[armcompute.CommunityGalleriesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublicGalleryName, publicGalleryName)
		resp = azfake.Responder[armcompute.CommunityGalleriesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CommunityGalleriesClientGetResponse{CommunityGallery: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, examplePublicGalleryName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGallery_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CommunityGallery))
}

func (testsuite *FakeTestSuite) TestCommunityGalleryImages_Get() {
	ctx := context.Background()
	fakeServer := fake.CommunityGalleryImagesServer{}
	client, err := armcompute.NewCommunityGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCommunityGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImage_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a community gallery image."},
	})
	var exampleLocation string
	var examplePublicGalleryName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	examplePublicGalleryName = "publicGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.CommunityGalleryImage{
		Name: to.Ptr("myGalleryImageName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGalleryImage"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName"),
		},
		Location: to.Ptr("myLocation"),
		Properties: &armcompute.CommunityGalleryImageProperties{
			Eula:             to.Ptr("https://www.microsoft.com/en-us/"),
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.CommunityGalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:             to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			PrivacyStatementURI: to.Ptr("https://www.microsoft.com/en-us/"),
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, publicGalleryName string, galleryImageName string, options *armcompute.CommunityGalleryImagesClientGetOptions) (resp azfake.Responder[armcompute.CommunityGalleryImagesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublicGalleryName, publicGalleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.Responder[armcompute.CommunityGalleryImagesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CommunityGalleryImagesClientGetResponse{CommunityGalleryImage: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, examplePublicGalleryName, exampleGalleryImageName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImage_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CommunityGalleryImage))
}

func (testsuite *FakeTestSuite) TestCommunityGalleryImages_List() {
	ctx := context.Background()
	fakeServer := fake.CommunityGalleryImagesServer{}
	client, err := armcompute.NewCommunityGalleryImagesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCommunityGalleryImagesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImage_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List community gallery images."},
	})
	var exampleLocation string
	var examplePublicGalleryName string
	exampleLocation = "myLocation"
	examplePublicGalleryName = "publicGalleryName"

	exampleRes := armcompute.CommunityGalleryImageList{
		Value: []*armcompute.CommunityGalleryImage{
			{
				Name: to.Ptr("myGalleryImageName"),
				Identifier: &armcompute.CommunityGalleryIdentifier{
					UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName"),
				},
				Location: to.Ptr("myLocation"),
				Properties: &armcompute.CommunityGalleryImageProperties{
					HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
					Identifier: &armcompute.CommunityGalleryImageIdentifier{
						Offer:     to.Ptr("myOfferName"),
						Publisher: to.Ptr("myPublisherName"),
						SKU:       to.Ptr("mySkuName"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			}},
	}

	fakeServer.NewListPager = func(location string, publicGalleryName string, options *armcompute.CommunityGalleryImagesClientListOptions) (resp azfake.PagerResponder[armcompute.CommunityGalleryImagesClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublicGalleryName, publicGalleryName)
		resp = azfake.PagerResponder[armcompute.CommunityGalleryImagesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CommunityGalleryImagesClientListResponse{CommunityGalleryImageList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, examplePublicGalleryName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImage_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CommunityGalleryImageList))
	}
}

func (testsuite *FakeTestSuite) TestCommunityGalleryImageVersions_Get() {
	ctx := context.Background()
	fakeServer := fake.CommunityGalleryImageVersionsServer{}
	client, err := armcompute.NewCommunityGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCommunityGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImageVersion_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a community gallery image version."},
	})
	var exampleLocation string
	var examplePublicGalleryName string
	var exampleGalleryImageName string
	var exampleGalleryImageVersionName string
	exampleLocation = "myLocation"
	examplePublicGalleryName = "publicGalleryName"
	exampleGalleryImageName = "myGalleryImageName"
	exampleGalleryImageVersionName = "myGalleryImageVersionName"

	exampleRes := armcompute.CommunityGalleryImageVersion{
		Name: to.Ptr("myGalleryImageVersionName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGalleryImageVersion"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Location: to.Ptr("myLocation"),
		Properties: &armcompute.CommunityGalleryImageVersionProperties{
			EndOfLifeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
			ExcludeFromLatest: to.Ptr(false),
			PublishedDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
			StorageProfile: &armcompute.SharedGalleryImageVersionStorageProfile{
				OSDiskImage: &armcompute.SharedGalleryOSDiskImage{
					DiskSizeGB:  to.Ptr[int32](29),
					HostCaching: to.Ptr(armcompute.SharedGalleryHostCachingNone),
				},
			},
		},
	}

	fakeServer.Get = func(ctx context.Context, location string, publicGalleryName string, galleryImageName string, galleryImageVersionName string, options *armcompute.CommunityGalleryImageVersionsClientGetOptions) (resp azfake.Responder[armcompute.CommunityGalleryImageVersionsClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublicGalleryName, publicGalleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		testsuite.Require().Equal(exampleGalleryImageVersionName, galleryImageVersionName)
		resp = azfake.Responder[armcompute.CommunityGalleryImageVersionsClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CommunityGalleryImageVersionsClientGetResponse{CommunityGalleryImageVersion: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleLocation, examplePublicGalleryName, exampleGalleryImageName, exampleGalleryImageVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImageVersion_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CommunityGalleryImageVersion))
}

func (testsuite *FakeTestSuite) TestCommunityGalleryImageVersions_List() {
	ctx := context.Background()
	fakeServer := fake.CommunityGalleryImageVersionsServer{}
	client, err := armcompute.NewCommunityGalleryImageVersionsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCommunityGalleryImageVersionsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImageVersion_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List community gallery image versions."},
	})
	var exampleLocation string
	var examplePublicGalleryName string
	var exampleGalleryImageName string
	exampleLocation = "myLocation"
	examplePublicGalleryName = "publicGalleryName"
	exampleGalleryImageName = "myGalleryImageName"

	exampleRes := armcompute.CommunityGalleryImageVersionList{
		Value: []*armcompute.CommunityGalleryImageVersion{
			{
				Name: to.Ptr("myGalleryImageVersionName"),
				Identifier: &armcompute.CommunityGalleryIdentifier{
					UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
				},
				Location: to.Ptr("myLocation"),
				Properties: &armcompute.CommunityGalleryImageVersionProperties{
					EndOfLifeDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28.000Z"); return t }()),
					ExcludeFromLatest: to.Ptr(false),
					PublishedDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28.000Z"); return t }()),
					StorageProfile: &armcompute.SharedGalleryImageVersionStorageProfile{
						OSDiskImage: &armcompute.SharedGalleryOSDiskImage{
							DiskSizeGB:  to.Ptr[int32](29),
							HostCaching: to.Ptr(armcompute.SharedGalleryHostCachingNone),
						},
					},
				},
			}},
	}

	fakeServer.NewListPager = func(location string, publicGalleryName string, galleryImageName string, options *armcompute.CommunityGalleryImageVersionsClientListOptions) (resp azfake.PagerResponder[armcompute.CommunityGalleryImageVersionsClientListResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(examplePublicGalleryName, publicGalleryName)
		testsuite.Require().Equal(exampleGalleryImageName, galleryImageName)
		resp = azfake.PagerResponder[armcompute.CommunityGalleryImageVersionsClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CommunityGalleryImageVersionsClientListResponse{CommunityGalleryImageVersionList: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleLocation, examplePublicGalleryName, exampleGalleryImageName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/GalleryRP/stable/2022-03-03/examples/communityGalleryExamples/CommunityGalleryImageVersion_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CommunityGalleryImageVersionList))
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Delete() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDelete = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstance{
		Name:     to.Ptr("{roleInstance-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.RoleInstanceProperties{
			NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
				NetworkInterfaces: []*armcompute.SubResource{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}/networkInterfaces/nic1"),
					}},
			},
		},
		SKU: &armcompute.InstanceSKU{
			Name: to.Ptr("Standard_D1_v2"),
			Tier: to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientGetResponse{RoleInstance: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServiceRoleInstancesClientGetOptions{Expand: nil})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RoleInstance))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get_InstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Instance View of Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstanceView{
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		PrivateID:            to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("RoleState/RoleStateStarted"),
				DisplayStatus: to.Ptr("RoleStateStarted"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse{RoleInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get_InstanceView.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.RoleInstanceView))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRolesInstance_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.RoleInstanceListResult{
		Value: []*armcompute.RoleInstance{
			{
				Name:     to.Ptr("ContosoFrontend_IN_0"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoFrontend_IN_1"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend_IN_0"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend_IN_1"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.RoleInstanceProperties{
					NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
						NetworkInterfaces: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1/networkInterfaces/nic1"),
							}},
					},
				},
				SKU: &armcompute.InstanceSKU{
					Name: to.Ptr("Standard_D1_v2"),
					Tier: to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceRoleInstancesClientListResponse{RoleInstanceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServiceRoleInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRolesInstance_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.RoleInstanceListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Restart() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRestart = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Reimage() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginReimage = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_Rebuild() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instance"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "{roleInstance-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRebuild = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRebuildOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientRebuildResponse{}, nil)
		return
	}
	poller, err := client.BeginRebuild(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoleInstances_GetRemoteDesktopFile() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRoleInstancesServer{}
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRoleInstancesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get_RemoteDesktopFile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	var exampleRoleInstanceName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleInstanceName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	exampleResourceGroupName = "rgcloudService"
	exampleCloudServiceName = "aaaa"

	fakeServer.GetRemoteDesktopFile = func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleInstanceName, roleInstanceName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileResponse{}, nil)
		return
	}
	_, err = client.GetRemoteDesktopFile(ctx, exampleRoleInstanceName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Get_RemoteDesktopFile.json")
}

func (testsuite *FakeTestSuite) TestCloudServiceRoles_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRolesServer{}
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRolesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRole_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	var exampleRoleName string
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleRoleName = "{role-name}"
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceRole{
		Name:     to.Ptr("{role-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/{role-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceRoleProperties{
			UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:{role-name}"),
		},
		SKU: &armcompute.CloudServiceRoleSKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}

	fakeServer.Get = func(ctx context.Context, roleName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRolesClientGetOptions) (resp azfake.Responder[armcompute.CloudServiceRolesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleRoleName, roleName)
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServiceRolesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceRolesClientGetResponse{CloudServiceRole: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleRoleName, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRole_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudServiceRole))
}

func (testsuite *FakeTestSuite) TestCloudServiceRoles_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceRolesServer{}
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceRolesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRole_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Roles in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceRoleListResult{
		Value: []*armcompute.CloudServiceRole{
			{
				Name:     to.Ptr("ContosoFrontend"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoFrontend"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceRoleProperties{
					UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoFrontend"),
				},
				SKU: &armcompute.CloudServiceRoleSKU{
					Name:     to.Ptr("Standard_D1_v2"),
					Capacity: to.Ptr[int64](2),
					Tier:     to.Ptr("Standard"),
				},
			},
			{
				Name:     to.Ptr("ContosoBackend"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoBackend"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceRoleProperties{
					UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoBackend"),
				},
				SKU: &armcompute.CloudServiceRoleSKU{
					Name:     to.Ptr("Standard_D1_v2"),
					Capacity: to.Ptr[int64](2),
					Tier:     to.Ptr("Standard"),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRolesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServiceRolesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServiceRolesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceRolesClientListResponse{CloudServiceRoleListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, exampleCloudServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRole_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceRoleListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_CreateOrUpdate() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleParameters armcompute.CloudService
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole_WithZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles in a specific availability zone"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
		Zones: []*string{
			to.Ptr("1")},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole_WithZones.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithMultiRole_WithZones.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/5393f919-a68a-43d0-9063-4b2bda6bffdf/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("14d10b45-ced7-42ef-a406-50a3df2cea7d"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRole.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and Certificate from Key Vault"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("60b6cd59-600b-4e02-b717-521b07aa94bf"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndCertificate.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndCertificate.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and RDP Extension"},
	})
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudService{
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProtectedSettings:       "<PrivateConfig><Password>{password}</Password></PrivateConfig>",
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							Settings:                "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
							TypeHandlerVersion:      to.Ptr("1.2"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			PackageURL: to.Ptr("{PackageUrl}"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}

	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
							TypeHandlerVersion: to.Ptr("1.2"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("c948cccb-bbfa-4516-a250-c28abc4d0c15"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
	}

	fakeServer.BeginCreateOrUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudService, options *armcompute.CloudServicesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientCreateOrUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientCreateOrUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err = client.BeginCreateOrUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndRDP.json")
	res, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Create_WithSingleRoleAndRDP.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_Update() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Update_ToIncludeTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update existing Cloud Service to add tags"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleParameters armcompute.CloudServiceUpdate
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleParameters = armcompute.CloudServiceUpdate{
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}

	fakeServer.BeginUpdate = func(ctx context.Context, resourceGroupName string, cloudServiceName string, parameters armcompute.CloudServiceUpdate, options *armcompute.CloudServicesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientUpdateResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().True(reflect.DeepEqual(exampleParameters, parameters))
		resp = azfake.PollerResponder[armcompute.CloudServicesClientUpdateResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientUpdateResponse{CloudService: exampleRes}, nil)
		return
	}
	poller, err := client.BeginUpdate(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Update_ToIncludeTags.json")
	res, err := poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Update_ToIncludeTags.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_Delete() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDelete = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientDeleteResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientDeleteResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientDeleteResponse{}, nil)
		return
	}
	poller, err := client.BeginDelete(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Delete.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Delete.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Get() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Get_WithMultiRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service with Multiple Roles and RDP Extension"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           "<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>",
							TypeHandlerVersion: to.Ptr("1.2"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		SystemData: &armcompute.SystemData{
			CreatedAt:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
		},
	}

	fakeServer.Get = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientGetOptions) (resp azfake.Responder[armcompute.CloudServicesClientGetResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServicesClientGetResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesClientGetResponse{CloudService: exampleRes}, nil)
		return
	}
	res, err := client.Get(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Get_WithMultiRoleAndRDP.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudService))
}

func (testsuite *FakeTestSuite) TestCloudServices_GetInstanceView() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Get_InstanceViewWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Instance View with Multiple Roles"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.CloudServiceInstanceView{
		PrivateIDs: []*string{
			to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e")},
		RoleInstance: &armcompute.InstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.StatusCodeCount{
				{
					Code:  to.Ptr("ProvisioningState/succeeded"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("PowerState/started"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("RoleState/RoleStateStarted"),
					Count: to.Ptr[int32](4),
				}},
		},
		SdkVersion: to.Ptr("2.9.6496.3"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T11:20:07.095Z"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/started"),
				DisplayStatus: to.Ptr("Started"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T11:20:07.095Z"); return t }()),
			},
			{
				Code:          to.Ptr("CurrentUpgradeDomain/-1"),
				DisplayStatus: to.Ptr("Current Upgrade Domain of cloud service is -1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			},
			{
				Code:          to.Ptr("MaxUpgradeDomain/1"),
				DisplayStatus: to.Ptr("Max Upgrade Domain of cloud service is 1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
	}

	fakeServer.GetInstanceView = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.CloudServicesClientGetInstanceViewResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.Responder[armcompute.CloudServicesClientGetInstanceViewResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesClientGetInstanceViewResponse{CloudServiceInstanceView: exampleRes}, nil)
		return
	}
	res, err := client.GetInstanceView(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Get_InstanceViewWithMultiRole.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.CloudServiceInstanceView))
}

func (testsuite *FakeTestSuite) TestCloudServices_ListAll() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_List_BySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Subscription"},
	})

	exampleRes := armcompute.CloudServiceListResult{
		Value: []*armcompute.CloudService{
			{
				Name:     to.Ptr("{cs-name}"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceProperties{
					Configuration: to.Ptr("{ServiceConfiguration}"),
					ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
						Extensions: []*armcompute.Extension{
							{
								Name: to.Ptr("RDPExtension"),
								Properties: &armcompute.CloudServiceExtensionProperties{
									Type:                    to.Ptr("RDP"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									ProvisioningState:       to.Ptr("Succeeded"),
									Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
									RolesAppliedTo: []*string{
										to.Ptr("*")},
									Settings:           "<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>",
									TypeHandlerVersion: to.Ptr("1.2"),
								},
							}},
					},
					NetworkProfile: &armcompute.CloudServiceNetworkProfile{
						LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
							{
								Name: to.Ptr("contosolb"),
								Properties: &armcompute.LoadBalancerConfigurationProperties{
									FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
										{
											Name: to.Ptr("contosofe"),
											Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
												PublicIPAddress: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
												},
											},
										}},
								},
							}},
					},
					OSProfile: &armcompute.CloudServiceOsProfile{
						Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					RoleProfile: &armcompute.CloudServiceRoleProfile{
						Roles: []*armcompute.CloudServiceRoleProfileProperties{
							{
								Name: to.Ptr("ContosoFrontend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							},
							{
								Name: to.Ptr("ContosoBackend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							}},
					},
					UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
					UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
				},
			}},
	}

	fakeServer.NewListAllPager = func(options *armcompute.CloudServicesClientListAllOptions) (resp azfake.PagerResponder[armcompute.CloudServicesClientListAllResponse]) {
		resp = azfake.PagerResponder[armcompute.CloudServicesClientListAllResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesClientListAllResponse{CloudServiceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_List_BySubscription.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_List() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_List_ByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Resource Group"},
	})
	var exampleResourceGroupName string
	exampleResourceGroupName = "ConstosoRG"

	exampleRes := armcompute.CloudServiceListResult{
		Value: []*armcompute.CloudService{
			{
				Name:     to.Ptr("{cs-name}"),
				Type:     to.Ptr("Microsoft.Compute/cloudServices"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
				Location: to.Ptr("eastus2euap"),
				Properties: &armcompute.CloudServiceProperties{
					Configuration: to.Ptr("{ServiceConfiguration}"),
					ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
						Extensions: []*armcompute.Extension{
							{
								Name: to.Ptr("RDPExtension"),
								Properties: &armcompute.CloudServiceExtensionProperties{
									Type:                    to.Ptr("RDP"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									ProvisioningState:       to.Ptr("Succeeded"),
									Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
									RolesAppliedTo: []*string{
										to.Ptr("*")},
									Settings:           "<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>",
									TypeHandlerVersion: to.Ptr("1.2"),
								},
							}},
					},
					NetworkProfile: &armcompute.CloudServiceNetworkProfile{
						LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
							{
								Name: to.Ptr("contosolb"),
								Properties: &armcompute.LoadBalancerConfigurationProperties{
									FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
										{
											Name: to.Ptr("contosofe"),
											Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
												PublicIPAddress: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
												},
											},
										}},
								},
							}},
					},
					OSProfile: &armcompute.CloudServiceOsProfile{
						Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
					},
					ProvisioningState: to.Ptr("Succeeded"),
					RoleProfile: &armcompute.CloudServiceRoleProfile{
						Roles: []*armcompute.CloudServiceRoleProfileProperties{
							{
								Name: to.Ptr("ContosoFrontend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							},
							{
								Name: to.Ptr("ContosoBackend"),
								SKU: &armcompute.CloudServiceRoleSKU{
									Name:     to.Ptr("Standard_D1_v2"),
									Capacity: to.Ptr[int64](2),
									Tier:     to.Ptr("Standard"),
								},
							}},
					},
					UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
					UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
				},
			}},
	}

	fakeServer.NewListPager = func(resourceGroupName string, options *armcompute.CloudServicesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServicesClientListResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		resp = azfake.PagerResponder[armcompute.CloudServicesClientListResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesClientListResponse{CloudServiceListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListPager(exampleResourceGroupName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_List_ByResourceGroup.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.CloudServiceListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServices_Start() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginStart = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientStartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientStartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientStartResponse{}, nil)
		return
	}
	poller, err := client.BeginStart(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Start.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_Start.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_PowerOff() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_PowerOff.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop or PowerOff Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginPowerOff = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientPowerOffResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientPowerOffResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientPowerOffResponse{}, nil)
		return
	}
	poller, err := client.BeginPowerOff(ctx, exampleResourceGroupName, exampleCloudServiceName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_PowerOff.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudService_PowerOff.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Restart() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart_ByCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRestart = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientRestartResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientRestartResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientRestartResponse{}, nil)
		return
	}
	poller, err := client.BeginRestart(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginRestartOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart_ByCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Restart_ByCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Reimage() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage_ByCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginReimage = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientReimageResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientReimageResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientReimageResponse{}, nil)
		return
	}
	poller, err := client.BeginReimage(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginReimageOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage_ByCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Reimage_ByCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_Rebuild() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild_ByCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginRebuild = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginRebuildOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientRebuildResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientRebuildResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientRebuildResponse{}, nil)
		return
	}
	poller, err := client.BeginRebuild(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginRebuildOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild_ByCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Rebuild_ByCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServices_DeleteInstances() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesServer{}
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete_ByCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instances in a Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	fakeServer.BeginDeleteInstances = func(ctx context.Context, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesClientBeginDeleteInstancesOptions) (resp azfake.PollerResponder[armcompute.CloudServicesClientDeleteInstancesResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PollerResponder[armcompute.CloudServicesClientDeleteInstancesResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesClientDeleteInstancesResponse{}, nil)
		return
	}
	poller, err := client.BeginDeleteInstances(ctx, exampleResourceGroupName, exampleCloudServiceName, &armcompute.CloudServicesClientBeginDeleteInstancesOptions{Parameters: &armcompute.RoleInstances{
		RoleInstances: []*string{
			to.Ptr("ContosoFrontend_IN_0"),
			to.Ptr("ContosoBackend_IN_1")},
	},
	})
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete_ByCloudService.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceRoleInstance_Delete_ByCloudService.json")
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_WalkUpdateDomain() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Cloud Service to specified Domain"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleUpdateDomain int32
	var exampleParameters armcompute.UpdateDomain
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleUpdateDomain = 1
	exampleParameters = armcompute.UpdateDomain{}

	fakeServer.BeginWalkUpdateDomain = func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, parameters armcompute.UpdateDomain, options *armcompute.CloudServicesUpdateDomainClientBeginWalkUpdateDomainOptions) (resp azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().Equal(exampleUpdateDomain, updateDomain)
		resp = azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse]{}
		resp.SetTerminalResponse(http.StatusOK, armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse{}, nil)
		return
	}
	poller, err := client.BeginWalkUpdateDomain(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleUpdateDomain, exampleParameters, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_Update.json")
	_, err = poller.PollUntilDone(ctx, nil)
	testsuite.Require().NoError(err, "Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_Update.json")
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_GetUpdateDomain() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Update Domain"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	var exampleUpdateDomain int32
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"
	exampleUpdateDomain = 1

	exampleRes := armcompute.UpdateDomain{
		Name: to.Ptr("1"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
	}

	fakeServer.GetUpdateDomain = func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, options *armcompute.CloudServicesUpdateDomainClientGetUpdateDomainOptions) (resp azfake.Responder[armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		testsuite.Require().Equal(exampleUpdateDomain, updateDomain)
		resp = azfake.Responder[armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse{UpdateDomain: exampleRes}, nil)
		return
	}
	res, err := client.GetUpdateDomain(ctx, exampleResourceGroupName, exampleCloudServiceName, exampleUpdateDomain, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.UpdateDomain))
}

func (testsuite *FakeTestSuite) TestCloudServicesUpdateDomain_ListUpdateDomains() {
	ctx := context.Background()
	fakeServer := fake.CloudServicesUpdateDomainServer{}
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServicesUpdateDomainServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Update Domains in Cloud Service"},
	})
	var exampleResourceGroupName string
	var exampleCloudServiceName string
	exampleResourceGroupName = "ConstosoRG"
	exampleCloudServiceName = "{cs-name}"

	exampleRes := armcompute.UpdateDomainListResult{
		Value: []*armcompute.UpdateDomain{
			{
				Name: to.Ptr("0"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/0"),
			},
			{
				Name: to.Ptr("1"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
			}},
	}

	fakeServer.NewListUpdateDomainsPager = func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesUpdateDomainClientListUpdateDomainsOptions) (resp azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse]) {
		testsuite.Require().Equal(exampleResourceGroupName, resourceGroupName)
		testsuite.Require().Equal(exampleCloudServiceName, cloudServiceName)
		resp = azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse{UpdateDomainListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListUpdateDomainsPager(exampleResourceGroupName, exampleCloudServiceName, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceUpdateDomain_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.UpdateDomainListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_GetOSVersion() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSVersion_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Version"},
	})
	var exampleLocation string
	var exampleOsVersionName string
	exampleLocation = "westus2"
	exampleOsVersionName = "WA-GUEST-OS-3.90_202010-02"

	exampleRes := armcompute.OSVersion{
		Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSVersionProperties{
			Family:      to.Ptr("3"),
			FamilyLabel: to.Ptr("Windows Server 2012"),
			IsActive:    to.Ptr(true),
			IsDefault:   to.Ptr(true),
			Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
			Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		},
	}

	fakeServer.GetOSVersion = func(ctx context.Context, location string, osVersionName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSVersionOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleOsVersionName, osVersionName)
		resp = azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse{OSVersion: exampleRes}, nil)
		return
	}
	res, err := client.GetOSVersion(ctx, exampleLocation, exampleOsVersionName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSVersion_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OSVersion))
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_ListOSVersions() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSVersion_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Versions in a subscription"},
	})
	var exampleLocation string
	exampleLocation = "westus2"

	exampleRes := armcompute.OSVersionListResult{
		Value: []*armcompute.OSVersion{
			{
				Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSVersionProperties{
					Family:      to.Ptr("3"),
					FamilyLabel: to.Ptr("Windows Server 2012"),
					IsActive:    to.Ptr(true),
					IsDefault:   to.Ptr(true),
					Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				},
			},
			{
				Name:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-4.83_202010-02"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSVersionProperties{
					Family:      to.Ptr("4"),
					FamilyLabel: to.Ptr("Windows Server 2012 R2"),
					IsActive:    to.Ptr(true),
					IsDefault:   to.Ptr(true),
					Label:       to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
					Version:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
				},
			}},
	}

	fakeServer.NewListOSVersionsPager = func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSVersionsOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse{OSVersionListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListOSVersionsPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSVersion_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OSVersionListResult))
	}
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_GetOSFamily() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSFamily_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Family"},
	})
	var exampleLocation string
	var exampleOsFamilyName string
	exampleLocation = "westus2"
	exampleOsFamilyName = "3"

	exampleRes := armcompute.OSFamily{
		Name:     to.Ptr("3"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSFamilyProperties{
			Name:  to.Ptr("3"),
			Label: to.Ptr("Windows Server 2012"),
			Versions: []*armcompute.OSVersionPropertiesBase{
				{
					IsActive:  to.Ptr(true),
					IsDefault: to.Ptr(true),
					Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				}},
		},
	}

	fakeServer.GetOSFamily = func(ctx context.Context, location string, osFamilyName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSFamilyOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse], errResp azfake.ErrorResponder) {
		testsuite.Require().Equal(exampleLocation, location)
		testsuite.Require().Equal(exampleOsFamilyName, osFamilyName)
		resp = azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse]{}
		resp.SetResponse(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse{OSFamily: exampleRes}, nil)
		return
	}
	res, err := client.GetOSFamily(ctx, exampleLocation, exampleOsFamilyName, nil)
	testsuite.Require().NoError(err, "Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSFamily_Get.json")
	testsuite.Require().True(reflect.DeepEqual(exampleRes, res.OSFamily))
}

func (testsuite *FakeTestSuite) TestCloudServiceOperatingSystems_ListOSFamilies() {
	ctx := context.Background()
	fakeServer := fake.CloudServiceOperatingSystemsServer{}
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", testsuite.cred, &arm.ClientOptions{
		ClientOptions: azcore.ClientOptions{
			Transport: fake.NewCloudServiceOperatingSystemsServerTransport(&fakeServer),
		},
	})
	testsuite.Require().NoError(err, "Failed to create client")

	// From example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSFamilies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Families in a subscription"},
	})
	var exampleLocation string
	exampleLocation = "westus2"

	exampleRes := armcompute.OSFamilyListResult{
		Value: []*armcompute.OSFamily{
			{
				Name:     to.Ptr("3"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSFamilyProperties{
					Name:  to.Ptr("3"),
					Label: to.Ptr("Windows Server 2012"),
					Versions: []*armcompute.OSVersionPropertiesBase{
						{
							IsActive:  to.Ptr(true),
							IsDefault: to.Ptr(true),
							Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
							Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
						}},
				},
			},
			{
				Name:     to.Ptr("4"),
				Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/4"),
				Location: to.Ptr("westus2"),
				Properties: &armcompute.OSFamilyProperties{
					Name:  to.Ptr("4"),
					Label: to.Ptr("Windows Server 2012 R2"),
					Versions: []*armcompute.OSVersionPropertiesBase{
						{
							IsActive:  to.Ptr(true),
							IsDefault: to.Ptr(true),
							Label:     to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
							Version:   to.Ptr("WA-GUEST-OS-4.83_202010-02"),
						}},
				},
			}},
	}

	fakeServer.NewListOSFamiliesPager = func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSFamiliesOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse]) {
		testsuite.Require().Equal(exampleLocation, location)
		resp = azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse]{}
		resp.AddPage(http.StatusOK, armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse{OSFamilyListResult: exampleRes}, nil)
		return
	}
	pager := client.NewListOSFamiliesPager(exampleLocation, nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		testsuite.Require().NoError(err, "Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/CloudserviceRP/stable/2022-09-04/examples/CloudServiceOSFamilies_List.json")
		testsuite.Require().True(reflect.DeepEqual(exampleRes, nextResult.OSFamilyListResult))
	}
}
