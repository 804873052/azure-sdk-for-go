//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomation

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// StatisticsClient contains the methods for the Statistics group.
// Don't use this type directly, use NewStatisticsClient() instead.
type StatisticsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewStatisticsClient creates a new instance of StatisticsClient with the specified values.
func NewStatisticsClient(con *armcore.Connection, subscriptionID string) *StatisticsClient {
	return &StatisticsClient{con: con, subscriptionID: subscriptionID}
}

// ListByAutomationAccount - Retrieve the statistics for the account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *StatisticsClient) ListByAutomationAccount(ctx context.Context, resourceGroupName string, automationAccountName string, options *StatisticsListByAutomationAccountOptions) (StatisticsListByAutomationAccountResponse, error) {
	req, err := client.listByAutomationAccountCreateRequest(ctx, resourceGroupName, automationAccountName, options)
	if err != nil {
		return StatisticsListByAutomationAccountResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return StatisticsListByAutomationAccountResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return StatisticsListByAutomationAccountResponse{}, client.listByAutomationAccountHandleError(resp)
	}
	return client.listByAutomationAccountHandleResponse(resp)
}

// listByAutomationAccountCreateRequest creates the ListByAutomationAccount request.
func (client *StatisticsClient) listByAutomationAccountCreateRequest(ctx context.Context, resourceGroupName string, automationAccountName string, options *StatisticsListByAutomationAccountOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/statistics"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if automationAccountName == "" {
		return nil, errors.New("parameter automationAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{automationAccountName}", url.PathEscape(automationAccountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2020-01-13-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByAutomationAccountHandleResponse handles the ListByAutomationAccount response.
func (client *StatisticsClient) listByAutomationAccountHandleResponse(resp *azcore.Response) (StatisticsListByAutomationAccountResponse, error) {
	result := StatisticsListByAutomationAccountResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.StatisticsListResult); err != nil {
		return StatisticsListByAutomationAccountResponse{}, err
	}
	return result, nil
}

// listByAutomationAccountHandleError handles the ListByAutomationAccount error response.
func (client *StatisticsClient) listByAutomationAccountHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
