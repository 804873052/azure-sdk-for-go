//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomation

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type ActivityListByModulePager interface {
	azcore.Pager
	// PageResponse returns the current ActivityListByModuleResponse.
	PageResponse() ActivityListByModuleResponse
}

type activityListByModulePager struct {
	client    *ActivityClient
	current   ActivityListByModuleResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ActivityListByModuleResponse) (*azcore.Request, error)
}

func (p *activityListByModulePager) Err() error {
	return p.err
}

func (p *activityListByModulePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ActivityListResult.NextLink == nil || len(*p.current.ActivityListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByModuleHandleError(resp)
		return false
	}
	result, err := p.client.listByModuleHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *activityListByModulePager) PageResponse() ActivityListByModuleResponse {
	return p.current
}

type AutomationAccountListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AutomationAccountListByResourceGroupResponse.
	PageResponse() AutomationAccountListByResourceGroupResponse
}

type automationAccountListByResourceGroupPager struct {
	client    *AutomationAccountClient
	current   AutomationAccountListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AutomationAccountListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *automationAccountListByResourceGroupPager) Err() error {
	return p.err
}

func (p *automationAccountListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutomationAccountListResult.NextLink == nil || len(*p.current.AutomationAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *automationAccountListByResourceGroupPager) PageResponse() AutomationAccountListByResourceGroupResponse {
	return p.current
}

type AutomationAccountListPager interface {
	azcore.Pager
	// PageResponse returns the current AutomationAccountListResponse.
	PageResponse() AutomationAccountListResponse
}

type automationAccountListPager struct {
	client    *AutomationAccountClient
	current   AutomationAccountListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AutomationAccountListResponse) (*azcore.Request, error)
}

func (p *automationAccountListPager) Err() error {
	return p.err
}

func (p *automationAccountListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutomationAccountListResult.NextLink == nil || len(*p.current.AutomationAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *automationAccountListPager) PageResponse() AutomationAccountListResponse {
	return p.current
}

type CertificateListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current CertificateListByAutomationAccountResponse.
	PageResponse() CertificateListByAutomationAccountResponse
}

type certificateListByAutomationAccountPager struct {
	client    *CertificateClient
	current   CertificateListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificateListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *certificateListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *certificateListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateListResult.NextLink == nil || len(*p.current.CertificateListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateListByAutomationAccountPager) PageResponse() CertificateListByAutomationAccountResponse {
	return p.current
}

type ConnectionListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current ConnectionListByAutomationAccountResponse.
	PageResponse() ConnectionListByAutomationAccountResponse
}

type connectionListByAutomationAccountPager struct {
	client    *ConnectionClient
	current   ConnectionListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ConnectionListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *connectionListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *connectionListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConnectionListResult.NextLink == nil || len(*p.current.ConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *connectionListByAutomationAccountPager) PageResponse() ConnectionListByAutomationAccountResponse {
	return p.current
}

type ConnectionTypeListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current ConnectionTypeListByAutomationAccountResponse.
	PageResponse() ConnectionTypeListByAutomationAccountResponse
}

type connectionTypeListByAutomationAccountPager struct {
	client    *ConnectionTypeClient
	current   ConnectionTypeListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ConnectionTypeListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *connectionTypeListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *connectionTypeListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConnectionTypeListResult.NextLink == nil || len(*p.current.ConnectionTypeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *connectionTypeListByAutomationAccountPager) PageResponse() ConnectionTypeListByAutomationAccountResponse {
	return p.current
}

type CredentialListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current CredentialListByAutomationAccountResponse.
	PageResponse() CredentialListByAutomationAccountResponse
}

type credentialListByAutomationAccountPager struct {
	client    *CredentialClient
	current   CredentialListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CredentialListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *credentialListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *credentialListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CredentialListResult.NextLink == nil || len(*p.current.CredentialListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *credentialListByAutomationAccountPager) PageResponse() CredentialListByAutomationAccountResponse {
	return p.current
}

type DscCompilationJobListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current DscCompilationJobListByAutomationAccountResponse.
	PageResponse() DscCompilationJobListByAutomationAccountResponse
}

type dscCompilationJobListByAutomationAccountPager struct {
	client    *DscCompilationJobClient
	current   DscCompilationJobListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DscCompilationJobListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *dscCompilationJobListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *dscCompilationJobListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DscCompilationJobListResult.NextLink == nil || len(*p.current.DscCompilationJobListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dscCompilationJobListByAutomationAccountPager) PageResponse() DscCompilationJobListByAutomationAccountResponse {
	return p.current
}

type DscConfigurationListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current DscConfigurationListByAutomationAccountResponse.
	PageResponse() DscConfigurationListByAutomationAccountResponse
}

type dscConfigurationListByAutomationAccountPager struct {
	client    *DscConfigurationClient
	current   DscConfigurationListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DscConfigurationListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *dscConfigurationListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *dscConfigurationListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DscConfigurationListResult.NextLink == nil || len(*p.current.DscConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dscConfigurationListByAutomationAccountPager) PageResponse() DscConfigurationListByAutomationAccountResponse {
	return p.current
}

type DscNodeConfigurationListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current DscNodeConfigurationListByAutomationAccountResponse.
	PageResponse() DscNodeConfigurationListByAutomationAccountResponse
}

type dscNodeConfigurationListByAutomationAccountPager struct {
	client    *DscNodeConfigurationClient
	current   DscNodeConfigurationListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DscNodeConfigurationListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *dscNodeConfigurationListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *dscNodeConfigurationListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DscNodeConfigurationListResult.NextLink == nil || len(*p.current.DscNodeConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dscNodeConfigurationListByAutomationAccountPager) PageResponse() DscNodeConfigurationListByAutomationAccountResponse {
	return p.current
}

type DscNodeListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current DscNodeListByAutomationAccountResponse.
	PageResponse() DscNodeListByAutomationAccountResponse
}

type dscNodeListByAutomationAccountPager struct {
	client    *DscNodeClient
	current   DscNodeListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DscNodeListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *dscNodeListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *dscNodeListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DscNodeListResult.NextLink == nil || len(*p.current.DscNodeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dscNodeListByAutomationAccountPager) PageResponse() DscNodeListByAutomationAccountResponse {
	return p.current
}

type HybridRunbookWorkerGroupListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current HybridRunbookWorkerGroupListByAutomationAccountResponse.
	PageResponse() HybridRunbookWorkerGroupListByAutomationAccountResponse
}

type hybridRunbookWorkerGroupListByAutomationAccountPager struct {
	client    *HybridRunbookWorkerGroupClient
	current   HybridRunbookWorkerGroupListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, HybridRunbookWorkerGroupListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *hybridRunbookWorkerGroupListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *hybridRunbookWorkerGroupListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HybridRunbookWorkerGroupsListResult.NextLink == nil || len(*p.current.HybridRunbookWorkerGroupsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *hybridRunbookWorkerGroupListByAutomationAccountPager) PageResponse() HybridRunbookWorkerGroupListByAutomationAccountResponse {
	return p.current
}

type JobListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current JobListByAutomationAccountResponse.
	PageResponse() JobListByAutomationAccountResponse
}

type jobListByAutomationAccountPager struct {
	client    *JobClient
	current   JobListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *jobListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *jobListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobListResultV2.NextLink == nil || len(*p.current.JobListResultV2.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobListByAutomationAccountPager) PageResponse() JobListByAutomationAccountResponse {
	return p.current
}

type JobScheduleListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current JobScheduleListByAutomationAccountResponse.
	PageResponse() JobScheduleListByAutomationAccountResponse
}

type jobScheduleListByAutomationAccountPager struct {
	client    *JobScheduleClient
	current   JobScheduleListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobScheduleListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *jobScheduleListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *jobScheduleListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobScheduleListResult.NextLink == nil || len(*p.current.JobScheduleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobScheduleListByAutomationAccountPager) PageResponse() JobScheduleListByAutomationAccountResponse {
	return p.current
}

type JobStreamListByJobPager interface {
	azcore.Pager
	// PageResponse returns the current JobStreamListByJobResponse.
	PageResponse() JobStreamListByJobResponse
}

type jobStreamListByJobPager struct {
	client    *JobStreamClient
	current   JobStreamListByJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobStreamListByJobResponse) (*azcore.Request, error)
}

func (p *jobStreamListByJobPager) Err() error {
	return p.err
}

func (p *jobStreamListByJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobStreamListResult.NextLink == nil || len(*p.current.JobStreamListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobHandleError(resp)
		return false
	}
	result, err := p.client.listByJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobStreamListByJobPager) PageResponse() JobStreamListByJobResponse {
	return p.current
}

type ModuleListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current ModuleListByAutomationAccountResponse.
	PageResponse() ModuleListByAutomationAccountResponse
}

type moduleListByAutomationAccountPager struct {
	client    *ModuleClient
	current   ModuleListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ModuleListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *moduleListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *moduleListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ModuleListResult.NextLink == nil || len(*p.current.ModuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *moduleListByAutomationAccountPager) PageResponse() ModuleListByAutomationAccountResponse {
	return p.current
}

type NodeReportsListByNodePager interface {
	azcore.Pager
	// PageResponse returns the current NodeReportsListByNodeResponse.
	PageResponse() NodeReportsListByNodeResponse
}

type nodeReportsListByNodePager struct {
	client    *NodeReportsClient
	current   NodeReportsListByNodeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NodeReportsListByNodeResponse) (*azcore.Request, error)
}

func (p *nodeReportsListByNodePager) Err() error {
	return p.err
}

func (p *nodeReportsListByNodePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DscNodeReportListResult.NextLink == nil || len(*p.current.DscNodeReportListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByNodeHandleError(resp)
		return false
	}
	result, err := p.client.listByNodeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *nodeReportsListByNodePager) PageResponse() NodeReportsListByNodeResponse {
	return p.current
}

type Python2PackageListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current Python2PackageListByAutomationAccountResponse.
	PageResponse() Python2PackageListByAutomationAccountResponse
}

type python2PackageListByAutomationAccountPager struct {
	client    *Python2PackageClient
	current   Python2PackageListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, Python2PackageListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *python2PackageListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *python2PackageListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ModuleListResult.NextLink == nil || len(*p.current.ModuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *python2PackageListByAutomationAccountPager) PageResponse() Python2PackageListByAutomationAccountResponse {
	return p.current
}

type RunbookListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current RunbookListByAutomationAccountResponse.
	PageResponse() RunbookListByAutomationAccountResponse
}

type runbookListByAutomationAccountPager struct {
	client    *RunbookClient
	current   RunbookListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RunbookListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *runbookListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *runbookListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RunbookListResult.NextLink == nil || len(*p.current.RunbookListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *runbookListByAutomationAccountPager) PageResponse() RunbookListByAutomationAccountResponse {
	return p.current
}

type ScheduleListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current ScheduleListByAutomationAccountResponse.
	PageResponse() ScheduleListByAutomationAccountResponse
}

type scheduleListByAutomationAccountPager struct {
	client    *ScheduleClient
	current   ScheduleListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ScheduleListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *scheduleListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *scheduleListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScheduleListResult.NextLink == nil || len(*p.current.ScheduleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *scheduleListByAutomationAccountPager) PageResponse() ScheduleListByAutomationAccountResponse {
	return p.current
}

type SourceControlListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current SourceControlListByAutomationAccountResponse.
	PageResponse() SourceControlListByAutomationAccountResponse
}

type sourceControlListByAutomationAccountPager struct {
	client    *SourceControlClient
	current   SourceControlListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SourceControlListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *sourceControlListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *sourceControlListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlListResult.NextLink == nil || len(*p.current.SourceControlListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sourceControlListByAutomationAccountPager) PageResponse() SourceControlListByAutomationAccountResponse {
	return p.current
}

type SourceControlSyncJobListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current SourceControlSyncJobListByAutomationAccountResponse.
	PageResponse() SourceControlSyncJobListByAutomationAccountResponse
}

type sourceControlSyncJobListByAutomationAccountPager struct {
	client    *SourceControlSyncJobClient
	current   SourceControlSyncJobListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SourceControlSyncJobListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *sourceControlSyncJobListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *sourceControlSyncJobListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlSyncJobListResult.NextLink == nil || len(*p.current.SourceControlSyncJobListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sourceControlSyncJobListByAutomationAccountPager) PageResponse() SourceControlSyncJobListByAutomationAccountResponse {
	return p.current
}

type SourceControlSyncJobStreamsListBySyncJobPager interface {
	azcore.Pager
	// PageResponse returns the current SourceControlSyncJobStreamsListBySyncJobResponse.
	PageResponse() SourceControlSyncJobStreamsListBySyncJobResponse
}

type sourceControlSyncJobStreamsListBySyncJobPager struct {
	client    *SourceControlSyncJobStreamsClient
	current   SourceControlSyncJobStreamsListBySyncJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SourceControlSyncJobStreamsListBySyncJobResponse) (*azcore.Request, error)
}

func (p *sourceControlSyncJobStreamsListBySyncJobPager) Err() error {
	return p.err
}

func (p *sourceControlSyncJobStreamsListBySyncJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlSyncJobStreamsListBySyncJob.NextLink == nil || len(*p.current.SourceControlSyncJobStreamsListBySyncJob.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySyncJobHandleError(resp)
		return false
	}
	result, err := p.client.listBySyncJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sourceControlSyncJobStreamsListBySyncJobPager) PageResponse() SourceControlSyncJobStreamsListBySyncJobResponse {
	return p.current
}

type TestJobStreamsListByTestJobPager interface {
	azcore.Pager
	// PageResponse returns the current TestJobStreamsListByTestJobResponse.
	PageResponse() TestJobStreamsListByTestJobResponse
}

type testJobStreamsListByTestJobPager struct {
	client    *TestJobStreamsClient
	current   TestJobStreamsListByTestJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TestJobStreamsListByTestJobResponse) (*azcore.Request, error)
}

func (p *testJobStreamsListByTestJobPager) Err() error {
	return p.err
}

func (p *testJobStreamsListByTestJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobStreamListResult.NextLink == nil || len(*p.current.JobStreamListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTestJobHandleError(resp)
		return false
	}
	result, err := p.client.listByTestJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *testJobStreamsListByTestJobPager) PageResponse() TestJobStreamsListByTestJobResponse {
	return p.current
}

type VariableListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current VariableListByAutomationAccountResponse.
	PageResponse() VariableListByAutomationAccountResponse
}

type variableListByAutomationAccountPager struct {
	client    *VariableClient
	current   VariableListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VariableListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *variableListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *variableListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VariableListResult.NextLink == nil || len(*p.current.VariableListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *variableListByAutomationAccountPager) PageResponse() VariableListByAutomationAccountResponse {
	return p.current
}

type WatcherListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current WatcherListByAutomationAccountResponse.
	PageResponse() WatcherListByAutomationAccountResponse
}

type watcherListByAutomationAccountPager struct {
	client    *WatcherClient
	current   WatcherListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WatcherListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *watcherListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *watcherListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WatcherListResult.NextLink == nil || len(*p.current.WatcherListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *watcherListByAutomationAccountPager) PageResponse() WatcherListByAutomationAccountResponse {
	return p.current
}

type WebhookListByAutomationAccountPager interface {
	azcore.Pager
	// PageResponse returns the current WebhookListByAutomationAccountResponse.
	PageResponse() WebhookListByAutomationAccountResponse
}

type webhookListByAutomationAccountPager struct {
	client    *WebhookClient
	current   WebhookListByAutomationAccountResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebhookListByAutomationAccountResponse) (*azcore.Request, error)
}

func (p *webhookListByAutomationAccountPager) Err() error {
	return p.err
}

func (p *webhookListByAutomationAccountPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebhookListResult.NextLink == nil || len(*p.current.WebhookListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAutomationAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByAutomationAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webhookListByAutomationAccountPager) PageResponse() WebhookListByAutomationAccountResponse {
	return p.current
}
