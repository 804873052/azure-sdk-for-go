//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// WorkflowVersionTriggersClient contains the methods for the WorkflowVersionTriggers group.
// Don't use this type directly, use NewWorkflowVersionTriggersClient() instead.
type WorkflowVersionTriggersClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewWorkflowVersionTriggersClient creates a new instance of WorkflowVersionTriggersClient with the specified values.
func NewWorkflowVersionTriggersClient(con *armcore.Connection, subscriptionID string) *WorkflowVersionTriggersClient {
	return &WorkflowVersionTriggersClient{con: con, subscriptionID: subscriptionID}
}

// ListCallbackURL - Get the callback url for a trigger of a workflow version.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WorkflowVersionTriggersClient) ListCallbackURL(ctx context.Context, resourceGroupName string, workflowName string, versionID string, triggerName string, options *WorkflowVersionTriggersListCallbackURLOptions) (WorkflowVersionTriggersListCallbackURLResponse, error) {
	req, err := client.listCallbackURLCreateRequest(ctx, resourceGroupName, workflowName, versionID, triggerName, options)
	if err != nil {
		return WorkflowVersionTriggersListCallbackURLResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return WorkflowVersionTriggersListCallbackURLResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return WorkflowVersionTriggersListCallbackURLResponse{}, client.listCallbackURLHandleError(resp)
	}
	return client.listCallbackURLHandleResponse(resp)
}

// listCallbackURLCreateRequest creates the ListCallbackURL request.
func (client *WorkflowVersionTriggersClient) listCallbackURLCreateRequest(ctx context.Context, resourceGroupName string, workflowName string, versionID string, triggerName string, options *WorkflowVersionTriggersListCallbackURLOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}/triggers/{triggerName}/listCallbackUrl"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workflowName == "" {
		return nil, errors.New("parameter workflowName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workflowName}", url.PathEscape(workflowName))
	if versionID == "" {
		return nil, errors.New("parameter versionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionId}", url.PathEscape(versionID))
	if triggerName == "" {
		return nil, errors.New("parameter triggerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{triggerName}", url.PathEscape(triggerName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-05-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	if options != nil && options.Parameters != nil {
		return req, req.MarshalAsJSON(*options.Parameters)
	}
	return req, nil
}

// listCallbackURLHandleResponse handles the ListCallbackURL response.
func (client *WorkflowVersionTriggersClient) listCallbackURLHandleResponse(resp *azcore.Response) (WorkflowVersionTriggersListCallbackURLResponse, error) {
	result := WorkflowVersionTriggersListCallbackURLResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.WorkflowTriggerCallbackURL); err != nil {
		return WorkflowVersionTriggersListCallbackURLResponse{}, err
	}
	return result, nil
}

// listCallbackURLHandleError handles the ListCallbackURL error response.
func (client *WorkflowVersionTriggersClient) listCallbackURLHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
