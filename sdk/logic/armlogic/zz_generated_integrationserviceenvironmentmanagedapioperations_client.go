//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// IntegrationServiceEnvironmentManagedAPIOperationsClient contains the methods for the IntegrationServiceEnvironmentManagedAPIOperations group.
// Don't use this type directly, use NewIntegrationServiceEnvironmentManagedAPIOperationsClient() instead.
type IntegrationServiceEnvironmentManagedAPIOperationsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewIntegrationServiceEnvironmentManagedAPIOperationsClient creates a new instance of IntegrationServiceEnvironmentManagedAPIOperationsClient with the specified values.
func NewIntegrationServiceEnvironmentManagedAPIOperationsClient(con *armcore.Connection, subscriptionID string) *IntegrationServiceEnvironmentManagedAPIOperationsClient {
	return &IntegrationServiceEnvironmentManagedAPIOperationsClient{con: con, subscriptionID: subscriptionID}
}

// List - Gets the managed Api operations.
// If the operation fails it returns the *ErrorResponse error type.
func (client *IntegrationServiceEnvironmentManagedAPIOperationsClient) List(resourceGroup string, integrationServiceEnvironmentName string, apiName string, options *IntegrationServiceEnvironmentManagedAPIOperationsListOptions) IntegrationServiceEnvironmentManagedAPIOperationsListPager {
	return &integrationServiceEnvironmentManagedAPIOperationsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, resourceGroup, integrationServiceEnvironmentName, apiName, options)
		},
		advancer: func(ctx context.Context, resp IntegrationServiceEnvironmentManagedAPIOperationsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.APIOperationListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *IntegrationServiceEnvironmentManagedAPIOperationsClient) listCreateRequest(ctx context.Context, resourceGroup string, integrationServiceEnvironmentName string, apiName string, options *IntegrationServiceEnvironmentManagedAPIOperationsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}/apiOperations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if integrationServiceEnvironmentName == "" {
		return nil, errors.New("parameter integrationServiceEnvironmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{integrationServiceEnvironmentName}", url.PathEscape(integrationServiceEnvironmentName))
	if apiName == "" {
		return nil, errors.New("parameter apiName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{apiName}", url.PathEscape(apiName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-05-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *IntegrationServiceEnvironmentManagedAPIOperationsClient) listHandleResponse(resp *azcore.Response) (IntegrationServiceEnvironmentManagedAPIOperationsListResponse, error) {
	result := IntegrationServiceEnvironmentManagedAPIOperationsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.APIOperationListResult); err != nil {
		return IntegrationServiceEnvironmentManagedAPIOperationsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *IntegrationServiceEnvironmentManagedAPIOperationsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
