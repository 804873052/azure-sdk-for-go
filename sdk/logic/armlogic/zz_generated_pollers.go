//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// IntegrationServiceEnvironmentManagedApisDeletePoller provides polling facilities until the operation reaches a terminal state.
type IntegrationServiceEnvironmentManagedApisDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final IntegrationServiceEnvironmentManagedApisDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentManagedApisDeleteResponse, error)
}

type integrationServiceEnvironmentManagedApisDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *integrationServiceEnvironmentManagedApisDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *integrationServiceEnvironmentManagedApisDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *integrationServiceEnvironmentManagedApisDeletePoller) FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentManagedApisDeleteResponse, error) {
	respType := IntegrationServiceEnvironmentManagedApisDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return IntegrationServiceEnvironmentManagedApisDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *integrationServiceEnvironmentManagedApisDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *integrationServiceEnvironmentManagedApisDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (IntegrationServiceEnvironmentManagedApisDeleteResponse, error) {
	respType := IntegrationServiceEnvironmentManagedApisDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return IntegrationServiceEnvironmentManagedApisDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// IntegrationServiceEnvironmentManagedApisPutPoller provides polling facilities until the operation reaches a terminal state.
type IntegrationServiceEnvironmentManagedApisPutPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final IntegrationServiceEnvironmentManagedApisPutResponse will be returned.
	FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentManagedApisPutResponse, error)
}

type integrationServiceEnvironmentManagedApisPutPoller struct {
	pt *armcore.LROPoller
}

func (p *integrationServiceEnvironmentManagedApisPutPoller) Done() bool {
	return p.pt.Done()
}

func (p *integrationServiceEnvironmentManagedApisPutPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *integrationServiceEnvironmentManagedApisPutPoller) FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentManagedApisPutResponse, error) {
	respType := IntegrationServiceEnvironmentManagedApisPutResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ManagedAPI)
	if err != nil {
		return IntegrationServiceEnvironmentManagedApisPutResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *integrationServiceEnvironmentManagedApisPutPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *integrationServiceEnvironmentManagedApisPutPoller) pollUntilDone(ctx context.Context, freq time.Duration) (IntegrationServiceEnvironmentManagedApisPutResponse, error) {
	respType := IntegrationServiceEnvironmentManagedApisPutResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ManagedAPI)
	if err != nil {
		return IntegrationServiceEnvironmentManagedApisPutResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// IntegrationServiceEnvironmentsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type IntegrationServiceEnvironmentsCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final IntegrationServiceEnvironmentsCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentsCreateOrUpdateResponse, error)
}

type integrationServiceEnvironmentsCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *integrationServiceEnvironmentsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *integrationServiceEnvironmentsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *integrationServiceEnvironmentsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentsCreateOrUpdateResponse, error) {
	respType := IntegrationServiceEnvironmentsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.IntegrationServiceEnvironment)
	if err != nil {
		return IntegrationServiceEnvironmentsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *integrationServiceEnvironmentsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *integrationServiceEnvironmentsCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (IntegrationServiceEnvironmentsCreateOrUpdateResponse, error) {
	respType := IntegrationServiceEnvironmentsCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.IntegrationServiceEnvironment)
	if err != nil {
		return IntegrationServiceEnvironmentsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// IntegrationServiceEnvironmentsUpdatePoller provides polling facilities until the operation reaches a terminal state.
type IntegrationServiceEnvironmentsUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final IntegrationServiceEnvironmentsUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentsUpdateResponse, error)
}

type integrationServiceEnvironmentsUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *integrationServiceEnvironmentsUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *integrationServiceEnvironmentsUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *integrationServiceEnvironmentsUpdatePoller) FinalResponse(ctx context.Context) (IntegrationServiceEnvironmentsUpdateResponse, error) {
	respType := IntegrationServiceEnvironmentsUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.IntegrationServiceEnvironment)
	if err != nil {
		return IntegrationServiceEnvironmentsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *integrationServiceEnvironmentsUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *integrationServiceEnvironmentsUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (IntegrationServiceEnvironmentsUpdateResponse, error) {
	respType := IntegrationServiceEnvironmentsUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.IntegrationServiceEnvironment)
	if err != nil {
		return IntegrationServiceEnvironmentsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WorkflowsMovePoller provides polling facilities until the operation reaches a terminal state.
type WorkflowsMovePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WorkflowsMoveResponse will be returned.
	FinalResponse(ctx context.Context) (WorkflowsMoveResponse, error)
}

type workflowsMovePoller struct {
	pt *armcore.LROPoller
}

func (p *workflowsMovePoller) Done() bool {
	return p.pt.Done()
}

func (p *workflowsMovePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *workflowsMovePoller) FinalResponse(ctx context.Context) (WorkflowsMoveResponse, error) {
	respType := WorkflowsMoveResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkflowsMoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *workflowsMovePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *workflowsMovePoller) pollUntilDone(ctx context.Context, freq time.Duration) (WorkflowsMoveResponse, error) {
	respType := WorkflowsMoveResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return WorkflowsMoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
