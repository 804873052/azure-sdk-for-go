//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type IntegrationAccountAgreementsListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountAgreementsListResponse.
	PageResponse() IntegrationAccountAgreementsListResponse
}

type integrationAccountAgreementsListPager struct {
	client    *IntegrationAccountAgreementsClient
	current   IntegrationAccountAgreementsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountAgreementsListResponse) (*azcore.Request, error)
}

func (p *integrationAccountAgreementsListPager) Err() error {
	return p.err
}

func (p *integrationAccountAgreementsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountAgreementListResult.NextLink == nil || len(*p.current.IntegrationAccountAgreementListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountAgreementsListPager) PageResponse() IntegrationAccountAgreementsListResponse {
	return p.current
}

type IntegrationAccountCertificatesListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountCertificatesListResponse.
	PageResponse() IntegrationAccountCertificatesListResponse
}

type integrationAccountCertificatesListPager struct {
	client    *IntegrationAccountCertificatesClient
	current   IntegrationAccountCertificatesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountCertificatesListResponse) (*azcore.Request, error)
}

func (p *integrationAccountCertificatesListPager) Err() error {
	return p.err
}

func (p *integrationAccountCertificatesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountCertificateListResult.NextLink == nil || len(*p.current.IntegrationAccountCertificateListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountCertificatesListPager) PageResponse() IntegrationAccountCertificatesListResponse {
	return p.current
}

type IntegrationAccountMapsListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountMapsListResponse.
	PageResponse() IntegrationAccountMapsListResponse
}

type integrationAccountMapsListPager struct {
	client    *IntegrationAccountMapsClient
	current   IntegrationAccountMapsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountMapsListResponse) (*azcore.Request, error)
}

func (p *integrationAccountMapsListPager) Err() error {
	return p.err
}

func (p *integrationAccountMapsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountMapListResult.NextLink == nil || len(*p.current.IntegrationAccountMapListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountMapsListPager) PageResponse() IntegrationAccountMapsListResponse {
	return p.current
}

type IntegrationAccountPartnersListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountPartnersListResponse.
	PageResponse() IntegrationAccountPartnersListResponse
}

type integrationAccountPartnersListPager struct {
	client    *IntegrationAccountPartnersClient
	current   IntegrationAccountPartnersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountPartnersListResponse) (*azcore.Request, error)
}

func (p *integrationAccountPartnersListPager) Err() error {
	return p.err
}

func (p *integrationAccountPartnersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountPartnerListResult.NextLink == nil || len(*p.current.IntegrationAccountPartnerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountPartnersListPager) PageResponse() IntegrationAccountPartnersListResponse {
	return p.current
}

type IntegrationAccountSchemasListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountSchemasListResponse.
	PageResponse() IntegrationAccountSchemasListResponse
}

type integrationAccountSchemasListPager struct {
	client    *IntegrationAccountSchemasClient
	current   IntegrationAccountSchemasListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountSchemasListResponse) (*azcore.Request, error)
}

func (p *integrationAccountSchemasListPager) Err() error {
	return p.err
}

func (p *integrationAccountSchemasListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountSchemaListResult.NextLink == nil || len(*p.current.IntegrationAccountSchemaListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountSchemasListPager) PageResponse() IntegrationAccountSchemasListResponse {
	return p.current
}

type IntegrationAccountSessionsListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountSessionsListResponse.
	PageResponse() IntegrationAccountSessionsListResponse
}

type integrationAccountSessionsListPager struct {
	client    *IntegrationAccountSessionsClient
	current   IntegrationAccountSessionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountSessionsListResponse) (*azcore.Request, error)
}

func (p *integrationAccountSessionsListPager) Err() error {
	return p.err
}

func (p *integrationAccountSessionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountSessionListResult.NextLink == nil || len(*p.current.IntegrationAccountSessionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountSessionsListPager) PageResponse() IntegrationAccountSessionsListResponse {
	return p.current
}

type IntegrationAccountsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountsListByResourceGroupResponse.
	PageResponse() IntegrationAccountsListByResourceGroupResponse
}

type integrationAccountsListByResourceGroupPager struct {
	client    *IntegrationAccountsClient
	current   IntegrationAccountsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *integrationAccountsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *integrationAccountsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountListResult.NextLink == nil || len(*p.current.IntegrationAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountsListByResourceGroupPager) PageResponse() IntegrationAccountsListByResourceGroupResponse {
	return p.current
}

type IntegrationAccountsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationAccountsListBySubscriptionResponse.
	PageResponse() IntegrationAccountsListBySubscriptionResponse
}

type integrationAccountsListBySubscriptionPager struct {
	client    *IntegrationAccountsClient
	current   IntegrationAccountsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationAccountsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *integrationAccountsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *integrationAccountsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationAccountListResult.NextLink == nil || len(*p.current.IntegrationAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationAccountsListBySubscriptionPager) PageResponse() IntegrationAccountsListBySubscriptionResponse {
	return p.current
}

type IntegrationServiceEnvironmentManagedAPIOperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationServiceEnvironmentManagedAPIOperationsListResponse.
	PageResponse() IntegrationServiceEnvironmentManagedAPIOperationsListResponse
}

type integrationServiceEnvironmentManagedAPIOperationsListPager struct {
	client    *IntegrationServiceEnvironmentManagedAPIOperationsClient
	current   IntegrationServiceEnvironmentManagedAPIOperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationServiceEnvironmentManagedAPIOperationsListResponse) (*azcore.Request, error)
}

func (p *integrationServiceEnvironmentManagedAPIOperationsListPager) Err() error {
	return p.err
}

func (p *integrationServiceEnvironmentManagedAPIOperationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIOperationListResult.NextLink == nil || len(*p.current.APIOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationServiceEnvironmentManagedAPIOperationsListPager) PageResponse() IntegrationServiceEnvironmentManagedAPIOperationsListResponse {
	return p.current
}

type IntegrationServiceEnvironmentManagedApisListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationServiceEnvironmentManagedApisListResponse.
	PageResponse() IntegrationServiceEnvironmentManagedApisListResponse
}

type integrationServiceEnvironmentManagedApisListPager struct {
	client    *IntegrationServiceEnvironmentManagedApisClient
	current   IntegrationServiceEnvironmentManagedApisListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationServiceEnvironmentManagedApisListResponse) (*azcore.Request, error)
}

func (p *integrationServiceEnvironmentManagedApisListPager) Err() error {
	return p.err
}

func (p *integrationServiceEnvironmentManagedApisListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedAPIListResult.NextLink == nil || len(*p.current.ManagedAPIListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationServiceEnvironmentManagedApisListPager) PageResponse() IntegrationServiceEnvironmentManagedApisListResponse {
	return p.current
}

type IntegrationServiceEnvironmentSKUsListPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationServiceEnvironmentSKUsListResponse.
	PageResponse() IntegrationServiceEnvironmentSKUsListResponse
}

type integrationServiceEnvironmentSKUsListPager struct {
	client    *IntegrationServiceEnvironmentSKUsClient
	current   IntegrationServiceEnvironmentSKUsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationServiceEnvironmentSKUsListResponse) (*azcore.Request, error)
}

func (p *integrationServiceEnvironmentSKUsListPager) Err() error {
	return p.err
}

func (p *integrationServiceEnvironmentSKUsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationServiceEnvironmentSKUList.NextLink == nil || len(*p.current.IntegrationServiceEnvironmentSKUList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationServiceEnvironmentSKUsListPager) PageResponse() IntegrationServiceEnvironmentSKUsListResponse {
	return p.current
}

type IntegrationServiceEnvironmentsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationServiceEnvironmentsListByResourceGroupResponse.
	PageResponse() IntegrationServiceEnvironmentsListByResourceGroupResponse
}

type integrationServiceEnvironmentsListByResourceGroupPager struct {
	client    *IntegrationServiceEnvironmentsClient
	current   IntegrationServiceEnvironmentsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationServiceEnvironmentsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *integrationServiceEnvironmentsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *integrationServiceEnvironmentsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationServiceEnvironmentListResult.NextLink == nil || len(*p.current.IntegrationServiceEnvironmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationServiceEnvironmentsListByResourceGroupPager) PageResponse() IntegrationServiceEnvironmentsListByResourceGroupResponse {
	return p.current
}

type IntegrationServiceEnvironmentsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current IntegrationServiceEnvironmentsListBySubscriptionResponse.
	PageResponse() IntegrationServiceEnvironmentsListBySubscriptionResponse
}

type integrationServiceEnvironmentsListBySubscriptionPager struct {
	client    *IntegrationServiceEnvironmentsClient
	current   IntegrationServiceEnvironmentsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IntegrationServiceEnvironmentsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *integrationServiceEnvironmentsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *integrationServiceEnvironmentsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationServiceEnvironmentListResult.NextLink == nil || len(*p.current.IntegrationServiceEnvironmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *integrationServiceEnvironmentsListBySubscriptionPager) PageResponse() IntegrationServiceEnvironmentsListBySubscriptionResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type WorkflowRunActionRepetitionsRequestHistoriesListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowRunActionRepetitionsRequestHistoriesListResponse.
	PageResponse() WorkflowRunActionRepetitionsRequestHistoriesListResponse
}

type workflowRunActionRepetitionsRequestHistoriesListPager struct {
	client    *WorkflowRunActionRepetitionsRequestHistoriesClient
	current   WorkflowRunActionRepetitionsRequestHistoriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowRunActionRepetitionsRequestHistoriesListResponse) (*azcore.Request, error)
}

func (p *workflowRunActionRepetitionsRequestHistoriesListPager) Err() error {
	return p.err
}

func (p *workflowRunActionRepetitionsRequestHistoriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RequestHistoryListResult.NextLink == nil || len(*p.current.RequestHistoryListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowRunActionRepetitionsRequestHistoriesListPager) PageResponse() WorkflowRunActionRepetitionsRequestHistoriesListResponse {
	return p.current
}

type WorkflowRunActionRequestHistoriesListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowRunActionRequestHistoriesListResponse.
	PageResponse() WorkflowRunActionRequestHistoriesListResponse
}

type workflowRunActionRequestHistoriesListPager struct {
	client    *WorkflowRunActionRequestHistoriesClient
	current   WorkflowRunActionRequestHistoriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowRunActionRequestHistoriesListResponse) (*azcore.Request, error)
}

func (p *workflowRunActionRequestHistoriesListPager) Err() error {
	return p.err
}

func (p *workflowRunActionRequestHistoriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RequestHistoryListResult.NextLink == nil || len(*p.current.RequestHistoryListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowRunActionRequestHistoriesListPager) PageResponse() WorkflowRunActionRequestHistoriesListResponse {
	return p.current
}

type WorkflowRunActionsListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowRunActionsListResponse.
	PageResponse() WorkflowRunActionsListResponse
}

type workflowRunActionsListPager struct {
	client    *WorkflowRunActionsClient
	current   WorkflowRunActionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowRunActionsListResponse) (*azcore.Request, error)
}

func (p *workflowRunActionsListPager) Err() error {
	return p.err
}

func (p *workflowRunActionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowRunActionListResult.NextLink == nil || len(*p.current.WorkflowRunActionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowRunActionsListPager) PageResponse() WorkflowRunActionsListResponse {
	return p.current
}

type WorkflowRunsListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowRunsListResponse.
	PageResponse() WorkflowRunsListResponse
}

type workflowRunsListPager struct {
	client    *WorkflowRunsClient
	current   WorkflowRunsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowRunsListResponse) (*azcore.Request, error)
}

func (p *workflowRunsListPager) Err() error {
	return p.err
}

func (p *workflowRunsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowRunListResult.NextLink == nil || len(*p.current.WorkflowRunListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowRunsListPager) PageResponse() WorkflowRunsListResponse {
	return p.current
}

type WorkflowTriggerHistoriesListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowTriggerHistoriesListResponse.
	PageResponse() WorkflowTriggerHistoriesListResponse
}

type workflowTriggerHistoriesListPager struct {
	client    *WorkflowTriggerHistoriesClient
	current   WorkflowTriggerHistoriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowTriggerHistoriesListResponse) (*azcore.Request, error)
}

func (p *workflowTriggerHistoriesListPager) Err() error {
	return p.err
}

func (p *workflowTriggerHistoriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowTriggerHistoryListResult.NextLink == nil || len(*p.current.WorkflowTriggerHistoryListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowTriggerHistoriesListPager) PageResponse() WorkflowTriggerHistoriesListResponse {
	return p.current
}

type WorkflowTriggersListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowTriggersListResponse.
	PageResponse() WorkflowTriggersListResponse
}

type workflowTriggersListPager struct {
	client    *WorkflowTriggersClient
	current   WorkflowTriggersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowTriggersListResponse) (*azcore.Request, error)
}

func (p *workflowTriggersListPager) Err() error {
	return p.err
}

func (p *workflowTriggersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowTriggerListResult.NextLink == nil || len(*p.current.WorkflowTriggerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowTriggersListPager) PageResponse() WorkflowTriggersListResponse {
	return p.current
}

type WorkflowVersionsListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowVersionsListResponse.
	PageResponse() WorkflowVersionsListResponse
}

type workflowVersionsListPager struct {
	client    *WorkflowVersionsClient
	current   WorkflowVersionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowVersionsListResponse) (*azcore.Request, error)
}

func (p *workflowVersionsListPager) Err() error {
	return p.err
}

func (p *workflowVersionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowVersionListResult.NextLink == nil || len(*p.current.WorkflowVersionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowVersionsListPager) PageResponse() WorkflowVersionsListResponse {
	return p.current
}

type WorkflowsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowsListByResourceGroupResponse.
	PageResponse() WorkflowsListByResourceGroupResponse
}

type workflowsListByResourceGroupPager struct {
	client    *WorkflowsClient
	current   WorkflowsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *workflowsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *workflowsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowListResult.NextLink == nil || len(*p.current.WorkflowListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowsListByResourceGroupPager) PageResponse() WorkflowsListByResourceGroupResponse {
	return p.current
}

type WorkflowsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current WorkflowsListBySubscriptionResponse.
	PageResponse() WorkflowsListBySubscriptionResponse
}

type workflowsListBySubscriptionPager struct {
	client    *WorkflowsClient
	current   WorkflowsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkflowsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *workflowsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *workflowsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkflowListResult.NextLink == nil || len(*p.current.WorkflowListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workflowsListBySubscriptionPager) PageResponse() WorkflowsListBySubscriptionResponse {
	return p.current
}
