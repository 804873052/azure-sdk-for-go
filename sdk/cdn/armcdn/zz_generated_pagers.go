//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type AFDCustomDomainsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current AFDCustomDomainsListByProfileResponse.
	PageResponse() AFDCustomDomainsListByProfileResponse
}

type afdCustomDomainsListByProfilePager struct {
	client    *AFDCustomDomainsClient
	current   AFDCustomDomainsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDCustomDomainsListByProfileResponse) (*azcore.Request, error)
}

func (p *afdCustomDomainsListByProfilePager) Err() error {
	return p.err
}

func (p *afdCustomDomainsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDDomainListResult.NextLink == nil || len(*p.current.AFDDomainListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdCustomDomainsListByProfilePager) PageResponse() AFDCustomDomainsListByProfileResponse {
	return p.current
}

type AFDEndpointsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current AFDEndpointsListByProfileResponse.
	PageResponse() AFDEndpointsListByProfileResponse
}

type afdEndpointsListByProfilePager struct {
	client    *AFDEndpointsClient
	current   AFDEndpointsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDEndpointsListByProfileResponse) (*azcore.Request, error)
}

func (p *afdEndpointsListByProfilePager) Err() error {
	return p.err
}

func (p *afdEndpointsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDEndpointListResult.NextLink == nil || len(*p.current.AFDEndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdEndpointsListByProfilePager) PageResponse() AFDEndpointsListByProfileResponse {
	return p.current
}

type AFDEndpointsListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current AFDEndpointsListResourceUsageResponse.
	PageResponse() AFDEndpointsListResourceUsageResponse
}

type afdEndpointsListResourceUsagePager struct {
	client    *AFDEndpointsClient
	current   AFDEndpointsListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDEndpointsListResourceUsageResponse) (*azcore.Request, error)
}

func (p *afdEndpointsListResourceUsagePager) Err() error {
	return p.err
}

func (p *afdEndpointsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdEndpointsListResourceUsagePager) PageResponse() AFDEndpointsListResourceUsageResponse {
	return p.current
}

type AFDOriginGroupsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current AFDOriginGroupsListByProfileResponse.
	PageResponse() AFDOriginGroupsListByProfileResponse
}

type afdOriginGroupsListByProfilePager struct {
	client    *AFDOriginGroupsClient
	current   AFDOriginGroupsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDOriginGroupsListByProfileResponse) (*azcore.Request, error)
}

func (p *afdOriginGroupsListByProfilePager) Err() error {
	return p.err
}

func (p *afdOriginGroupsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDOriginGroupListResult.NextLink == nil || len(*p.current.AFDOriginGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdOriginGroupsListByProfilePager) PageResponse() AFDOriginGroupsListByProfileResponse {
	return p.current
}

type AFDOriginGroupsListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current AFDOriginGroupsListResourceUsageResponse.
	PageResponse() AFDOriginGroupsListResourceUsageResponse
}

type afdOriginGroupsListResourceUsagePager struct {
	client    *AFDOriginGroupsClient
	current   AFDOriginGroupsListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDOriginGroupsListResourceUsageResponse) (*azcore.Request, error)
}

func (p *afdOriginGroupsListResourceUsagePager) Err() error {
	return p.err
}

func (p *afdOriginGroupsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdOriginGroupsListResourceUsagePager) PageResponse() AFDOriginGroupsListResourceUsageResponse {
	return p.current
}

type AFDOriginsListByOriginGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AFDOriginsListByOriginGroupResponse.
	PageResponse() AFDOriginsListByOriginGroupResponse
}

type afdOriginsListByOriginGroupPager struct {
	client    *AFDOriginsClient
	current   AFDOriginsListByOriginGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDOriginsListByOriginGroupResponse) (*azcore.Request, error)
}

func (p *afdOriginsListByOriginGroupPager) Err() error {
	return p.err
}

func (p *afdOriginsListByOriginGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDOriginListResult.NextLink == nil || len(*p.current.AFDOriginListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByOriginGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByOriginGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdOriginsListByOriginGroupPager) PageResponse() AFDOriginsListByOriginGroupResponse {
	return p.current
}

type AFDProfilesListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current AFDProfilesListResourceUsageResponse.
	PageResponse() AFDProfilesListResourceUsageResponse
}

type afdProfilesListResourceUsagePager struct {
	client    *AFDProfilesClient
	current   AFDProfilesListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AFDProfilesListResourceUsageResponse) (*azcore.Request, error)
}

func (p *afdProfilesListResourceUsagePager) Err() error {
	return p.err
}

func (p *afdProfilesListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *afdProfilesListResourceUsagePager) PageResponse() AFDProfilesListResourceUsageResponse {
	return p.current
}

type CustomDomainsListByEndpointPager interface {
	azcore.Pager
	// PageResponse returns the current CustomDomainsListByEndpointResponse.
	PageResponse() CustomDomainsListByEndpointResponse
}

type customDomainsListByEndpointPager struct {
	client    *CustomDomainsClient
	current   CustomDomainsListByEndpointResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CustomDomainsListByEndpointResponse) (*azcore.Request, error)
}

func (p *customDomainsListByEndpointPager) Err() error {
	return p.err
}

func (p *customDomainsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomDomainListResult.NextLink == nil || len(*p.current.CustomDomainListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *customDomainsListByEndpointPager) PageResponse() CustomDomainsListByEndpointResponse {
	return p.current
}

type EdgeNodesListPager interface {
	azcore.Pager
	// PageResponse returns the current EdgeNodesListResponse.
	PageResponse() EdgeNodesListResponse
}

type edgeNodesListPager struct {
	client    *EdgeNodesClient
	current   EdgeNodesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EdgeNodesListResponse) (*azcore.Request, error)
}

func (p *edgeNodesListPager) Err() error {
	return p.err
}

func (p *edgeNodesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EdgenodeResult.NextLink == nil || len(*p.current.EdgenodeResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *edgeNodesListPager) PageResponse() EdgeNodesListResponse {
	return p.current
}

type EndpointsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current EndpointsListByProfileResponse.
	PageResponse() EndpointsListByProfileResponse
}

type endpointsListByProfilePager struct {
	client    *EndpointsClient
	current   EndpointsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EndpointsListByProfileResponse) (*azcore.Request, error)
}

func (p *endpointsListByProfilePager) Err() error {
	return p.err
}

func (p *endpointsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EndpointListResult.NextLink == nil || len(*p.current.EndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *endpointsListByProfilePager) PageResponse() EndpointsListByProfileResponse {
	return p.current
}

type EndpointsListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current EndpointsListResourceUsageResponse.
	PageResponse() EndpointsListResourceUsageResponse
}

type endpointsListResourceUsagePager struct {
	client    *EndpointsClient
	current   EndpointsListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EndpointsListResourceUsageResponse) (*azcore.Request, error)
}

func (p *endpointsListResourceUsagePager) Err() error {
	return p.err
}

func (p *endpointsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *endpointsListResourceUsagePager) PageResponse() EndpointsListResourceUsageResponse {
	return p.current
}

type ManagedRuleSetsListPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedRuleSetsListResponse.
	PageResponse() ManagedRuleSetsListResponse
}

type managedRuleSetsListPager struct {
	client    *ManagedRuleSetsClient
	current   ManagedRuleSetsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedRuleSetsListResponse) (*azcore.Request, error)
}

func (p *managedRuleSetsListPager) Err() error {
	return p.err
}

func (p *managedRuleSetsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedRuleSetDefinitionList.NextLink == nil || len(*p.current.ManagedRuleSetDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedRuleSetsListPager) PageResponse() ManagedRuleSetsListResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsListResult.NextLink == nil || len(*p.current.OperationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type OriginGroupsListByEndpointPager interface {
	azcore.Pager
	// PageResponse returns the current OriginGroupsListByEndpointResponse.
	PageResponse() OriginGroupsListByEndpointResponse
}

type originGroupsListByEndpointPager struct {
	client    *OriginGroupsClient
	current   OriginGroupsListByEndpointResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OriginGroupsListByEndpointResponse) (*azcore.Request, error)
}

func (p *originGroupsListByEndpointPager) Err() error {
	return p.err
}

func (p *originGroupsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OriginGroupListResult.NextLink == nil || len(*p.current.OriginGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *originGroupsListByEndpointPager) PageResponse() OriginGroupsListByEndpointResponse {
	return p.current
}

type OriginsListByEndpointPager interface {
	azcore.Pager
	// PageResponse returns the current OriginsListByEndpointResponse.
	PageResponse() OriginsListByEndpointResponse
}

type originsListByEndpointPager struct {
	client    *OriginsClient
	current   OriginsListByEndpointResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OriginsListByEndpointResponse) (*azcore.Request, error)
}

func (p *originsListByEndpointPager) Err() error {
	return p.err
}

func (p *originsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OriginListResult.NextLink == nil || len(*p.current.OriginListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *originsListByEndpointPager) PageResponse() OriginsListByEndpointResponse {
	return p.current
}

type PoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current PoliciesListResponse.
	PageResponse() PoliciesListResponse
}

type policiesListPager struct {
	client    *PoliciesClient
	current   PoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PoliciesListResponse) (*azcore.Request, error)
}

func (p *policiesListPager) Err() error {
	return p.err
}

func (p *policiesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CdnWebApplicationFirewallPolicyList.NextLink == nil || len(*p.current.CdnWebApplicationFirewallPolicyList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *policiesListPager) PageResponse() PoliciesListResponse {
	return p.current
}

type ProfilesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ProfilesListByResourceGroupResponse.
	PageResponse() ProfilesListByResourceGroupResponse
}

type profilesListByResourceGroupPager struct {
	client    *ProfilesClient
	current   ProfilesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProfilesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *profilesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *profilesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileListResult.NextLink == nil || len(*p.current.ProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *profilesListByResourceGroupPager) PageResponse() ProfilesListByResourceGroupResponse {
	return p.current
}

type ProfilesListPager interface {
	azcore.Pager
	// PageResponse returns the current ProfilesListResponse.
	PageResponse() ProfilesListResponse
}

type profilesListPager struct {
	client    *ProfilesClient
	current   ProfilesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProfilesListResponse) (*azcore.Request, error)
}

func (p *profilesListPager) Err() error {
	return p.err
}

func (p *profilesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileListResult.NextLink == nil || len(*p.current.ProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *profilesListPager) PageResponse() ProfilesListResponse {
	return p.current
}

type ProfilesListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current ProfilesListResourceUsageResponse.
	PageResponse() ProfilesListResourceUsageResponse
}

type profilesListResourceUsagePager struct {
	client    *ProfilesClient
	current   ProfilesListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProfilesListResourceUsageResponse) (*azcore.Request, error)
}

func (p *profilesListResourceUsagePager) Err() error {
	return p.err
}

func (p *profilesListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *profilesListResourceUsagePager) PageResponse() ProfilesListResourceUsageResponse {
	return p.current
}

type ResourceUsageListPager interface {
	azcore.Pager
	// PageResponse returns the current ResourceUsageListResponse.
	PageResponse() ResourceUsageListResponse
}

type resourceUsageListPager struct {
	client    *ResourceUsageClient
	current   ResourceUsageListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceUsageListResponse) (*azcore.Request, error)
}

func (p *resourceUsageListPager) Err() error {
	return p.err
}

func (p *resourceUsageListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceUsageListPager) PageResponse() ResourceUsageListResponse {
	return p.current
}

type RoutesListByEndpointPager interface {
	azcore.Pager
	// PageResponse returns the current RoutesListByEndpointResponse.
	PageResponse() RoutesListByEndpointResponse
}

type routesListByEndpointPager struct {
	client    *RoutesClient
	current   RoutesListByEndpointResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RoutesListByEndpointResponse) (*azcore.Request, error)
}

func (p *routesListByEndpointPager) Err() error {
	return p.err
}

func (p *routesListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteListResult.NextLink == nil || len(*p.current.RouteListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *routesListByEndpointPager) PageResponse() RoutesListByEndpointResponse {
	return p.current
}

type RuleSetsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current RuleSetsListByProfileResponse.
	PageResponse() RuleSetsListByProfileResponse
}

type ruleSetsListByProfilePager struct {
	client    *RuleSetsClient
	current   RuleSetsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RuleSetsListByProfileResponse) (*azcore.Request, error)
}

func (p *ruleSetsListByProfilePager) Err() error {
	return p.err
}

func (p *ruleSetsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RuleSetListResult.NextLink == nil || len(*p.current.RuleSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ruleSetsListByProfilePager) PageResponse() RuleSetsListByProfileResponse {
	return p.current
}

type RuleSetsListResourceUsagePager interface {
	azcore.Pager
	// PageResponse returns the current RuleSetsListResourceUsageResponse.
	PageResponse() RuleSetsListResourceUsageResponse
}

type ruleSetsListResourceUsagePager struct {
	client    *RuleSetsClient
	current   RuleSetsListResourceUsageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RuleSetsListResourceUsageResponse) (*azcore.Request, error)
}

func (p *ruleSetsListResourceUsagePager) Err() error {
	return p.err
}

func (p *ruleSetsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ruleSetsListResourceUsagePager) PageResponse() RuleSetsListResourceUsageResponse {
	return p.current
}

type RulesListByRuleSetPager interface {
	azcore.Pager
	// PageResponse returns the current RulesListByRuleSetResponse.
	PageResponse() RulesListByRuleSetResponse
}

type rulesListByRuleSetPager struct {
	client    *RulesClient
	current   RulesListByRuleSetResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RulesListByRuleSetResponse) (*azcore.Request, error)
}

func (p *rulesListByRuleSetPager) Err() error {
	return p.err
}

func (p *rulesListByRuleSetPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RuleListResult.NextLink == nil || len(*p.current.RuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByRuleSetHandleError(resp)
		return false
	}
	result, err := p.client.listByRuleSetHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *rulesListByRuleSetPager) PageResponse() RulesListByRuleSetResponse {
	return p.current
}

type SecretsListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current SecretsListByProfileResponse.
	PageResponse() SecretsListByProfileResponse
}

type secretsListByProfilePager struct {
	client    *SecretsClient
	current   SecretsListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecretsListByProfileResponse) (*azcore.Request, error)
}

func (p *secretsListByProfilePager) Err() error {
	return p.err
}

func (p *secretsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecretListResult.NextLink == nil || len(*p.current.SecretListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secretsListByProfilePager) PageResponse() SecretsListByProfileResponse {
	return p.current
}

type SecurityPoliciesListByProfilePager interface {
	azcore.Pager
	// PageResponse returns the current SecurityPoliciesListByProfileResponse.
	PageResponse() SecurityPoliciesListByProfileResponse
}

type securityPoliciesListByProfilePager struct {
	client    *SecurityPoliciesClient
	current   SecurityPoliciesListByProfileResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecurityPoliciesListByProfileResponse) (*azcore.Request, error)
}

func (p *securityPoliciesListByProfilePager) Err() error {
	return p.err
}

func (p *securityPoliciesListByProfilePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityPolicyListResult.NextLink == nil || len(*p.current.SecurityPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securityPoliciesListByProfilePager) PageResponse() SecurityPoliciesListByProfileResponse {
	return p.current
}
