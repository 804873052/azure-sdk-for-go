//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// RuntimeVersionsClient contains the methods for the RuntimeVersions group.
// Don't use this type directly, use NewRuntimeVersionsClient() instead.
type RuntimeVersionsClient struct {
	con *armcore.Connection
}

// NewRuntimeVersionsClient creates a new instance of RuntimeVersionsClient with the specified values.
func NewRuntimeVersionsClient(con *armcore.Connection) *RuntimeVersionsClient {
	return &RuntimeVersionsClient{con: con}
}

// ListRuntimeVersions - Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
// If the operation fails it returns the *CloudError error type.
func (client *RuntimeVersionsClient) ListRuntimeVersions(ctx context.Context, options *RuntimeVersionsListRuntimeVersionsOptions) (RuntimeVersionsListRuntimeVersionsResponse, error) {
	req, err := client.listRuntimeVersionsCreateRequest(ctx, options)
	if err != nil {
		return RuntimeVersionsListRuntimeVersionsResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RuntimeVersionsListRuntimeVersionsResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return RuntimeVersionsListRuntimeVersionsResponse{}, client.listRuntimeVersionsHandleError(resp)
	}
	return client.listRuntimeVersionsHandleResponse(resp)
}

// listRuntimeVersionsCreateRequest creates the ListRuntimeVersions request.
func (client *RuntimeVersionsClient) listRuntimeVersionsCreateRequest(ctx context.Context, options *RuntimeVersionsListRuntimeVersionsOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.AppPlatform/runtimeVersions"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-06-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listRuntimeVersionsHandleResponse handles the ListRuntimeVersions response.
func (client *RuntimeVersionsClient) listRuntimeVersionsHandleResponse(resp *azcore.Response) (RuntimeVersionsListRuntimeVersionsResponse, error) {
	result := RuntimeVersionsListRuntimeVersionsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AvailableRuntimeVersions); err != nil {
		return RuntimeVersionsListRuntimeVersionsResponse{}, err
	}
	return result, nil
}

// listRuntimeVersionsHandleError handles the ListRuntimeVersions error response.
func (client *RuntimeVersionsClient) listRuntimeVersionsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
