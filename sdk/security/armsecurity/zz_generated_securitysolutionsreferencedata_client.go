// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SecuritySolutionsReferenceDataClient contains the methods for the SecuritySolutionsReferenceData group.
// Don't use this type directly, use NewSecuritySolutionsReferenceDataClient() instead.
type SecuritySolutionsReferenceDataClient struct {
	con            *armcore.Connection
	subscriptionID string
	ascLocation    string
}

// NewSecuritySolutionsReferenceDataClient creates a new instance of SecuritySolutionsReferenceDataClient with the specified values.
func NewSecuritySolutionsReferenceDataClient(con *armcore.Connection, subscriptionID string, ascLocation string) *SecuritySolutionsReferenceDataClient {
	return &SecuritySolutionsReferenceDataClient{con: con, subscriptionID: subscriptionID, ascLocation: ascLocation}
}

// List - Gets a list of all supported Security Solutions for the subscription.
// If the operation fails it returns the *CloudError error type.
func (client *SecuritySolutionsReferenceDataClient) List(ctx context.Context, options *SecuritySolutionsReferenceDataListOptions) (SecuritySolutionsReferenceDataListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return SecuritySolutionsReferenceDataListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SecuritySolutionsReferenceDataListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SecuritySolutionsReferenceDataListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *SecuritySolutionsReferenceDataClient) listCreateRequest(ctx context.Context, options *SecuritySolutionsReferenceDataListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SecuritySolutionsReferenceDataClient) listHandleResponse(resp *azcore.Response) (SecuritySolutionsReferenceDataListResponse, error) {
	result := SecuritySolutionsReferenceDataListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecuritySolutionsReferenceDataList); err != nil {
		return SecuritySolutionsReferenceDataListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SecuritySolutionsReferenceDataClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListByHomeRegion - Gets list of all supported Security Solutions for subscription and location.
// If the operation fails it returns the *CloudError error type.
func (client *SecuritySolutionsReferenceDataClient) ListByHomeRegion(ctx context.Context, options *SecuritySolutionsReferenceDataListByHomeRegionOptions) (SecuritySolutionsReferenceDataListByHomeRegionResponse, error) {
	req, err := client.listByHomeRegionCreateRequest(ctx, options)
	if err != nil {
		return SecuritySolutionsReferenceDataListByHomeRegionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SecuritySolutionsReferenceDataListByHomeRegionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SecuritySolutionsReferenceDataListByHomeRegionResponse{}, client.listByHomeRegionHandleError(resp)
	}
	return client.listByHomeRegionHandleResponse(resp)
}

// listByHomeRegionCreateRequest creates the ListByHomeRegion request.
func (client *SecuritySolutionsReferenceDataClient) listByHomeRegionCreateRequest(ctx context.Context, options *SecuritySolutionsReferenceDataListByHomeRegionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/securitySolutionsReferenceData"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByHomeRegionHandleResponse handles the ListByHomeRegion response.
func (client *SecuritySolutionsReferenceDataClient) listByHomeRegionHandleResponse(resp *azcore.Response) (SecuritySolutionsReferenceDataListByHomeRegionResponse, error) {
	result := SecuritySolutionsReferenceDataListByHomeRegionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecuritySolutionsReferenceDataList); err != nil {
		return SecuritySolutionsReferenceDataListByHomeRegionResponse{}, err
	}
	return result, nil
}

// listByHomeRegionHandleError handles the ListByHomeRegion error response.
func (client *SecuritySolutionsReferenceDataClient) listByHomeRegionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
