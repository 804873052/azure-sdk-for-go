// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// AdaptiveNetworkHardeningsEnforcePoller provides polling facilities until the operation reaches a terminal state.
type AdaptiveNetworkHardeningsEnforcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AdaptiveNetworkHardeningsEnforceResponse will be returned.
	FinalResponse(ctx context.Context) (AdaptiveNetworkHardeningsEnforceResponse, error)
}

type adaptiveNetworkHardeningsEnforcePoller struct {
	pt *armcore.LROPoller
}

func (p *adaptiveNetworkHardeningsEnforcePoller) Done() bool {
	return p.pt.Done()
}

func (p *adaptiveNetworkHardeningsEnforcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *adaptiveNetworkHardeningsEnforcePoller) FinalResponse(ctx context.Context) (AdaptiveNetworkHardeningsEnforceResponse, error) {
	respType := AdaptiveNetworkHardeningsEnforceResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AdaptiveNetworkHardeningsEnforceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *adaptiveNetworkHardeningsEnforcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *adaptiveNetworkHardeningsEnforcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (AdaptiveNetworkHardeningsEnforceResponse, error) {
	respType := AdaptiveNetworkHardeningsEnforceResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return AdaptiveNetworkHardeningsEnforceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// AlertsSimulatePoller provides polling facilities until the operation reaches a terminal state.
type AlertsSimulatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AlertsSimulateResponse will be returned.
	FinalResponse(ctx context.Context) (AlertsSimulateResponse, error)
}

type alertsSimulatePoller struct {
	pt *armcore.LROPoller
}

func (p *alertsSimulatePoller) Done() bool {
	return p.pt.Done()
}

func (p *alertsSimulatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *alertsSimulatePoller) FinalResponse(ctx context.Context) (AlertsSimulateResponse, error) {
	respType := AlertsSimulateResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AlertsSimulateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *alertsSimulatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *alertsSimulatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (AlertsSimulateResponse, error) {
	respType := AlertsSimulateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return AlertsSimulateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerVulnerabilityAssessmentDeletePoller provides polling facilities until the operation reaches a terminal state.
type ServerVulnerabilityAssessmentDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerVulnerabilityAssessmentDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ServerVulnerabilityAssessmentDeleteResponse, error)
}

type serverVulnerabilityAssessmentDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *serverVulnerabilityAssessmentDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverVulnerabilityAssessmentDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverVulnerabilityAssessmentDeletePoller) FinalResponse(ctx context.Context) (ServerVulnerabilityAssessmentDeleteResponse, error) {
	respType := ServerVulnerabilityAssessmentDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServerVulnerabilityAssessmentDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverVulnerabilityAssessmentDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverVulnerabilityAssessmentDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerVulnerabilityAssessmentDeleteResponse, error) {
	respType := ServerVulnerabilityAssessmentDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServerVulnerabilityAssessmentDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
