// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SecureScoreControlDefinitionsClient contains the methods for the SecureScoreControlDefinitions group.
// Don't use this type directly, use NewSecureScoreControlDefinitionsClient() instead.
type SecureScoreControlDefinitionsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewSecureScoreControlDefinitionsClient creates a new instance of SecureScoreControlDefinitionsClient with the specified values.
func NewSecureScoreControlDefinitionsClient(con *armcore.Connection, subscriptionID string) *SecureScoreControlDefinitionsClient {
	return &SecureScoreControlDefinitionsClient{con: con, subscriptionID: subscriptionID}
}

// List - List the available security controls, their assessments, and the max score
// If the operation fails it returns the *CloudError error type.
func (client *SecureScoreControlDefinitionsClient) List(options *SecureScoreControlDefinitionsListOptions) SecureScoreControlDefinitionsListPager {
	return &secureScoreControlDefinitionsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SecureScoreControlDefinitionsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecureScoreControlDefinitionList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SecureScoreControlDefinitionsClient) listCreateRequest(ctx context.Context, options *SecureScoreControlDefinitionsListOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Security/secureScoreControlDefinitions"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SecureScoreControlDefinitionsClient) listHandleResponse(resp *azcore.Response) (SecureScoreControlDefinitionsListResponse, error) {
	result := SecureScoreControlDefinitionsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecureScoreControlDefinitionList); err != nil {
		return SecureScoreControlDefinitionsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SecureScoreControlDefinitionsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListBySubscription - For a specified subscription, list the available security controls, their assessments, and the max score
// If the operation fails it returns the *CloudError error type.
func (client *SecureScoreControlDefinitionsClient) ListBySubscription(options *SecureScoreControlDefinitionsListBySubscriptionOptions) SecureScoreControlDefinitionsListBySubscriptionPager {
	return &secureScoreControlDefinitionsListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SecureScoreControlDefinitionsListBySubscriptionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecureScoreControlDefinitionList.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *SecureScoreControlDefinitionsClient) listBySubscriptionCreateRequest(ctx context.Context, options *SecureScoreControlDefinitionsListBySubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *SecureScoreControlDefinitionsClient) listBySubscriptionHandleResponse(resp *azcore.Response) (SecureScoreControlDefinitionsListBySubscriptionResponse, error) {
	result := SecureScoreControlDefinitionsListBySubscriptionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecureScoreControlDefinitionList); err != nil {
		return SecureScoreControlDefinitionsListBySubscriptionResponse{}, err
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *SecureScoreControlDefinitionsClient) listBySubscriptionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
