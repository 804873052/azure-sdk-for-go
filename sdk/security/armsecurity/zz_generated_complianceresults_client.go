// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// ComplianceResultsClient contains the methods for the ComplianceResults group.
// Don't use this type directly, use NewComplianceResultsClient() instead.
type ComplianceResultsClient struct {
	con *armcore.Connection
}

// NewComplianceResultsClient creates a new instance of ComplianceResultsClient with the specified values.
func NewComplianceResultsClient(con *armcore.Connection) *ComplianceResultsClient {
	return &ComplianceResultsClient{con: con}
}

// Get - Security Compliance Result
// If the operation fails it returns the *CloudError error type.
func (client *ComplianceResultsClient) Get(ctx context.Context, resourceID string, complianceResultName string, options *ComplianceResultsGetOptions) (ComplianceResultsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceID, complianceResultName, options)
	if err != nil {
		return ComplianceResultsGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ComplianceResultsGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ComplianceResultsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ComplianceResultsClient) getCreateRequest(ctx context.Context, resourceID string, complianceResultName string, options *ComplianceResultsGetOptions) (*azcore.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/complianceResults/{complianceResultName}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	if complianceResultName == "" {
		return nil, errors.New("parameter complianceResultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{complianceResultName}", url.PathEscape(complianceResultName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2017-08-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ComplianceResultsClient) getHandleResponse(resp *azcore.Response) (ComplianceResultsGetResponse, error) {
	result := ComplianceResultsGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ComplianceResult); err != nil {
		return ComplianceResultsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ComplianceResultsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Security compliance results in the subscription
// If the operation fails it returns the *CloudError error type.
func (client *ComplianceResultsClient) List(scope string, options *ComplianceResultsListOptions) ComplianceResultsListPager {
	return &complianceResultsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp ComplianceResultsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ComplianceResultList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *ComplianceResultsClient) listCreateRequest(ctx context.Context, scope string, options *ComplianceResultsListOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/complianceResults"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2017-08-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ComplianceResultsClient) listHandleResponse(resp *azcore.Response) (ComplianceResultsListResponse, error) {
	result := ComplianceResultsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ComplianceResultList); err != nil {
		return ComplianceResultsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *ComplianceResultsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
