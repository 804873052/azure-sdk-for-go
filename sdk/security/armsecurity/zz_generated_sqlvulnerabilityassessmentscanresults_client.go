// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SQLVulnerabilityAssessmentScanResultsClient contains the methods for the SQLVulnerabilityAssessmentScanResults group.
// Don't use this type directly, use NewSQLVulnerabilityAssessmentScanResultsClient() instead.
type SQLVulnerabilityAssessmentScanResultsClient struct {
	con *armcore.Connection
}

// NewSQLVulnerabilityAssessmentScanResultsClient creates a new instance of SQLVulnerabilityAssessmentScanResultsClient with the specified values.
func NewSQLVulnerabilityAssessmentScanResultsClient(con *armcore.Connection) *SQLVulnerabilityAssessmentScanResultsClient {
	return &SQLVulnerabilityAssessmentScanResultsClient{con: con}
}

// Get - Gets the scan results of a single rule in a scan record.
// If the operation fails it returns the *CloudError error type.
func (client *SQLVulnerabilityAssessmentScanResultsClient) Get(ctx context.Context, scanID string, scanResultID string, workspaceID string, resourceID string, options *SQLVulnerabilityAssessmentScanResultsGetOptions) (SQLVulnerabilityAssessmentScanResultsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scanID, scanResultID, workspaceID, resourceID, options)
	if err != nil {
		return SQLVulnerabilityAssessmentScanResultsGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SQLVulnerabilityAssessmentScanResultsGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SQLVulnerabilityAssessmentScanResultsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SQLVulnerabilityAssessmentScanResultsClient) getCreateRequest(ctx context.Context, scanID string, scanResultID string, workspaceID string, resourceID string, options *SQLVulnerabilityAssessmentScanResultsGetOptions) (*azcore.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults/{scanResultId}"
	if scanID == "" {
		return nil, errors.New("parameter scanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scanId}", url.PathEscape(scanID))
	if scanResultID == "" {
		return nil, errors.New("parameter scanResultID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scanResultId}", url.PathEscape(scanResultID))
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("workspaceId", workspaceID)
	reqQP.Set("api-version", "2020-07-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SQLVulnerabilityAssessmentScanResultsClient) getHandleResponse(resp *azcore.Response) (SQLVulnerabilityAssessmentScanResultsGetResponse, error) {
	result := SQLVulnerabilityAssessmentScanResultsGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ScanResult); err != nil {
		return SQLVulnerabilityAssessmentScanResultsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SQLVulnerabilityAssessmentScanResultsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Gets a list of scan results for a single scan record.
// If the operation fails it returns the *CloudError error type.
func (client *SQLVulnerabilityAssessmentScanResultsClient) List(ctx context.Context, scanID string, workspaceID string, resourceID string, options *SQLVulnerabilityAssessmentScanResultsListOptions) (SQLVulnerabilityAssessmentScanResultsListResponse, error) {
	req, err := client.listCreateRequest(ctx, scanID, workspaceID, resourceID, options)
	if err != nil {
		return SQLVulnerabilityAssessmentScanResultsListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SQLVulnerabilityAssessmentScanResultsListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SQLVulnerabilityAssessmentScanResultsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *SQLVulnerabilityAssessmentScanResultsClient) listCreateRequest(ctx context.Context, scanID string, workspaceID string, resourceID string, options *SQLVulnerabilityAssessmentScanResultsListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults"
	if scanID == "" {
		return nil, errors.New("parameter scanID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scanId}", url.PathEscape(scanID))
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("workspaceId", workspaceID)
	reqQP.Set("api-version", "2020-07-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SQLVulnerabilityAssessmentScanResultsClient) listHandleResponse(resp *azcore.Response) (SQLVulnerabilityAssessmentScanResultsListResponse, error) {
	result := SQLVulnerabilityAssessmentScanResultsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ScanResults); err != nil {
		return SQLVulnerabilityAssessmentScanResultsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SQLVulnerabilityAssessmentScanResultsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
