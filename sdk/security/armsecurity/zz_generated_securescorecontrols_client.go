// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SecureScoreControlsClient contains the methods for the SecureScoreControls group.
// Don't use this type directly, use NewSecureScoreControlsClient() instead.
type SecureScoreControlsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewSecureScoreControlsClient creates a new instance of SecureScoreControlsClient with the specified values.
func NewSecureScoreControlsClient(con *armcore.Connection, subscriptionID string) *SecureScoreControlsClient {
	return &SecureScoreControlsClient{con: con, subscriptionID: subscriptionID}
}

// List - Get all security controls within a scope
// If the operation fails it returns the *CloudError error type.
func (client *SecureScoreControlsClient) List(options *SecureScoreControlsListOptions) SecureScoreControlsListPager {
	return &secureScoreControlsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SecureScoreControlsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecureScoreControlList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SecureScoreControlsClient) listCreateRequest(ctx context.Context, options *SecureScoreControlsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", string(*options.Expand))
	}
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SecureScoreControlsClient) listHandleResponse(resp *azcore.Response) (SecureScoreControlsListResponse, error) {
	result := SecureScoreControlsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecureScoreControlList); err != nil {
		return SecureScoreControlsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SecureScoreControlsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListBySecureScore - Get all security controls for a specific initiative within a scope
// If the operation fails it returns the *CloudError error type.
func (client *SecureScoreControlsClient) ListBySecureScore(secureScoreName string, options *SecureScoreControlsListBySecureScoreOptions) SecureScoreControlsListBySecureScorePager {
	return &secureScoreControlsListBySecureScorePager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listBySecureScoreCreateRequest(ctx, secureScoreName, options)
		},
		advancer: func(ctx context.Context, resp SecureScoreControlsListBySecureScoreResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecureScoreControlList.NextLink)
		},
	}
}

// listBySecureScoreCreateRequest creates the ListBySecureScore request.
func (client *SecureScoreControlsClient) listBySecureScoreCreateRequest(ctx context.Context, secureScoreName string, options *SecureScoreControlsListBySecureScoreOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScores/{secureScoreName}/secureScoreControls"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if secureScoreName == "" {
		return nil, errors.New("parameter secureScoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{secureScoreName}", url.PathEscape(secureScoreName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", string(*options.Expand))
	}
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listBySecureScoreHandleResponse handles the ListBySecureScore response.
func (client *SecureScoreControlsClient) listBySecureScoreHandleResponse(resp *azcore.Response) (SecureScoreControlsListBySecureScoreResponse, error) {
	result := SecureScoreControlsListBySecureScoreResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecureScoreControlList); err != nil {
		return SecureScoreControlsListBySecureScoreResponse{}, err
	}
	return result, nil
}

// listBySecureScoreHandleError handles the ListBySecureScore error response.
func (client *SecureScoreControlsClient) listBySecureScoreHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
