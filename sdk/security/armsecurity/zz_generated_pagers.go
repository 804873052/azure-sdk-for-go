// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type AdaptiveNetworkHardeningsListByExtendedResourcePager interface {
	azcore.Pager
	// PageResponse returns the current AdaptiveNetworkHardeningsListByExtendedResourceResponse.
	PageResponse() AdaptiveNetworkHardeningsListByExtendedResourceResponse
}

type adaptiveNetworkHardeningsListByExtendedResourcePager struct {
	client    *AdaptiveNetworkHardeningsClient
	current   AdaptiveNetworkHardeningsListByExtendedResourceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AdaptiveNetworkHardeningsListByExtendedResourceResponse) (*azcore.Request, error)
}

func (p *adaptiveNetworkHardeningsListByExtendedResourcePager) Err() error {
	return p.err
}

func (p *adaptiveNetworkHardeningsListByExtendedResourcePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AdaptiveNetworkHardeningsList.NextLink == nil || len(*p.current.AdaptiveNetworkHardeningsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByExtendedResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByExtendedResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *adaptiveNetworkHardeningsListByExtendedResourcePager) PageResponse() AdaptiveNetworkHardeningsListByExtendedResourceResponse {
	return p.current
}

type AlertsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AlertsListByResourceGroupResponse.
	PageResponse() AlertsListByResourceGroupResponse
}

type alertsListByResourceGroupPager struct {
	client    *AlertsClient
	current   AlertsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AlertsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *alertsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *alertsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *alertsListByResourceGroupPager) PageResponse() AlertsListByResourceGroupResponse {
	return p.current
}

type AlertsListPager interface {
	azcore.Pager
	// PageResponse returns the current AlertsListResponse.
	PageResponse() AlertsListResponse
}

type alertsListPager struct {
	client    *AlertsClient
	current   AlertsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AlertsListResponse) (*azcore.Request, error)
}

func (p *alertsListPager) Err() error {
	return p.err
}

func (p *alertsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *alertsListPager) PageResponse() AlertsListResponse {
	return p.current
}

type AlertsListResourceGroupLevelByRegionPager interface {
	azcore.Pager
	// PageResponse returns the current AlertsListResourceGroupLevelByRegionResponse.
	PageResponse() AlertsListResourceGroupLevelByRegionResponse
}

type alertsListResourceGroupLevelByRegionPager struct {
	client    *AlertsClient
	current   AlertsListResourceGroupLevelByRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AlertsListResourceGroupLevelByRegionResponse) (*azcore.Request, error)
}

func (p *alertsListResourceGroupLevelByRegionPager) Err() error {
	return p.err
}

func (p *alertsListResourceGroupLevelByRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listResourceGroupLevelByRegionHandleError(resp)
		return false
	}
	result, err := p.client.listResourceGroupLevelByRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *alertsListResourceGroupLevelByRegionPager) PageResponse() AlertsListResourceGroupLevelByRegionResponse {
	return p.current
}

type AlertsListSubscriptionLevelByRegionPager interface {
	azcore.Pager
	// PageResponse returns the current AlertsListSubscriptionLevelByRegionResponse.
	PageResponse() AlertsListSubscriptionLevelByRegionResponse
}

type alertsListSubscriptionLevelByRegionPager struct {
	client    *AlertsClient
	current   AlertsListSubscriptionLevelByRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AlertsListSubscriptionLevelByRegionResponse) (*azcore.Request, error)
}

func (p *alertsListSubscriptionLevelByRegionPager) Err() error {
	return p.err
}

func (p *alertsListSubscriptionLevelByRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSubscriptionLevelByRegionHandleError(resp)
		return false
	}
	result, err := p.client.listSubscriptionLevelByRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *alertsListSubscriptionLevelByRegionPager) PageResponse() AlertsListSubscriptionLevelByRegionResponse {
	return p.current
}

type AlertsSuppressionRulesListPager interface {
	azcore.Pager
	// PageResponse returns the current AlertsSuppressionRulesListResponse.
	PageResponse() AlertsSuppressionRulesListResponse
}

type alertsSuppressionRulesListPager struct {
	client    *AlertsSuppressionRulesClient
	current   AlertsSuppressionRulesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AlertsSuppressionRulesListResponse) (*azcore.Request, error)
}

func (p *alertsSuppressionRulesListPager) Err() error {
	return p.err
}

func (p *alertsSuppressionRulesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertsSuppressionRulesList.NextLink == nil || len(*p.current.AlertsSuppressionRulesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *alertsSuppressionRulesListPager) PageResponse() AlertsSuppressionRulesListResponse {
	return p.current
}

type AllowedConnectionsListByHomeRegionPager interface {
	azcore.Pager
	// PageResponse returns the current AllowedConnectionsListByHomeRegionResponse.
	PageResponse() AllowedConnectionsListByHomeRegionResponse
}

type allowedConnectionsListByHomeRegionPager struct {
	client    *AllowedConnectionsClient
	current   AllowedConnectionsListByHomeRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AllowedConnectionsListByHomeRegionResponse) (*azcore.Request, error)
}

func (p *allowedConnectionsListByHomeRegionPager) Err() error {
	return p.err
}

func (p *allowedConnectionsListByHomeRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AllowedConnectionsList.NextLink == nil || len(*p.current.AllowedConnectionsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHomeRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByHomeRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *allowedConnectionsListByHomeRegionPager) PageResponse() AllowedConnectionsListByHomeRegionResponse {
	return p.current
}

type AllowedConnectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current AllowedConnectionsListResponse.
	PageResponse() AllowedConnectionsListResponse
}

type allowedConnectionsListPager struct {
	client    *AllowedConnectionsClient
	current   AllowedConnectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AllowedConnectionsListResponse) (*azcore.Request, error)
}

func (p *allowedConnectionsListPager) Err() error {
	return p.err
}

func (p *allowedConnectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AllowedConnectionsList.NextLink == nil || len(*p.current.AllowedConnectionsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *allowedConnectionsListPager) PageResponse() AllowedConnectionsListResponse {
	return p.current
}

type AssessmentsListPager interface {
	azcore.Pager
	// PageResponse returns the current AssessmentsListResponse.
	PageResponse() AssessmentsListResponse
}

type assessmentsListPager struct {
	client    *AssessmentsClient
	current   AssessmentsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AssessmentsListResponse) (*azcore.Request, error)
}

func (p *assessmentsListPager) Err() error {
	return p.err
}

func (p *assessmentsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityAssessmentList.NextLink == nil || len(*p.current.SecurityAssessmentList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *assessmentsListPager) PageResponse() AssessmentsListResponse {
	return p.current
}

type AssessmentsMetadataListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current AssessmentsMetadataListBySubscriptionResponse.
	PageResponse() AssessmentsMetadataListBySubscriptionResponse
}

type assessmentsMetadataListBySubscriptionPager struct {
	client    *AssessmentsMetadataClient
	current   AssessmentsMetadataListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AssessmentsMetadataListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *assessmentsMetadataListBySubscriptionPager) Err() error {
	return p.err
}

func (p *assessmentsMetadataListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityAssessmentMetadataList.NextLink == nil || len(*p.current.SecurityAssessmentMetadataList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *assessmentsMetadataListBySubscriptionPager) PageResponse() AssessmentsMetadataListBySubscriptionResponse {
	return p.current
}

type AssessmentsMetadataListPager interface {
	azcore.Pager
	// PageResponse returns the current AssessmentsMetadataListResponse.
	PageResponse() AssessmentsMetadataListResponse
}

type assessmentsMetadataListPager struct {
	client    *AssessmentsMetadataClient
	current   AssessmentsMetadataListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AssessmentsMetadataListResponse) (*azcore.Request, error)
}

func (p *assessmentsMetadataListPager) Err() error {
	return p.err
}

func (p *assessmentsMetadataListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityAssessmentMetadataList.NextLink == nil || len(*p.current.SecurityAssessmentMetadataList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *assessmentsMetadataListPager) PageResponse() AssessmentsMetadataListResponse {
	return p.current
}

type AutoProvisioningSettingsListPager interface {
	azcore.Pager
	// PageResponse returns the current AutoProvisioningSettingsListResponse.
	PageResponse() AutoProvisioningSettingsListResponse
}

type autoProvisioningSettingsListPager struct {
	client    *AutoProvisioningSettingsClient
	current   AutoProvisioningSettingsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AutoProvisioningSettingsListResponse) (*azcore.Request, error)
}

func (p *autoProvisioningSettingsListPager) Err() error {
	return p.err
}

func (p *autoProvisioningSettingsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutoProvisioningSettingList.NextLink == nil || len(*p.current.AutoProvisioningSettingList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *autoProvisioningSettingsListPager) PageResponse() AutoProvisioningSettingsListResponse {
	return p.current
}

type AutomationsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AutomationsListByResourceGroupResponse.
	PageResponse() AutomationsListByResourceGroupResponse
}

type automationsListByResourceGroupPager struct {
	client    *AutomationsClient
	current   AutomationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AutomationsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *automationsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *automationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutomationList.NextLink == nil || len(*p.current.AutomationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *automationsListByResourceGroupPager) PageResponse() AutomationsListByResourceGroupResponse {
	return p.current
}

type AutomationsListPager interface {
	azcore.Pager
	// PageResponse returns the current AutomationsListResponse.
	PageResponse() AutomationsListResponse
}

type automationsListPager struct {
	client    *AutomationsClient
	current   AutomationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AutomationsListResponse) (*azcore.Request, error)
}

func (p *automationsListPager) Err() error {
	return p.err
}

func (p *automationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutomationList.NextLink == nil || len(*p.current.AutomationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *automationsListPager) PageResponse() AutomationsListResponse {
	return p.current
}

type ComplianceResultsListPager interface {
	azcore.Pager
	// PageResponse returns the current ComplianceResultsListResponse.
	PageResponse() ComplianceResultsListResponse
}

type complianceResultsListPager struct {
	client    *ComplianceResultsClient
	current   ComplianceResultsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ComplianceResultsListResponse) (*azcore.Request, error)
}

func (p *complianceResultsListPager) Err() error {
	return p.err
}

func (p *complianceResultsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ComplianceResultList.NextLink == nil || len(*p.current.ComplianceResultList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *complianceResultsListPager) PageResponse() ComplianceResultsListResponse {
	return p.current
}

type CompliancesListPager interface {
	azcore.Pager
	// PageResponse returns the current CompliancesListResponse.
	PageResponse() CompliancesListResponse
}

type compliancesListPager struct {
	client    *CompliancesClient
	current   CompliancesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CompliancesListResponse) (*azcore.Request, error)
}

func (p *compliancesListPager) Err() error {
	return p.err
}

func (p *compliancesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ComplianceList.NextLink == nil || len(*p.current.ComplianceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *compliancesListPager) PageResponse() CompliancesListResponse {
	return p.current
}

type ConnectorsListPager interface {
	azcore.Pager
	// PageResponse returns the current ConnectorsListResponse.
	PageResponse() ConnectorsListResponse
}

type connectorsListPager struct {
	client    *ConnectorsClient
	current   ConnectorsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ConnectorsListResponse) (*azcore.Request, error)
}

func (p *connectorsListPager) Err() error {
	return p.err
}

func (p *connectorsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConnectorSettingList.NextLink == nil || len(*p.current.ConnectorSettingList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *connectorsListPager) PageResponse() ConnectorsListResponse {
	return p.current
}

type DeviceSecurityGroupsListPager interface {
	azcore.Pager
	// PageResponse returns the current DeviceSecurityGroupsListResponse.
	PageResponse() DeviceSecurityGroupsListResponse
}

type deviceSecurityGroupsListPager struct {
	client    *DeviceSecurityGroupsClient
	current   DeviceSecurityGroupsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeviceSecurityGroupsListResponse) (*azcore.Request, error)
}

func (p *deviceSecurityGroupsListPager) Err() error {
	return p.err
}

func (p *deviceSecurityGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceSecurityGroupList.NextLink == nil || len(*p.current.DeviceSecurityGroupList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deviceSecurityGroupsListPager) PageResponse() DeviceSecurityGroupsListResponse {
	return p.current
}

type DiscoveredSecuritySolutionsListByHomeRegionPager interface {
	azcore.Pager
	// PageResponse returns the current DiscoveredSecuritySolutionsListByHomeRegionResponse.
	PageResponse() DiscoveredSecuritySolutionsListByHomeRegionResponse
}

type discoveredSecuritySolutionsListByHomeRegionPager struct {
	client    *DiscoveredSecuritySolutionsClient
	current   DiscoveredSecuritySolutionsListByHomeRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiscoveredSecuritySolutionsListByHomeRegionResponse) (*azcore.Request, error)
}

func (p *discoveredSecuritySolutionsListByHomeRegionPager) Err() error {
	return p.err
}

func (p *discoveredSecuritySolutionsListByHomeRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiscoveredSecuritySolutionList.NextLink == nil || len(*p.current.DiscoveredSecuritySolutionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHomeRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByHomeRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *discoveredSecuritySolutionsListByHomeRegionPager) PageResponse() DiscoveredSecuritySolutionsListByHomeRegionResponse {
	return p.current
}

type DiscoveredSecuritySolutionsListPager interface {
	azcore.Pager
	// PageResponse returns the current DiscoveredSecuritySolutionsListResponse.
	PageResponse() DiscoveredSecuritySolutionsListResponse
}

type discoveredSecuritySolutionsListPager struct {
	client    *DiscoveredSecuritySolutionsClient
	current   DiscoveredSecuritySolutionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiscoveredSecuritySolutionsListResponse) (*azcore.Request, error)
}

func (p *discoveredSecuritySolutionsListPager) Err() error {
	return p.err
}

func (p *discoveredSecuritySolutionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiscoveredSecuritySolutionList.NextLink == nil || len(*p.current.DiscoveredSecuritySolutionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *discoveredSecuritySolutionsListPager) PageResponse() DiscoveredSecuritySolutionsListResponse {
	return p.current
}

type ExternalSecuritySolutionsListByHomeRegionPager interface {
	azcore.Pager
	// PageResponse returns the current ExternalSecuritySolutionsListByHomeRegionResponse.
	PageResponse() ExternalSecuritySolutionsListByHomeRegionResponse
}

type externalSecuritySolutionsListByHomeRegionPager struct {
	client    *ExternalSecuritySolutionsClient
	current   ExternalSecuritySolutionsListByHomeRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExternalSecuritySolutionsListByHomeRegionResponse) (*azcore.Request, error)
}

func (p *externalSecuritySolutionsListByHomeRegionPager) Err() error {
	return p.err
}

func (p *externalSecuritySolutionsListByHomeRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExternalSecuritySolutionList.NextLink == nil || len(*p.current.ExternalSecuritySolutionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHomeRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByHomeRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *externalSecuritySolutionsListByHomeRegionPager) PageResponse() ExternalSecuritySolutionsListByHomeRegionResponse {
	return p.current
}

type ExternalSecuritySolutionsListPager interface {
	azcore.Pager
	// PageResponse returns the current ExternalSecuritySolutionsListResponse.
	PageResponse() ExternalSecuritySolutionsListResponse
}

type externalSecuritySolutionsListPager struct {
	client    *ExternalSecuritySolutionsClient
	current   ExternalSecuritySolutionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExternalSecuritySolutionsListResponse) (*azcore.Request, error)
}

func (p *externalSecuritySolutionsListPager) Err() error {
	return p.err
}

func (p *externalSecuritySolutionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExternalSecuritySolutionList.NextLink == nil || len(*p.current.ExternalSecuritySolutionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *externalSecuritySolutionsListPager) PageResponse() ExternalSecuritySolutionsListResponse {
	return p.current
}

type InformationProtectionPoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current InformationProtectionPoliciesListResponse.
	PageResponse() InformationProtectionPoliciesListResponse
}

type informationProtectionPoliciesListPager struct {
	client    *InformationProtectionPoliciesClient
	current   InformationProtectionPoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, InformationProtectionPoliciesListResponse) (*azcore.Request, error)
}

func (p *informationProtectionPoliciesListPager) Err() error {
	return p.err
}

func (p *informationProtectionPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InformationProtectionPolicyList.NextLink == nil || len(*p.current.InformationProtectionPolicyList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *informationProtectionPoliciesListPager) PageResponse() InformationProtectionPoliciesListResponse {
	return p.current
}

type IngestionSettingsListPager interface {
	azcore.Pager
	// PageResponse returns the current IngestionSettingsListResponse.
	PageResponse() IngestionSettingsListResponse
}

type ingestionSettingsListPager struct {
	client    *IngestionSettingsClient
	current   IngestionSettingsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IngestionSettingsListResponse) (*azcore.Request, error)
}

func (p *ingestionSettingsListPager) Err() error {
	return p.err
}

func (p *ingestionSettingsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IngestionSettingList.NextLink == nil || len(*p.current.IngestionSettingList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ingestionSettingsListPager) PageResponse() IngestionSettingsListResponse {
	return p.current
}

type IotSecuritySolutionListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current IotSecuritySolutionListByResourceGroupResponse.
	PageResponse() IotSecuritySolutionListByResourceGroupResponse
}

type iotSecuritySolutionListByResourceGroupPager struct {
	client    *IotSecuritySolutionClient
	current   IotSecuritySolutionListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IotSecuritySolutionListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *iotSecuritySolutionListByResourceGroupPager) Err() error {
	return p.err
}

func (p *iotSecuritySolutionListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IoTSecuritySolutionsList.NextLink == nil || len(*p.current.IoTSecuritySolutionsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *iotSecuritySolutionListByResourceGroupPager) PageResponse() IotSecuritySolutionListByResourceGroupResponse {
	return p.current
}

type IotSecuritySolutionListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current IotSecuritySolutionListBySubscriptionResponse.
	PageResponse() IotSecuritySolutionListBySubscriptionResponse
}

type iotSecuritySolutionListBySubscriptionPager struct {
	client    *IotSecuritySolutionClient
	current   IotSecuritySolutionListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IotSecuritySolutionListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *iotSecuritySolutionListBySubscriptionPager) Err() error {
	return p.err
}

func (p *iotSecuritySolutionListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IoTSecuritySolutionsList.NextLink == nil || len(*p.current.IoTSecuritySolutionsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *iotSecuritySolutionListBySubscriptionPager) PageResponse() IotSecuritySolutionListBySubscriptionResponse {
	return p.current
}

type IotSecuritySolutionsAnalyticsAggregatedAlertListPager interface {
	azcore.Pager
	// PageResponse returns the current IotSecuritySolutionsAnalyticsAggregatedAlertListResponse.
	PageResponse() IotSecuritySolutionsAnalyticsAggregatedAlertListResponse
}

type iotSecuritySolutionsAnalyticsAggregatedAlertListPager struct {
	client    *IotSecuritySolutionsAnalyticsAggregatedAlertClient
	current   IotSecuritySolutionsAnalyticsAggregatedAlertListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IotSecuritySolutionsAnalyticsAggregatedAlertListResponse) (*azcore.Request, error)
}

func (p *iotSecuritySolutionsAnalyticsAggregatedAlertListPager) Err() error {
	return p.err
}

func (p *iotSecuritySolutionsAnalyticsAggregatedAlertListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IoTSecurityAggregatedAlertList.NextLink == nil || len(*p.current.IoTSecurityAggregatedAlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *iotSecuritySolutionsAnalyticsAggregatedAlertListPager) PageResponse() IotSecuritySolutionsAnalyticsAggregatedAlertListResponse {
	return p.current
}

type IotSecuritySolutionsAnalyticsRecommendationListPager interface {
	azcore.Pager
	// PageResponse returns the current IotSecuritySolutionsAnalyticsRecommendationListResponse.
	PageResponse() IotSecuritySolutionsAnalyticsRecommendationListResponse
}

type iotSecuritySolutionsAnalyticsRecommendationListPager struct {
	client    *IotSecuritySolutionsAnalyticsRecommendationClient
	current   IotSecuritySolutionsAnalyticsRecommendationListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IotSecuritySolutionsAnalyticsRecommendationListResponse) (*azcore.Request, error)
}

func (p *iotSecuritySolutionsAnalyticsRecommendationListPager) Err() error {
	return p.err
}

func (p *iotSecuritySolutionsAnalyticsRecommendationListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IoTSecurityAggregatedRecommendationList.NextLink == nil || len(*p.current.IoTSecurityAggregatedRecommendationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *iotSecuritySolutionsAnalyticsRecommendationListPager) PageResponse() IotSecuritySolutionsAnalyticsRecommendationListResponse {
	return p.current
}

type JitNetworkAccessPoliciesListByRegionPager interface {
	azcore.Pager
	// PageResponse returns the current JitNetworkAccessPoliciesListByRegionResponse.
	PageResponse() JitNetworkAccessPoliciesListByRegionResponse
}

type jitNetworkAccessPoliciesListByRegionPager struct {
	client    *JitNetworkAccessPoliciesClient
	current   JitNetworkAccessPoliciesListByRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JitNetworkAccessPoliciesListByRegionResponse) (*azcore.Request, error)
}

func (p *jitNetworkAccessPoliciesListByRegionPager) Err() error {
	return p.err
}

func (p *jitNetworkAccessPoliciesListByRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JitNetworkAccessPoliciesList.NextLink == nil || len(*p.current.JitNetworkAccessPoliciesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jitNetworkAccessPoliciesListByRegionPager) PageResponse() JitNetworkAccessPoliciesListByRegionResponse {
	return p.current
}

type JitNetworkAccessPoliciesListByResourceGroupAndRegionPager interface {
	azcore.Pager
	// PageResponse returns the current JitNetworkAccessPoliciesListByResourceGroupAndRegionResponse.
	PageResponse() JitNetworkAccessPoliciesListByResourceGroupAndRegionResponse
}

type jitNetworkAccessPoliciesListByResourceGroupAndRegionPager struct {
	client    *JitNetworkAccessPoliciesClient
	current   JitNetworkAccessPoliciesListByResourceGroupAndRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JitNetworkAccessPoliciesListByResourceGroupAndRegionResponse) (*azcore.Request, error)
}

func (p *jitNetworkAccessPoliciesListByResourceGroupAndRegionPager) Err() error {
	return p.err
}

func (p *jitNetworkAccessPoliciesListByResourceGroupAndRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JitNetworkAccessPoliciesList.NextLink == nil || len(*p.current.JitNetworkAccessPoliciesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupAndRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupAndRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jitNetworkAccessPoliciesListByResourceGroupAndRegionPager) PageResponse() JitNetworkAccessPoliciesListByResourceGroupAndRegionResponse {
	return p.current
}

type JitNetworkAccessPoliciesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current JitNetworkAccessPoliciesListByResourceGroupResponse.
	PageResponse() JitNetworkAccessPoliciesListByResourceGroupResponse
}

type jitNetworkAccessPoliciesListByResourceGroupPager struct {
	client    *JitNetworkAccessPoliciesClient
	current   JitNetworkAccessPoliciesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JitNetworkAccessPoliciesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *jitNetworkAccessPoliciesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *jitNetworkAccessPoliciesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JitNetworkAccessPoliciesList.NextLink == nil || len(*p.current.JitNetworkAccessPoliciesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jitNetworkAccessPoliciesListByResourceGroupPager) PageResponse() JitNetworkAccessPoliciesListByResourceGroupResponse {
	return p.current
}

type JitNetworkAccessPoliciesListPager interface {
	azcore.Pager
	// PageResponse returns the current JitNetworkAccessPoliciesListResponse.
	PageResponse() JitNetworkAccessPoliciesListResponse
}

type jitNetworkAccessPoliciesListPager struct {
	client    *JitNetworkAccessPoliciesClient
	current   JitNetworkAccessPoliciesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JitNetworkAccessPoliciesListResponse) (*azcore.Request, error)
}

func (p *jitNetworkAccessPoliciesListPager) Err() error {
	return p.err
}

func (p *jitNetworkAccessPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JitNetworkAccessPoliciesList.NextLink == nil || len(*p.current.JitNetworkAccessPoliciesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jitNetworkAccessPoliciesListPager) PageResponse() JitNetworkAccessPoliciesListResponse {
	return p.current
}

type LocationsListPager interface {
	azcore.Pager
	// PageResponse returns the current LocationsListResponse.
	PageResponse() LocationsListResponse
}

type locationsListPager struct {
	client    *LocationsClient
	current   LocationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LocationsListResponse) (*azcore.Request, error)
}

func (p *locationsListPager) Err() error {
	return p.err
}

func (p *locationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AscLocationList.NextLink == nil || len(*p.current.AscLocationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *locationsListPager) PageResponse() LocationsListResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type RegulatoryComplianceAssessmentsListPager interface {
	azcore.Pager
	// PageResponse returns the current RegulatoryComplianceAssessmentsListResponse.
	PageResponse() RegulatoryComplianceAssessmentsListResponse
}

type regulatoryComplianceAssessmentsListPager struct {
	client    *RegulatoryComplianceAssessmentsClient
	current   RegulatoryComplianceAssessmentsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RegulatoryComplianceAssessmentsListResponse) (*azcore.Request, error)
}

func (p *regulatoryComplianceAssessmentsListPager) Err() error {
	return p.err
}

func (p *regulatoryComplianceAssessmentsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegulatoryComplianceAssessmentList.NextLink == nil || len(*p.current.RegulatoryComplianceAssessmentList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *regulatoryComplianceAssessmentsListPager) PageResponse() RegulatoryComplianceAssessmentsListResponse {
	return p.current
}

type RegulatoryComplianceControlsListPager interface {
	azcore.Pager
	// PageResponse returns the current RegulatoryComplianceControlsListResponse.
	PageResponse() RegulatoryComplianceControlsListResponse
}

type regulatoryComplianceControlsListPager struct {
	client    *RegulatoryComplianceControlsClient
	current   RegulatoryComplianceControlsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RegulatoryComplianceControlsListResponse) (*azcore.Request, error)
}

func (p *regulatoryComplianceControlsListPager) Err() error {
	return p.err
}

func (p *regulatoryComplianceControlsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegulatoryComplianceControlList.NextLink == nil || len(*p.current.RegulatoryComplianceControlList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *regulatoryComplianceControlsListPager) PageResponse() RegulatoryComplianceControlsListResponse {
	return p.current
}

type RegulatoryComplianceStandardsListPager interface {
	azcore.Pager
	// PageResponse returns the current RegulatoryComplianceStandardsListResponse.
	PageResponse() RegulatoryComplianceStandardsListResponse
}

type regulatoryComplianceStandardsListPager struct {
	client    *RegulatoryComplianceStandardsClient
	current   RegulatoryComplianceStandardsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RegulatoryComplianceStandardsListResponse) (*azcore.Request, error)
}

func (p *regulatoryComplianceStandardsListPager) Err() error {
	return p.err
}

func (p *regulatoryComplianceStandardsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegulatoryComplianceStandardList.NextLink == nil || len(*p.current.RegulatoryComplianceStandardList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *regulatoryComplianceStandardsListPager) PageResponse() RegulatoryComplianceStandardsListResponse {
	return p.current
}

type SecureScoreControlDefinitionsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current SecureScoreControlDefinitionsListBySubscriptionResponse.
	PageResponse() SecureScoreControlDefinitionsListBySubscriptionResponse
}

type secureScoreControlDefinitionsListBySubscriptionPager struct {
	client    *SecureScoreControlDefinitionsClient
	current   SecureScoreControlDefinitionsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecureScoreControlDefinitionsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *secureScoreControlDefinitionsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *secureScoreControlDefinitionsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecureScoreControlDefinitionList.NextLink == nil || len(*p.current.SecureScoreControlDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secureScoreControlDefinitionsListBySubscriptionPager) PageResponse() SecureScoreControlDefinitionsListBySubscriptionResponse {
	return p.current
}

type SecureScoreControlDefinitionsListPager interface {
	azcore.Pager
	// PageResponse returns the current SecureScoreControlDefinitionsListResponse.
	PageResponse() SecureScoreControlDefinitionsListResponse
}

type secureScoreControlDefinitionsListPager struct {
	client    *SecureScoreControlDefinitionsClient
	current   SecureScoreControlDefinitionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecureScoreControlDefinitionsListResponse) (*azcore.Request, error)
}

func (p *secureScoreControlDefinitionsListPager) Err() error {
	return p.err
}

func (p *secureScoreControlDefinitionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecureScoreControlDefinitionList.NextLink == nil || len(*p.current.SecureScoreControlDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secureScoreControlDefinitionsListPager) PageResponse() SecureScoreControlDefinitionsListResponse {
	return p.current
}

type SecureScoreControlsListBySecureScorePager interface {
	azcore.Pager
	// PageResponse returns the current SecureScoreControlsListBySecureScoreResponse.
	PageResponse() SecureScoreControlsListBySecureScoreResponse
}

type secureScoreControlsListBySecureScorePager struct {
	client    *SecureScoreControlsClient
	current   SecureScoreControlsListBySecureScoreResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecureScoreControlsListBySecureScoreResponse) (*azcore.Request, error)
}

func (p *secureScoreControlsListBySecureScorePager) Err() error {
	return p.err
}

func (p *secureScoreControlsListBySecureScorePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecureScoreControlList.NextLink == nil || len(*p.current.SecureScoreControlList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySecureScoreHandleError(resp)
		return false
	}
	result, err := p.client.listBySecureScoreHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secureScoreControlsListBySecureScorePager) PageResponse() SecureScoreControlsListBySecureScoreResponse {
	return p.current
}

type SecureScoreControlsListPager interface {
	azcore.Pager
	// PageResponse returns the current SecureScoreControlsListResponse.
	PageResponse() SecureScoreControlsListResponse
}

type secureScoreControlsListPager struct {
	client    *SecureScoreControlsClient
	current   SecureScoreControlsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecureScoreControlsListResponse) (*azcore.Request, error)
}

func (p *secureScoreControlsListPager) Err() error {
	return p.err
}

func (p *secureScoreControlsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecureScoreControlList.NextLink == nil || len(*p.current.SecureScoreControlList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secureScoreControlsListPager) PageResponse() SecureScoreControlsListResponse {
	return p.current
}

type SecureScoresListPager interface {
	azcore.Pager
	// PageResponse returns the current SecureScoresListResponse.
	PageResponse() SecureScoresListResponse
}

type secureScoresListPager struct {
	client    *SecureScoresClient
	current   SecureScoresListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecureScoresListResponse) (*azcore.Request, error)
}

func (p *secureScoresListPager) Err() error {
	return p.err
}

func (p *secureScoresListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecureScoresList.NextLink == nil || len(*p.current.SecureScoresList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secureScoresListPager) PageResponse() SecureScoresListResponse {
	return p.current
}

type SecurityContactsListPager interface {
	azcore.Pager
	// PageResponse returns the current SecurityContactsListResponse.
	PageResponse() SecurityContactsListResponse
}

type securityContactsListPager struct {
	client    *SecurityContactsClient
	current   SecurityContactsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecurityContactsListResponse) (*azcore.Request, error)
}

func (p *securityContactsListPager) Err() error {
	return p.err
}

func (p *securityContactsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityContactList.NextLink == nil || len(*p.current.SecurityContactList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securityContactsListPager) PageResponse() SecurityContactsListResponse {
	return p.current
}

type SecuritySolutionsListPager interface {
	azcore.Pager
	// PageResponse returns the current SecuritySolutionsListResponse.
	PageResponse() SecuritySolutionsListResponse
}

type securitySolutionsListPager struct {
	client    *SecuritySolutionsClient
	current   SecuritySolutionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SecuritySolutionsListResponse) (*azcore.Request, error)
}

func (p *securitySolutionsListPager) Err() error {
	return p.err
}

func (p *securitySolutionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecuritySolutionList.NextLink == nil || len(*p.current.SecuritySolutionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *securitySolutionsListPager) PageResponse() SecuritySolutionsListResponse {
	return p.current
}

type SettingsListPager interface {
	azcore.Pager
	// PageResponse returns the current SettingsListResponse.
	PageResponse() SettingsListResponse
}

type settingsListPager struct {
	client    *SettingsClient
	current   SettingsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SettingsListResponse) (*azcore.Request, error)
}

func (p *settingsListPager) Err() error {
	return p.err
}

func (p *settingsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SettingsList.NextLink == nil || len(*p.current.SettingsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *settingsListPager) PageResponse() SettingsListResponse {
	return p.current
}

type SoftwareInventoriesListByExtendedResourcePager interface {
	azcore.Pager
	// PageResponse returns the current SoftwareInventoriesListByExtendedResourceResponse.
	PageResponse() SoftwareInventoriesListByExtendedResourceResponse
}

type softwareInventoriesListByExtendedResourcePager struct {
	client    *SoftwareInventoriesClient
	current   SoftwareInventoriesListByExtendedResourceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SoftwareInventoriesListByExtendedResourceResponse) (*azcore.Request, error)
}

func (p *softwareInventoriesListByExtendedResourcePager) Err() error {
	return p.err
}

func (p *softwareInventoriesListByExtendedResourcePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SoftwaresList.NextLink == nil || len(*p.current.SoftwaresList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByExtendedResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByExtendedResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *softwareInventoriesListByExtendedResourcePager) PageResponse() SoftwareInventoriesListByExtendedResourceResponse {
	return p.current
}

type SoftwareInventoriesListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current SoftwareInventoriesListBySubscriptionResponse.
	PageResponse() SoftwareInventoriesListBySubscriptionResponse
}

type softwareInventoriesListBySubscriptionPager struct {
	client    *SoftwareInventoriesClient
	current   SoftwareInventoriesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SoftwareInventoriesListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *softwareInventoriesListBySubscriptionPager) Err() error {
	return p.err
}

func (p *softwareInventoriesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SoftwaresList.NextLink == nil || len(*p.current.SoftwaresList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *softwareInventoriesListBySubscriptionPager) PageResponse() SoftwareInventoriesListBySubscriptionResponse {
	return p.current
}

type SubAssessmentsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current SubAssessmentsListAllResponse.
	PageResponse() SubAssessmentsListAllResponse
}

type subAssessmentsListAllPager struct {
	client    *SubAssessmentsClient
	current   SubAssessmentsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SubAssessmentsListAllResponse) (*azcore.Request, error)
}

func (p *subAssessmentsListAllPager) Err() error {
	return p.err
}

func (p *subAssessmentsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecuritySubAssessmentList.NextLink == nil || len(*p.current.SecuritySubAssessmentList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *subAssessmentsListAllPager) PageResponse() SubAssessmentsListAllResponse {
	return p.current
}

type SubAssessmentsListPager interface {
	azcore.Pager
	// PageResponse returns the current SubAssessmentsListResponse.
	PageResponse() SubAssessmentsListResponse
}

type subAssessmentsListPager struct {
	client    *SubAssessmentsClient
	current   SubAssessmentsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SubAssessmentsListResponse) (*azcore.Request, error)
}

func (p *subAssessmentsListPager) Err() error {
	return p.err
}

func (p *subAssessmentsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecuritySubAssessmentList.NextLink == nil || len(*p.current.SecuritySubAssessmentList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *subAssessmentsListPager) PageResponse() SubAssessmentsListResponse {
	return p.current
}

type TasksListByHomeRegionPager interface {
	azcore.Pager
	// PageResponse returns the current TasksListByHomeRegionResponse.
	PageResponse() TasksListByHomeRegionResponse
}

type tasksListByHomeRegionPager struct {
	client    *TasksClient
	current   TasksListByHomeRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TasksListByHomeRegionResponse) (*azcore.Request, error)
}

func (p *tasksListByHomeRegionPager) Err() error {
	return p.err
}

func (p *tasksListByHomeRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityTaskList.NextLink == nil || len(*p.current.SecurityTaskList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHomeRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByHomeRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tasksListByHomeRegionPager) PageResponse() TasksListByHomeRegionResponse {
	return p.current
}

type TasksListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current TasksListByResourceGroupResponse.
	PageResponse() TasksListByResourceGroupResponse
}

type tasksListByResourceGroupPager struct {
	client    *TasksClient
	current   TasksListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TasksListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *tasksListByResourceGroupPager) Err() error {
	return p.err
}

func (p *tasksListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityTaskList.NextLink == nil || len(*p.current.SecurityTaskList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tasksListByResourceGroupPager) PageResponse() TasksListByResourceGroupResponse {
	return p.current
}

type TasksListPager interface {
	azcore.Pager
	// PageResponse returns the current TasksListResponse.
	PageResponse() TasksListResponse
}

type tasksListPager struct {
	client    *TasksClient
	current   TasksListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TasksListResponse) (*azcore.Request, error)
}

func (p *tasksListPager) Err() error {
	return p.err
}

func (p *tasksListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityTaskList.NextLink == nil || len(*p.current.SecurityTaskList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tasksListPager) PageResponse() TasksListResponse {
	return p.current
}

type TopologyListByHomeRegionPager interface {
	azcore.Pager
	// PageResponse returns the current TopologyListByHomeRegionResponse.
	PageResponse() TopologyListByHomeRegionResponse
}

type topologyListByHomeRegionPager struct {
	client    *TopologyClient
	current   TopologyListByHomeRegionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopologyListByHomeRegionResponse) (*azcore.Request, error)
}

func (p *topologyListByHomeRegionPager) Err() error {
	return p.err
}

func (p *topologyListByHomeRegionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopologyList.NextLink == nil || len(*p.current.TopologyList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHomeRegionHandleError(resp)
		return false
	}
	result, err := p.client.listByHomeRegionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topologyListByHomeRegionPager) PageResponse() TopologyListByHomeRegionResponse {
	return p.current
}

type TopologyListPager interface {
	azcore.Pager
	// PageResponse returns the current TopologyListResponse.
	PageResponse() TopologyListResponse
}

type topologyListPager struct {
	client    *TopologyClient
	current   TopologyListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopologyListResponse) (*azcore.Request, error)
}

func (p *topologyListPager) Err() error {
	return p.err
}

func (p *topologyListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopologyList.NextLink == nil || len(*p.current.TopologyList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topologyListPager) PageResponse() TopologyListResponse {
	return p.current
}

type WorkspaceSettingsListPager interface {
	azcore.Pager
	// PageResponse returns the current WorkspaceSettingsListResponse.
	PageResponse() WorkspaceSettingsListResponse
}

type workspaceSettingsListPager struct {
	client    *WorkspaceSettingsClient
	current   WorkspaceSettingsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkspaceSettingsListResponse) (*azcore.Request, error)
}

func (p *workspaceSettingsListPager) Err() error {
	return p.err
}

func (p *workspaceSettingsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkspaceSettingList.NextLink == nil || len(*p.current.WorkspaceSettingList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workspaceSettingsListPager) PageResponse() WorkspaceSettingsListResponse {
	return p.current
}
