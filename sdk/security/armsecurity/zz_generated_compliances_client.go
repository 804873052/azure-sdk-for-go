// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// CompliancesClient contains the methods for the Compliances group.
// Don't use this type directly, use NewCompliancesClient() instead.
type CompliancesClient struct {
	con *armcore.Connection
}

// NewCompliancesClient creates a new instance of CompliancesClient with the specified values.
func NewCompliancesClient(con *armcore.Connection) *CompliancesClient {
	return &CompliancesClient{con: con}
}

// Get - Details of a specific Compliance.
// If the operation fails it returns the *CloudError error type.
func (client *CompliancesClient) Get(ctx context.Context, scope string, complianceName string, options *CompliancesGetOptions) (CompliancesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, complianceName, options)
	if err != nil {
		return CompliancesGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return CompliancesGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return CompliancesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CompliancesClient) getCreateRequest(ctx context.Context, scope string, complianceName string, options *CompliancesGetOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/compliances/{complianceName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if complianceName == "" {
		return nil, errors.New("parameter complianceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{complianceName}", url.PathEscape(complianceName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2017-08-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CompliancesClient) getHandleResponse(resp *azcore.Response) (CompliancesGetResponse, error) {
	result := CompliancesGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Compliance); err != nil {
		return CompliancesGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *CompliancesClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - The Compliance scores of the specific management group.
// If the operation fails it returns the *CloudError error type.
func (client *CompliancesClient) List(scope string, options *CompliancesListOptions) CompliancesListPager {
	return &compliancesListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp CompliancesListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ComplianceList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *CompliancesClient) listCreateRequest(ctx context.Context, scope string, options *CompliancesListOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/compliances"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2017-08-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *CompliancesClient) listHandleResponse(resp *azcore.Response) (CompliancesListResponse, error) {
	result := CompliancesListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ComplianceList); err != nil {
		return CompliancesListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *CompliancesClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
