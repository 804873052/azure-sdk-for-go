// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AdaptiveApplicationControlsClient contains the methods for the AdaptiveApplicationControls group.
// Don't use this type directly, use NewAdaptiveApplicationControlsClient() instead.
type AdaptiveApplicationControlsClient struct {
	con            *armcore.Connection
	subscriptionID string
	ascLocation    string
}

// NewAdaptiveApplicationControlsClient creates a new instance of AdaptiveApplicationControlsClient with the specified values.
func NewAdaptiveApplicationControlsClient(con *armcore.Connection, subscriptionID string, ascLocation string) *AdaptiveApplicationControlsClient {
	return &AdaptiveApplicationControlsClient{con: con, subscriptionID: subscriptionID, ascLocation: ascLocation}
}

// Delete - Delete an application control machine group
// If the operation fails it returns the *CloudError error type.
func (client *AdaptiveApplicationControlsClient) Delete(ctx context.Context, groupName string, options *AdaptiveApplicationControlsDeleteOptions) (AdaptiveApplicationControlsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, groupName, options)
	if err != nil {
		return AdaptiveApplicationControlsDeleteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdaptiveApplicationControlsDeleteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return AdaptiveApplicationControlsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return AdaptiveApplicationControlsDeleteResponse{RawResponse: resp.Response}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AdaptiveApplicationControlsClient) deleteCreateRequest(ctx context.Context, groupName string, options *AdaptiveApplicationControlsDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if groupName == "" {
		return nil, errors.New("parameter groupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupName}", url.PathEscape(groupName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *AdaptiveApplicationControlsClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Gets an application control VM/server group.
// If the operation fails it returns the *CloudError error type.
func (client *AdaptiveApplicationControlsClient) Get(ctx context.Context, groupName string, options *AdaptiveApplicationControlsGetOptions) (AdaptiveApplicationControlsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, groupName, options)
	if err != nil {
		return AdaptiveApplicationControlsGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdaptiveApplicationControlsGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AdaptiveApplicationControlsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AdaptiveApplicationControlsClient) getCreateRequest(ctx context.Context, groupName string, options *AdaptiveApplicationControlsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if groupName == "" {
		return nil, errors.New("parameter groupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupName}", url.PathEscape(groupName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AdaptiveApplicationControlsClient) getHandleResponse(resp *azcore.Response) (AdaptiveApplicationControlsGetResponse, error) {
	result := AdaptiveApplicationControlsGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AdaptiveApplicationControlGroup); err != nil {
		return AdaptiveApplicationControlsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *AdaptiveApplicationControlsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Gets a list of application control machine groups for the subscription.
// If the operation fails it returns the *CloudError error type.
func (client *AdaptiveApplicationControlsClient) List(ctx context.Context, options *AdaptiveApplicationControlsListOptions) (AdaptiveApplicationControlsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return AdaptiveApplicationControlsListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdaptiveApplicationControlsListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AdaptiveApplicationControlsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *AdaptiveApplicationControlsClient) listCreateRequest(ctx context.Context, options *AdaptiveApplicationControlsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	if options != nil && options.IncludePathRecommendations != nil {
		reqQP.Set("includePathRecommendations", strconv.FormatBool(*options.IncludePathRecommendations))
	}
	if options != nil && options.Summary != nil {
		reqQP.Set("summary", strconv.FormatBool(*options.Summary))
	}
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AdaptiveApplicationControlsClient) listHandleResponse(resp *azcore.Response) (AdaptiveApplicationControlsListResponse, error) {
	result := AdaptiveApplicationControlsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AdaptiveApplicationControlGroups); err != nil {
		return AdaptiveApplicationControlsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *AdaptiveApplicationControlsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Put - Update an application control machine group
// If the operation fails it returns the *CloudError error type.
func (client *AdaptiveApplicationControlsClient) Put(ctx context.Context, groupName string, body AdaptiveApplicationControlGroup, options *AdaptiveApplicationControlsPutOptions) (AdaptiveApplicationControlsPutResponse, error) {
	req, err := client.putCreateRequest(ctx, groupName, body, options)
	if err != nil {
		return AdaptiveApplicationControlsPutResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdaptiveApplicationControlsPutResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AdaptiveApplicationControlsPutResponse{}, client.putHandleError(resp)
	}
	return client.putHandleResponse(resp)
}

// putCreateRequest creates the Put request.
func (client *AdaptiveApplicationControlsClient) putCreateRequest(ctx context.Context, groupName string, body AdaptiveApplicationControlGroup, options *AdaptiveApplicationControlsPutOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/applicationWhitelistings/{groupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if groupName == "" {
		return nil, errors.New("parameter groupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupName}", url.PathEscape(groupName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(body)
}

// putHandleResponse handles the Put response.
func (client *AdaptiveApplicationControlsClient) putHandleResponse(resp *azcore.Response) (AdaptiveApplicationControlsPutResponse, error) {
	result := AdaptiveApplicationControlsPutResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AdaptiveApplicationControlGroup); err != nil {
		return AdaptiveApplicationControlsPutResponse{}, err
	}
	return result, nil
}

// putHandleError handles the Put error response.
func (client *AdaptiveApplicationControlsClient) putHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
