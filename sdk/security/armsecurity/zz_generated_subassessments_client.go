// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SubAssessmentsClient contains the methods for the SubAssessments group.
// Don't use this type directly, use NewSubAssessmentsClient() instead.
type SubAssessmentsClient struct {
	con *armcore.Connection
}

// NewSubAssessmentsClient creates a new instance of SubAssessmentsClient with the specified values.
func NewSubAssessmentsClient(con *armcore.Connection) *SubAssessmentsClient {
	return &SubAssessmentsClient{con: con}
}

// Get - Get a security sub-assessment on your scanned resource
// If the operation fails it returns the *CloudError error type.
func (client *SubAssessmentsClient) Get(ctx context.Context, scope string, assessmentName string, subAssessmentName string, options *SubAssessmentsGetOptions) (SubAssessmentsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, assessmentName, subAssessmentName, options)
	if err != nil {
		return SubAssessmentsGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SubAssessmentsGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SubAssessmentsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SubAssessmentsClient) getCreateRequest(ctx context.Context, scope string, assessmentName string, subAssessmentName string, options *SubAssessmentsGetOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/subAssessments/{subAssessmentName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	if subAssessmentName == "" {
		return nil, errors.New("parameter subAssessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subAssessmentName}", url.PathEscape(subAssessmentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-01-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SubAssessmentsClient) getHandleResponse(resp *azcore.Response) (SubAssessmentsGetResponse, error) {
	result := SubAssessmentsGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecuritySubAssessment); err != nil {
		return SubAssessmentsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SubAssessmentsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Get security sub-assessments on all your scanned resources inside a scope
// If the operation fails it returns the *CloudError error type.
func (client *SubAssessmentsClient) List(scope string, assessmentName string, options *SubAssessmentsListOptions) SubAssessmentsListPager {
	return &subAssessmentsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, scope, assessmentName, options)
		},
		advancer: func(ctx context.Context, resp SubAssessmentsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecuritySubAssessmentList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SubAssessmentsClient) listCreateRequest(ctx context.Context, scope string, assessmentName string, options *SubAssessmentsListOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/subAssessments"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if assessmentName == "" {
		return nil, errors.New("parameter assessmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentName}", url.PathEscape(assessmentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-01-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SubAssessmentsClient) listHandleResponse(resp *azcore.Response) (SubAssessmentsListResponse, error) {
	result := SubAssessmentsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecuritySubAssessmentList); err != nil {
		return SubAssessmentsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SubAssessmentsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListAll - Get security sub-assessments on all your scanned resources inside a subscription scope
// If the operation fails it returns the *CloudError error type.
func (client *SubAssessmentsClient) ListAll(scope string, options *SubAssessmentsListAllOptions) SubAssessmentsListAllPager {
	return &subAssessmentsListAllPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAllCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp SubAssessmentsListAllResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecuritySubAssessmentList.NextLink)
		},
	}
}

// listAllCreateRequest creates the ListAll request.
func (client *SubAssessmentsClient) listAllCreateRequest(ctx context.Context, scope string, options *SubAssessmentsListAllOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Security/subAssessments"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-01-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *SubAssessmentsClient) listAllHandleResponse(resp *azcore.Response) (SubAssessmentsListAllResponse, error) {
	result := SubAssessmentsListAllResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecuritySubAssessmentList); err != nil {
		return SubAssessmentsListAllResponse{}, err
	}
	return result, nil
}

// listAllHandleError handles the ListAll error response.
func (client *SubAssessmentsClient) listAllHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
