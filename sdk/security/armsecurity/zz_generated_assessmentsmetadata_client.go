// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// AssessmentsMetadataClient contains the methods for the AssessmentsMetadata group.
// Don't use this type directly, use NewAssessmentsMetadataClient() instead.
type AssessmentsMetadataClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewAssessmentsMetadataClient creates a new instance of AssessmentsMetadataClient with the specified values.
func NewAssessmentsMetadataClient(con *armcore.Connection, subscriptionID string) *AssessmentsMetadataClient {
	return &AssessmentsMetadataClient{con: con, subscriptionID: subscriptionID}
}

// CreateInSubscription - Create metadata information on an assessment type in a specific subscription
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) CreateInSubscription(ctx context.Context, assessmentMetadataName string, assessmentMetadata SecurityAssessmentMetadata, options *AssessmentsMetadataCreateInSubscriptionOptions) (AssessmentsMetadataCreateInSubscriptionResponse, error) {
	req, err := client.createInSubscriptionCreateRequest(ctx, assessmentMetadataName, assessmentMetadata, options)
	if err != nil {
		return AssessmentsMetadataCreateInSubscriptionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AssessmentsMetadataCreateInSubscriptionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AssessmentsMetadataCreateInSubscriptionResponse{}, client.createInSubscriptionHandleError(resp)
	}
	return client.createInSubscriptionHandleResponse(resp)
}

// createInSubscriptionCreateRequest creates the CreateInSubscription request.
func (client *AssessmentsMetadataClient) createInSubscriptionCreateRequest(ctx context.Context, assessmentMetadataName string, assessmentMetadata SecurityAssessmentMetadata, options *AssessmentsMetadataCreateInSubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
	if assessmentMetadataName == "" {
		return nil, errors.New("parameter assessmentMetadataName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentMetadataName}", url.PathEscape(assessmentMetadataName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(assessmentMetadata)
}

// createInSubscriptionHandleResponse handles the CreateInSubscription response.
func (client *AssessmentsMetadataClient) createInSubscriptionHandleResponse(resp *azcore.Response) (AssessmentsMetadataCreateInSubscriptionResponse, error) {
	result := AssessmentsMetadataCreateInSubscriptionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecurityAssessmentMetadata); err != nil {
		return AssessmentsMetadataCreateInSubscriptionResponse{}, err
	}
	return result, nil
}

// createInSubscriptionHandleError handles the CreateInSubscription error response.
func (client *AssessmentsMetadataClient) createInSubscriptionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// DeleteInSubscription - Delete metadata information on an assessment type in a specific subscription, will cause the deletion of all the assessments of
// that type in that subscription
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) DeleteInSubscription(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataDeleteInSubscriptionOptions) (AssessmentsMetadataDeleteInSubscriptionResponse, error) {
	req, err := client.deleteInSubscriptionCreateRequest(ctx, assessmentMetadataName, options)
	if err != nil {
		return AssessmentsMetadataDeleteInSubscriptionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AssessmentsMetadataDeleteInSubscriptionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AssessmentsMetadataDeleteInSubscriptionResponse{}, client.deleteInSubscriptionHandleError(resp)
	}
	return AssessmentsMetadataDeleteInSubscriptionResponse{RawResponse: resp.Response}, nil
}

// deleteInSubscriptionCreateRequest creates the DeleteInSubscription request.
func (client *AssessmentsMetadataClient) deleteInSubscriptionCreateRequest(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataDeleteInSubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
	if assessmentMetadataName == "" {
		return nil, errors.New("parameter assessmentMetadataName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentMetadataName}", url.PathEscape(assessmentMetadataName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteInSubscriptionHandleError handles the DeleteInSubscription error response.
func (client *AssessmentsMetadataClient) deleteInSubscriptionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Get metadata information on an assessment type
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) Get(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataGetOptions) (AssessmentsMetadataGetResponse, error) {
	req, err := client.getCreateRequest(ctx, assessmentMetadataName, options)
	if err != nil {
		return AssessmentsMetadataGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AssessmentsMetadataGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AssessmentsMetadataGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AssessmentsMetadataClient) getCreateRequest(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataGetOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
	if assessmentMetadataName == "" {
		return nil, errors.New("parameter assessmentMetadataName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentMetadataName}", url.PathEscape(assessmentMetadataName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AssessmentsMetadataClient) getHandleResponse(resp *azcore.Response) (AssessmentsMetadataGetResponse, error) {
	result := AssessmentsMetadataGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecurityAssessmentMetadata); err != nil {
		return AssessmentsMetadataGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *AssessmentsMetadataClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetInSubscription - Get metadata information on an assessment type in a specific subscription
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) GetInSubscription(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataGetInSubscriptionOptions) (AssessmentsMetadataGetInSubscriptionResponse, error) {
	req, err := client.getInSubscriptionCreateRequest(ctx, assessmentMetadataName, options)
	if err != nil {
		return AssessmentsMetadataGetInSubscriptionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AssessmentsMetadataGetInSubscriptionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AssessmentsMetadataGetInSubscriptionResponse{}, client.getInSubscriptionHandleError(resp)
	}
	return client.getInSubscriptionHandleResponse(resp)
}

// getInSubscriptionCreateRequest creates the GetInSubscription request.
func (client *AssessmentsMetadataClient) getInSubscriptionCreateRequest(ctx context.Context, assessmentMetadataName string, options *AssessmentsMetadataGetInSubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}"
	if assessmentMetadataName == "" {
		return nil, errors.New("parameter assessmentMetadataName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{assessmentMetadataName}", url.PathEscape(assessmentMetadataName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getInSubscriptionHandleResponse handles the GetInSubscription response.
func (client *AssessmentsMetadataClient) getInSubscriptionHandleResponse(resp *azcore.Response) (AssessmentsMetadataGetInSubscriptionResponse, error) {
	result := AssessmentsMetadataGetInSubscriptionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecurityAssessmentMetadata); err != nil {
		return AssessmentsMetadataGetInSubscriptionResponse{}, err
	}
	return result, nil
}

// getInSubscriptionHandleError handles the GetInSubscription error response.
func (client *AssessmentsMetadataClient) getInSubscriptionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Get metadata information on all assessment types
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) List(options *AssessmentsMetadataListOptions) AssessmentsMetadataListPager {
	return &assessmentsMetadataListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AssessmentsMetadataListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecurityAssessmentMetadataList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *AssessmentsMetadataClient) listCreateRequest(ctx context.Context, options *AssessmentsMetadataListOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Security/assessmentMetadata"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AssessmentsMetadataClient) listHandleResponse(resp *azcore.Response) (AssessmentsMetadataListResponse, error) {
	result := AssessmentsMetadataListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecurityAssessmentMetadataList); err != nil {
		return AssessmentsMetadataListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *AssessmentsMetadataClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListBySubscription - Get metadata information on all assessment types in a specific subscription
// If the operation fails it returns the *CloudError error type.
func (client *AssessmentsMetadataClient) ListBySubscription(options *AssessmentsMetadataListBySubscriptionOptions) AssessmentsMetadataListBySubscriptionPager {
	return &assessmentsMetadataListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AssessmentsMetadataListBySubscriptionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SecurityAssessmentMetadataList.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AssessmentsMetadataClient) listBySubscriptionCreateRequest(ctx context.Context, options *AssessmentsMetadataListBySubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AssessmentsMetadataClient) listBySubscriptionHandleResponse(resp *azcore.Response) (AssessmentsMetadataListBySubscriptionResponse, error) {
	result := AssessmentsMetadataListBySubscriptionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SecurityAssessmentMetadataList); err != nil {
		return AssessmentsMetadataListBySubscriptionResponse{}, err
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *AssessmentsMetadataClient) listBySubscriptionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
