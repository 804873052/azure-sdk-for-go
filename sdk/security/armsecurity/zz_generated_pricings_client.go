// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// PricingsClient contains the methods for the Pricings group.
// Don't use this type directly, use NewPricingsClient() instead.
type PricingsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewPricingsClient creates a new instance of PricingsClient with the specified values.
func NewPricingsClient(con *armcore.Connection, subscriptionID string) *PricingsClient {
	return &PricingsClient{con: con, subscriptionID: subscriptionID}
}

// Get - Gets a provided Security Center pricing configuration in the subscription.
// If the operation fails it returns the *CloudError error type.
func (client *PricingsClient) Get(ctx context.Context, pricingName string, options *PricingsGetOptions) (PricingsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, pricingName, options)
	if err != nil {
		return PricingsGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PricingsGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PricingsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PricingsClient) getCreateRequest(ctx context.Context, pricingName string, options *PricingsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if pricingName == "" {
		return nil, errors.New("parameter pricingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pricingName}", url.PathEscape(pricingName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PricingsClient) getHandleResponse(resp *azcore.Response) (PricingsGetResponse, error) {
	result := PricingsGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Pricing); err != nil {
		return PricingsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PricingsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Lists Security Center pricing configurations in the subscription.
// If the operation fails it returns the *CloudError error type.
func (client *PricingsClient) List(ctx context.Context, options *PricingsListOptions) (PricingsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return PricingsListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PricingsListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PricingsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *PricingsClient) listCreateRequest(ctx context.Context, options *PricingsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PricingsClient) listHandleResponse(resp *azcore.Response) (PricingsListResponse, error) {
	result := PricingsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PricingList); err != nil {
		return PricingsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PricingsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Update - Updates a provided Security Center pricing configuration in the subscription.
// If the operation fails it returns the *CloudError error type.
func (client *PricingsClient) Update(ctx context.Context, pricingName string, pricing Pricing, options *PricingsUpdateOptions) (PricingsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, pricingName, pricing, options)
	if err != nil {
		return PricingsUpdateResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return PricingsUpdateResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return PricingsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *PricingsClient) updateCreateRequest(ctx context.Context, pricingName string, pricing Pricing, options *PricingsUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if pricingName == "" {
		return nil, errors.New("parameter pricingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{pricingName}", url.PathEscape(pricingName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(pricing)
}

// updateHandleResponse handles the Update response.
func (client *PricingsClient) updateHandleResponse(resp *azcore.Response) (PricingsUpdateResponse, error) {
	result := PricingsUpdateResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Pricing); err != nil {
		return PricingsUpdateResponse{}, err
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *PricingsClient) updateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
