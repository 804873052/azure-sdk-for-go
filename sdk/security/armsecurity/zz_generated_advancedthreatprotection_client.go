// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// AdvancedThreatProtectionClient contains the methods for the AdvancedThreatProtection group.
// Don't use this type directly, use NewAdvancedThreatProtectionClient() instead.
type AdvancedThreatProtectionClient struct {
	con *armcore.Connection
}

// NewAdvancedThreatProtectionClient creates a new instance of AdvancedThreatProtectionClient with the specified values.
func NewAdvancedThreatProtectionClient(con *armcore.Connection) *AdvancedThreatProtectionClient {
	return &AdvancedThreatProtectionClient{con: con}
}

// Create - Creates or updates the Advanced Threat Protection settings on a specified resource.
// If the operation fails it returns the *CloudError error type.
func (client *AdvancedThreatProtectionClient) Create(ctx context.Context, resourceID string, advancedThreatProtectionSetting AdvancedThreatProtectionSetting, options *AdvancedThreatProtectionCreateOptions) (AdvancedThreatProtectionCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceID, advancedThreatProtectionSetting, options)
	if err != nil {
		return AdvancedThreatProtectionCreateResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdvancedThreatProtectionCreateResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AdvancedThreatProtectionCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *AdvancedThreatProtectionClient) createCreateRequest(ctx context.Context, resourceID string, advancedThreatProtectionSetting AdvancedThreatProtectionSetting, options *AdvancedThreatProtectionCreateOptions) (*azcore.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/advancedThreatProtectionSettings/{settingName}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	urlPath = strings.ReplaceAll(urlPath, "{settingName}", url.PathEscape("current"))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(advancedThreatProtectionSetting)
}

// createHandleResponse handles the Create response.
func (client *AdvancedThreatProtectionClient) createHandleResponse(resp *azcore.Response) (AdvancedThreatProtectionCreateResponse, error) {
	result := AdvancedThreatProtectionCreateResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AdvancedThreatProtectionSetting); err != nil {
		return AdvancedThreatProtectionCreateResponse{}, err
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *AdvancedThreatProtectionClient) createHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Gets the Advanced Threat Protection settings for the specified resource.
// If the operation fails it returns the *CloudError error type.
func (client *AdvancedThreatProtectionClient) Get(ctx context.Context, resourceID string, options *AdvancedThreatProtectionGetOptions) (AdvancedThreatProtectionGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceID, options)
	if err != nil {
		return AdvancedThreatProtectionGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AdvancedThreatProtectionGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AdvancedThreatProtectionGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AdvancedThreatProtectionClient) getCreateRequest(ctx context.Context, resourceID string, options *AdvancedThreatProtectionGetOptions) (*azcore.Request, error) {
	urlPath := "/{resourceId}/providers/Microsoft.Security/advancedThreatProtectionSettings/{settingName}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	urlPath = strings.ReplaceAll(urlPath, "{settingName}", url.PathEscape("current"))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2019-01-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AdvancedThreatProtectionClient) getHandleResponse(resp *azcore.Response) (AdvancedThreatProtectionGetResponse, error) {
	result := AdvancedThreatProtectionGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AdvancedThreatProtectionSetting); err != nil {
		return AdvancedThreatProtectionGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *AdvancedThreatProtectionClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType.InnerError); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
