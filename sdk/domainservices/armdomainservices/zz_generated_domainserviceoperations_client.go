//go:build go1.16
// +build go1.16

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.3, generator: @autorest/go@4.0.0-preview.27)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdomainservices

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// DomainServiceOperationsClient contains the methods for the DomainServiceOperations group.
// Don't use this type directly, use NewDomainServiceOperationsClient() instead.
type DomainServiceOperationsClient struct {
	con *connection
}

// NewDomainServiceOperationsClient creates a new instance of DomainServiceOperationsClient with the specified values.
func NewDomainServiceOperationsClient(con *connection) *DomainServiceOperationsClient {
	return &DomainServiceOperationsClient{con: con}
}

// List - Lists all the available Domain Services operations.
// If the operation fails it returns the *CloudError error type.
func (client *DomainServiceOperationsClient) List(options *DomainServiceOperationsListOptions) *DomainServiceOperationsListPager {
	return &DomainServiceOperationsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DomainServiceOperationsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OperationEntityListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *DomainServiceOperationsClient) listCreateRequest(ctx context.Context, options *DomainServiceOperationsListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AAD/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DomainServiceOperationsClient) listHandleResponse(resp *http.Response) (DomainServiceOperationsListResponse, error) {
	result := DomainServiceOperationsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationEntityListResult); err != nil {
		return DomainServiceOperationsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *DomainServiceOperationsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
