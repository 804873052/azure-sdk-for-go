// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type AvailabilitySetsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current AvailabilitySetsListBySubscriptionResponse.
	PageResponse() AvailabilitySetsListBySubscriptionResponse
}

type availabilitySetsListBySubscriptionPager struct {
	client    *AvailabilitySetsClient
	current   AvailabilitySetsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailabilitySetsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *availabilitySetsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *availabilitySetsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilitySetListResult.NextLink == nil || len(*p.current.AvailabilitySetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availabilitySetsListBySubscriptionPager) PageResponse() AvailabilitySetsListBySubscriptionResponse {
	return p.current
}

type AvailabilitySetsListPager interface {
	azcore.Pager
	// PageResponse returns the current AvailabilitySetsListResponse.
	PageResponse() AvailabilitySetsListResponse
}

type availabilitySetsListPager struct {
	client    *AvailabilitySetsClient
	current   AvailabilitySetsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AvailabilitySetsListResponse) (*azcore.Request, error)
}

func (p *availabilitySetsListPager) Err() error {
	return p.err
}

func (p *availabilitySetsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilitySetListResult.NextLink == nil || len(*p.current.AvailabilitySetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *availabilitySetsListPager) PageResponse() AvailabilitySetsListResponse {
	return p.current
}

type CloudServiceOperatingSystemsListOSFamiliesPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServiceOperatingSystemsListOSFamiliesResponse.
	PageResponse() CloudServiceOperatingSystemsListOSFamiliesResponse
}

type cloudServiceOperatingSystemsListOSFamiliesPager struct {
	client    *CloudServiceOperatingSystemsClient
	current   CloudServiceOperatingSystemsListOSFamiliesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServiceOperatingSystemsListOSFamiliesResponse) (*azcore.Request, error)
}

func (p *cloudServiceOperatingSystemsListOSFamiliesPager) Err() error {
	return p.err
}

func (p *cloudServiceOperatingSystemsListOSFamiliesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OSFamilyListResult.NextLink == nil || len(*p.current.OSFamilyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOSFamiliesHandleError(resp)
		return false
	}
	result, err := p.client.listOSFamiliesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServiceOperatingSystemsListOSFamiliesPager) PageResponse() CloudServiceOperatingSystemsListOSFamiliesResponse {
	return p.current
}

type CloudServiceOperatingSystemsListOSVersionsPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServiceOperatingSystemsListOSVersionsResponse.
	PageResponse() CloudServiceOperatingSystemsListOSVersionsResponse
}

type cloudServiceOperatingSystemsListOSVersionsPager struct {
	client    *CloudServiceOperatingSystemsClient
	current   CloudServiceOperatingSystemsListOSVersionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServiceOperatingSystemsListOSVersionsResponse) (*azcore.Request, error)
}

func (p *cloudServiceOperatingSystemsListOSVersionsPager) Err() error {
	return p.err
}

func (p *cloudServiceOperatingSystemsListOSVersionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OSVersionListResult.NextLink == nil || len(*p.current.OSVersionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOSVersionsHandleError(resp)
		return false
	}
	result, err := p.client.listOSVersionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServiceOperatingSystemsListOSVersionsPager) PageResponse() CloudServiceOperatingSystemsListOSVersionsResponse {
	return p.current
}

type CloudServiceRoleInstancesListPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServiceRoleInstancesListResponse.
	PageResponse() CloudServiceRoleInstancesListResponse
}

type cloudServiceRoleInstancesListPager struct {
	client    *CloudServiceRoleInstancesClient
	current   CloudServiceRoleInstancesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServiceRoleInstancesListResponse) (*azcore.Request, error)
}

func (p *cloudServiceRoleInstancesListPager) Err() error {
	return p.err
}

func (p *cloudServiceRoleInstancesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RoleInstanceListResult.NextLink == nil || len(*p.current.RoleInstanceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServiceRoleInstancesListPager) PageResponse() CloudServiceRoleInstancesListResponse {
	return p.current
}

type CloudServiceRolesListPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServiceRolesListResponse.
	PageResponse() CloudServiceRolesListResponse
}

type cloudServiceRolesListPager struct {
	client    *CloudServiceRolesClient
	current   CloudServiceRolesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServiceRolesListResponse) (*azcore.Request, error)
}

func (p *cloudServiceRolesListPager) Err() error {
	return p.err
}

func (p *cloudServiceRolesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CloudServiceRoleListResult.NextLink == nil || len(*p.current.CloudServiceRoleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServiceRolesListPager) PageResponse() CloudServiceRolesListResponse {
	return p.current
}

type CloudServicesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServicesListAllResponse.
	PageResponse() CloudServicesListAllResponse
}

type cloudServicesListAllPager struct {
	client    *CloudServicesClient
	current   CloudServicesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServicesListAllResponse) (*azcore.Request, error)
}

func (p *cloudServicesListAllPager) Err() error {
	return p.err
}

func (p *cloudServicesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CloudServiceListResult.NextLink == nil || len(*p.current.CloudServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServicesListAllPager) PageResponse() CloudServicesListAllResponse {
	return p.current
}

type CloudServicesListPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServicesListResponse.
	PageResponse() CloudServicesListResponse
}

type cloudServicesListPager struct {
	client    *CloudServicesClient
	current   CloudServicesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServicesListResponse) (*azcore.Request, error)
}

func (p *cloudServicesListPager) Err() error {
	return p.err
}

func (p *cloudServicesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CloudServiceListResult.NextLink == nil || len(*p.current.CloudServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServicesListPager) PageResponse() CloudServicesListResponse {
	return p.current
}

type CloudServicesUpdateDomainListUpdateDomainsPager interface {
	azcore.Pager
	// PageResponse returns the current CloudServicesUpdateDomainListUpdateDomainsResponse.
	PageResponse() CloudServicesUpdateDomainListUpdateDomainsResponse
}

type cloudServicesUpdateDomainListUpdateDomainsPager struct {
	client    *CloudServicesUpdateDomainClient
	current   CloudServicesUpdateDomainListUpdateDomainsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CloudServicesUpdateDomainListUpdateDomainsResponse) (*azcore.Request, error)
}

func (p *cloudServicesUpdateDomainListUpdateDomainsPager) Err() error {
	return p.err
}

func (p *cloudServicesUpdateDomainListUpdateDomainsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UpdateDomainListResult.NextLink == nil || len(*p.current.UpdateDomainListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUpdateDomainsHandleError(resp)
		return false
	}
	result, err := p.client.listUpdateDomainsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cloudServicesUpdateDomainListUpdateDomainsPager) PageResponse() CloudServicesUpdateDomainListUpdateDomainsResponse {
	return p.current
}

type DedicatedHostGroupsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DedicatedHostGroupsListByResourceGroupResponse.
	PageResponse() DedicatedHostGroupsListByResourceGroupResponse
}

type dedicatedHostGroupsListByResourceGroupPager struct {
	client    *DedicatedHostGroupsClient
	current   DedicatedHostGroupsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DedicatedHostGroupsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *dedicatedHostGroupsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *dedicatedHostGroupsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedHostGroupListResult.NextLink == nil || len(*p.current.DedicatedHostGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dedicatedHostGroupsListByResourceGroupPager) PageResponse() DedicatedHostGroupsListByResourceGroupResponse {
	return p.current
}

type DedicatedHostGroupsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current DedicatedHostGroupsListBySubscriptionResponse.
	PageResponse() DedicatedHostGroupsListBySubscriptionResponse
}

type dedicatedHostGroupsListBySubscriptionPager struct {
	client    *DedicatedHostGroupsClient
	current   DedicatedHostGroupsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DedicatedHostGroupsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *dedicatedHostGroupsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *dedicatedHostGroupsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedHostGroupListResult.NextLink == nil || len(*p.current.DedicatedHostGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dedicatedHostGroupsListBySubscriptionPager) PageResponse() DedicatedHostGroupsListBySubscriptionResponse {
	return p.current
}

type DedicatedHostsListByHostGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DedicatedHostsListByHostGroupResponse.
	PageResponse() DedicatedHostsListByHostGroupResponse
}

type dedicatedHostsListByHostGroupPager struct {
	client    *DedicatedHostsClient
	current   DedicatedHostsListByHostGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DedicatedHostsListByHostGroupResponse) (*azcore.Request, error)
}

func (p *dedicatedHostsListByHostGroupPager) Err() error {
	return p.err
}

func (p *dedicatedHostsListByHostGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedHostListResult.NextLink == nil || len(*p.current.DedicatedHostListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByHostGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByHostGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dedicatedHostsListByHostGroupPager) PageResponse() DedicatedHostsListByHostGroupResponse {
	return p.current
}

type DiskAccessesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DiskAccessesListByResourceGroupResponse.
	PageResponse() DiskAccessesListByResourceGroupResponse
}

type diskAccessesListByResourceGroupPager struct {
	client    *DiskAccessesClient
	current   DiskAccessesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskAccessesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *diskAccessesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *diskAccessesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskAccessList.NextLink == nil || len(*p.current.DiskAccessList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskAccessesListByResourceGroupPager) PageResponse() DiskAccessesListByResourceGroupResponse {
	return p.current
}

type DiskAccessesListPager interface {
	azcore.Pager
	// PageResponse returns the current DiskAccessesListResponse.
	PageResponse() DiskAccessesListResponse
}

type diskAccessesListPager struct {
	client    *DiskAccessesClient
	current   DiskAccessesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskAccessesListResponse) (*azcore.Request, error)
}

func (p *diskAccessesListPager) Err() error {
	return p.err
}

func (p *diskAccessesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskAccessList.NextLink == nil || len(*p.current.DiskAccessList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskAccessesListPager) PageResponse() DiskAccessesListResponse {
	return p.current
}

type DiskAccessesListPrivateEndpointConnectionsPager interface {
	azcore.Pager
	// PageResponse returns the current DiskAccessesListPrivateEndpointConnectionsResponse.
	PageResponse() DiskAccessesListPrivateEndpointConnectionsResponse
}

type diskAccessesListPrivateEndpointConnectionsPager struct {
	client    *DiskAccessesClient
	current   DiskAccessesListPrivateEndpointConnectionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskAccessesListPrivateEndpointConnectionsResponse) (*azcore.Request, error)
}

func (p *diskAccessesListPrivateEndpointConnectionsPager) Err() error {
	return p.err
}

func (p *diskAccessesListPrivateEndpointConnectionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPrivateEndpointConnectionsHandleError(resp)
		return false
	}
	result, err := p.client.listPrivateEndpointConnectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskAccessesListPrivateEndpointConnectionsPager) PageResponse() DiskAccessesListPrivateEndpointConnectionsResponse {
	return p.current
}

type DiskEncryptionSetsListAssociatedResourcesPager interface {
	azcore.Pager
	// PageResponse returns the current DiskEncryptionSetsListAssociatedResourcesResponse.
	PageResponse() DiskEncryptionSetsListAssociatedResourcesResponse
}

type diskEncryptionSetsListAssociatedResourcesPager struct {
	client    *DiskEncryptionSetsClient
	current   DiskEncryptionSetsListAssociatedResourcesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskEncryptionSetsListAssociatedResourcesResponse) (*azcore.Request, error)
}

func (p *diskEncryptionSetsListAssociatedResourcesPager) Err() error {
	return p.err
}

func (p *diskEncryptionSetsListAssociatedResourcesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceURIList.NextLink == nil || len(*p.current.ResourceURIList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAssociatedResourcesHandleError(resp)
		return false
	}
	result, err := p.client.listAssociatedResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskEncryptionSetsListAssociatedResourcesPager) PageResponse() DiskEncryptionSetsListAssociatedResourcesResponse {
	return p.current
}

type DiskEncryptionSetsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DiskEncryptionSetsListByResourceGroupResponse.
	PageResponse() DiskEncryptionSetsListByResourceGroupResponse
}

type diskEncryptionSetsListByResourceGroupPager struct {
	client    *DiskEncryptionSetsClient
	current   DiskEncryptionSetsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskEncryptionSetsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *diskEncryptionSetsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *diskEncryptionSetsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskEncryptionSetList.NextLink == nil || len(*p.current.DiskEncryptionSetList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskEncryptionSetsListByResourceGroupPager) PageResponse() DiskEncryptionSetsListByResourceGroupResponse {
	return p.current
}

type DiskEncryptionSetsListPager interface {
	azcore.Pager
	// PageResponse returns the current DiskEncryptionSetsListResponse.
	PageResponse() DiskEncryptionSetsListResponse
}

type diskEncryptionSetsListPager struct {
	client    *DiskEncryptionSetsClient
	current   DiskEncryptionSetsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskEncryptionSetsListResponse) (*azcore.Request, error)
}

func (p *diskEncryptionSetsListPager) Err() error {
	return p.err
}

func (p *diskEncryptionSetsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskEncryptionSetList.NextLink == nil || len(*p.current.DiskEncryptionSetList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskEncryptionSetsListPager) PageResponse() DiskEncryptionSetsListResponse {
	return p.current
}

type DiskRestorePointListByRestorePointPager interface {
	azcore.Pager
	// PageResponse returns the current DiskRestorePointListByRestorePointResponse.
	PageResponse() DiskRestorePointListByRestorePointResponse
}

type diskRestorePointListByRestorePointPager struct {
	client    *DiskRestorePointClient
	current   DiskRestorePointListByRestorePointResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiskRestorePointListByRestorePointResponse) (*azcore.Request, error)
}

func (p *diskRestorePointListByRestorePointPager) Err() error {
	return p.err
}

func (p *diskRestorePointListByRestorePointPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskRestorePointList.NextLink == nil || len(*p.current.DiskRestorePointList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByRestorePointHandleError(resp)
		return false
	}
	result, err := p.client.listByRestorePointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diskRestorePointListByRestorePointPager) PageResponse() DiskRestorePointListByRestorePointResponse {
	return p.current
}

type DisksListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DisksListByResourceGroupResponse.
	PageResponse() DisksListByResourceGroupResponse
}

type disksListByResourceGroupPager struct {
	client    *DisksClient
	current   DisksListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DisksListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *disksListByResourceGroupPager) Err() error {
	return p.err
}

func (p *disksListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskList.NextLink == nil || len(*p.current.DiskList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *disksListByResourceGroupPager) PageResponse() DisksListByResourceGroupResponse {
	return p.current
}

type DisksListPager interface {
	azcore.Pager
	// PageResponse returns the current DisksListResponse.
	PageResponse() DisksListResponse
}

type disksListPager struct {
	client    *DisksClient
	current   DisksListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DisksListResponse) (*azcore.Request, error)
}

func (p *disksListPager) Err() error {
	return p.err
}

func (p *disksListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskList.NextLink == nil || len(*p.current.DiskList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *disksListPager) PageResponse() DisksListResponse {
	return p.current
}

type GalleriesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current GalleriesListByResourceGroupResponse.
	PageResponse() GalleriesListByResourceGroupResponse
}

type galleriesListByResourceGroupPager struct {
	client    *GalleriesClient
	current   GalleriesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleriesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *galleriesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *galleriesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryList.NextLink == nil || len(*p.current.GalleryList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleriesListByResourceGroupPager) PageResponse() GalleriesListByResourceGroupResponse {
	return p.current
}

type GalleriesListPager interface {
	azcore.Pager
	// PageResponse returns the current GalleriesListResponse.
	PageResponse() GalleriesListResponse
}

type galleriesListPager struct {
	client    *GalleriesClient
	current   GalleriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleriesListResponse) (*azcore.Request, error)
}

func (p *galleriesListPager) Err() error {
	return p.err
}

func (p *galleriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryList.NextLink == nil || len(*p.current.GalleryList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleriesListPager) PageResponse() GalleriesListResponse {
	return p.current
}

type GalleryApplicationVersionsListByGalleryApplicationPager interface {
	azcore.Pager
	// PageResponse returns the current GalleryApplicationVersionsListByGalleryApplicationResponse.
	PageResponse() GalleryApplicationVersionsListByGalleryApplicationResponse
}

type galleryApplicationVersionsListByGalleryApplicationPager struct {
	client    *GalleryApplicationVersionsClient
	current   GalleryApplicationVersionsListByGalleryApplicationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleryApplicationVersionsListByGalleryApplicationResponse) (*azcore.Request, error)
}

func (p *galleryApplicationVersionsListByGalleryApplicationPager) Err() error {
	return p.err
}

func (p *galleryApplicationVersionsListByGalleryApplicationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryApplicationVersionList.NextLink == nil || len(*p.current.GalleryApplicationVersionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByGalleryApplicationHandleError(resp)
		return false
	}
	result, err := p.client.listByGalleryApplicationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleryApplicationVersionsListByGalleryApplicationPager) PageResponse() GalleryApplicationVersionsListByGalleryApplicationResponse {
	return p.current
}

type GalleryApplicationsListByGalleryPager interface {
	azcore.Pager
	// PageResponse returns the current GalleryApplicationsListByGalleryResponse.
	PageResponse() GalleryApplicationsListByGalleryResponse
}

type galleryApplicationsListByGalleryPager struct {
	client    *GalleryApplicationsClient
	current   GalleryApplicationsListByGalleryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleryApplicationsListByGalleryResponse) (*azcore.Request, error)
}

func (p *galleryApplicationsListByGalleryPager) Err() error {
	return p.err
}

func (p *galleryApplicationsListByGalleryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryApplicationList.NextLink == nil || len(*p.current.GalleryApplicationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByGalleryHandleError(resp)
		return false
	}
	result, err := p.client.listByGalleryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleryApplicationsListByGalleryPager) PageResponse() GalleryApplicationsListByGalleryResponse {
	return p.current
}

type GalleryImageVersionsListByGalleryImagePager interface {
	azcore.Pager
	// PageResponse returns the current GalleryImageVersionsListByGalleryImageResponse.
	PageResponse() GalleryImageVersionsListByGalleryImageResponse
}

type galleryImageVersionsListByGalleryImagePager struct {
	client    *GalleryImageVersionsClient
	current   GalleryImageVersionsListByGalleryImageResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleryImageVersionsListByGalleryImageResponse) (*azcore.Request, error)
}

func (p *galleryImageVersionsListByGalleryImagePager) Err() error {
	return p.err
}

func (p *galleryImageVersionsListByGalleryImagePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryImageVersionList.NextLink == nil || len(*p.current.GalleryImageVersionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByGalleryImageHandleError(resp)
		return false
	}
	result, err := p.client.listByGalleryImageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleryImageVersionsListByGalleryImagePager) PageResponse() GalleryImageVersionsListByGalleryImageResponse {
	return p.current
}

type GalleryImagesListByGalleryPager interface {
	azcore.Pager
	// PageResponse returns the current GalleryImagesListByGalleryResponse.
	PageResponse() GalleryImagesListByGalleryResponse
}

type galleryImagesListByGalleryPager struct {
	client    *GalleryImagesClient
	current   GalleryImagesListByGalleryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GalleryImagesListByGalleryResponse) (*azcore.Request, error)
}

func (p *galleryImagesListByGalleryPager) Err() error {
	return p.err
}

func (p *galleryImagesListByGalleryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GalleryImageList.NextLink == nil || len(*p.current.GalleryImageList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByGalleryHandleError(resp)
		return false
	}
	result, err := p.client.listByGalleryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *galleryImagesListByGalleryPager) PageResponse() GalleryImagesListByGalleryResponse {
	return p.current
}

type ImagesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ImagesListByResourceGroupResponse.
	PageResponse() ImagesListByResourceGroupResponse
}

type imagesListByResourceGroupPager struct {
	client    *ImagesClient
	current   ImagesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ImagesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *imagesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *imagesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ImageListResult.NextLink == nil || len(*p.current.ImageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *imagesListByResourceGroupPager) PageResponse() ImagesListByResourceGroupResponse {
	return p.current
}

type ImagesListPager interface {
	azcore.Pager
	// PageResponse returns the current ImagesListResponse.
	PageResponse() ImagesListResponse
}

type imagesListPager struct {
	client    *ImagesClient
	current   ImagesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ImagesListResponse) (*azcore.Request, error)
}

func (p *imagesListPager) Err() error {
	return p.err
}

func (p *imagesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ImageListResult.NextLink == nil || len(*p.current.ImageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *imagesListPager) PageResponse() ImagesListResponse {
	return p.current
}

type ProximityPlacementGroupsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ProximityPlacementGroupsListByResourceGroupResponse.
	PageResponse() ProximityPlacementGroupsListByResourceGroupResponse
}

type proximityPlacementGroupsListByResourceGroupPager struct {
	client    *ProximityPlacementGroupsClient
	current   ProximityPlacementGroupsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProximityPlacementGroupsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *proximityPlacementGroupsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *proximityPlacementGroupsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProximityPlacementGroupListResult.NextLink == nil || len(*p.current.ProximityPlacementGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *proximityPlacementGroupsListByResourceGroupPager) PageResponse() ProximityPlacementGroupsListByResourceGroupResponse {
	return p.current
}

type ProximityPlacementGroupsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current ProximityPlacementGroupsListBySubscriptionResponse.
	PageResponse() ProximityPlacementGroupsListBySubscriptionResponse
}

type proximityPlacementGroupsListBySubscriptionPager struct {
	client    *ProximityPlacementGroupsClient
	current   ProximityPlacementGroupsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProximityPlacementGroupsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *proximityPlacementGroupsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *proximityPlacementGroupsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProximityPlacementGroupListResult.NextLink == nil || len(*p.current.ProximityPlacementGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *proximityPlacementGroupsListBySubscriptionPager) PageResponse() ProximityPlacementGroupsListBySubscriptionResponse {
	return p.current
}

type ResourceSKUsListPager interface {
	azcore.Pager
	// PageResponse returns the current ResourceSKUsListResponse.
	PageResponse() ResourceSKUsListResponse
}

type resourceSKUsListPager struct {
	client    *ResourceSKUsClient
	current   ResourceSKUsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceSKUsListResponse) (*azcore.Request, error)
}

func (p *resourceSKUsListPager) Err() error {
	return p.err
}

func (p *resourceSKUsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUsResult.NextLink == nil || len(*p.current.ResourceSKUsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceSKUsListPager) PageResponse() ResourceSKUsListResponse {
	return p.current
}

type RestorePointCollectionsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current RestorePointCollectionsListAllResponse.
	PageResponse() RestorePointCollectionsListAllResponse
}

type restorePointCollectionsListAllPager struct {
	client    *RestorePointCollectionsClient
	current   RestorePointCollectionsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RestorePointCollectionsListAllResponse) (*azcore.Request, error)
}

func (p *restorePointCollectionsListAllPager) Err() error {
	return p.err
}

func (p *restorePointCollectionsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RestorePointCollectionListResult.NextLink == nil || len(*p.current.RestorePointCollectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *restorePointCollectionsListAllPager) PageResponse() RestorePointCollectionsListAllResponse {
	return p.current
}

type RestorePointCollectionsListPager interface {
	azcore.Pager
	// PageResponse returns the current RestorePointCollectionsListResponse.
	PageResponse() RestorePointCollectionsListResponse
}

type restorePointCollectionsListPager struct {
	client    *RestorePointCollectionsClient
	current   RestorePointCollectionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RestorePointCollectionsListResponse) (*azcore.Request, error)
}

func (p *restorePointCollectionsListPager) Err() error {
	return p.err
}

func (p *restorePointCollectionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RestorePointCollectionListResult.NextLink == nil || len(*p.current.RestorePointCollectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *restorePointCollectionsListPager) PageResponse() RestorePointCollectionsListResponse {
	return p.current
}

type SSHPublicKeysListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current SSHPublicKeysListByResourceGroupResponse.
	PageResponse() SSHPublicKeysListByResourceGroupResponse
}

type sshPublicKeysListByResourceGroupPager struct {
	client    *SSHPublicKeysClient
	current   SSHPublicKeysListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SSHPublicKeysListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *sshPublicKeysListByResourceGroupPager) Err() error {
	return p.err
}

func (p *sshPublicKeysListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SSHPublicKeysGroupListResult.NextLink == nil || len(*p.current.SSHPublicKeysGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sshPublicKeysListByResourceGroupPager) PageResponse() SSHPublicKeysListByResourceGroupResponse {
	return p.current
}

type SSHPublicKeysListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current SSHPublicKeysListBySubscriptionResponse.
	PageResponse() SSHPublicKeysListBySubscriptionResponse
}

type sshPublicKeysListBySubscriptionPager struct {
	client    *SSHPublicKeysClient
	current   SSHPublicKeysListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SSHPublicKeysListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *sshPublicKeysListBySubscriptionPager) Err() error {
	return p.err
}

func (p *sshPublicKeysListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SSHPublicKeysGroupListResult.NextLink == nil || len(*p.current.SSHPublicKeysGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sshPublicKeysListBySubscriptionPager) PageResponse() SSHPublicKeysListBySubscriptionResponse {
	return p.current
}

type SharedGalleriesListPager interface {
	azcore.Pager
	// PageResponse returns the current SharedGalleriesListResponse.
	PageResponse() SharedGalleriesListResponse
}

type sharedGalleriesListPager struct {
	client    *SharedGalleriesClient
	current   SharedGalleriesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SharedGalleriesListResponse) (*azcore.Request, error)
}

func (p *sharedGalleriesListPager) Err() error {
	return p.err
}

func (p *sharedGalleriesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedGalleryList.NextLink == nil || len(*p.current.SharedGalleryList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sharedGalleriesListPager) PageResponse() SharedGalleriesListResponse {
	return p.current
}

type SharedGalleryImageVersionsListPager interface {
	azcore.Pager
	// PageResponse returns the current SharedGalleryImageVersionsListResponse.
	PageResponse() SharedGalleryImageVersionsListResponse
}

type sharedGalleryImageVersionsListPager struct {
	client    *SharedGalleryImageVersionsClient
	current   SharedGalleryImageVersionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SharedGalleryImageVersionsListResponse) (*azcore.Request, error)
}

func (p *sharedGalleryImageVersionsListPager) Err() error {
	return p.err
}

func (p *sharedGalleryImageVersionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedGalleryImageVersionList.NextLink == nil || len(*p.current.SharedGalleryImageVersionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sharedGalleryImageVersionsListPager) PageResponse() SharedGalleryImageVersionsListResponse {
	return p.current
}

type SharedGalleryImagesListPager interface {
	azcore.Pager
	// PageResponse returns the current SharedGalleryImagesListResponse.
	PageResponse() SharedGalleryImagesListResponse
}

type sharedGalleryImagesListPager struct {
	client    *SharedGalleryImagesClient
	current   SharedGalleryImagesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SharedGalleryImagesListResponse) (*azcore.Request, error)
}

func (p *sharedGalleryImagesListPager) Err() error {
	return p.err
}

func (p *sharedGalleryImagesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedGalleryImageList.NextLink == nil || len(*p.current.SharedGalleryImageList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sharedGalleryImagesListPager) PageResponse() SharedGalleryImagesListResponse {
	return p.current
}

type SnapshotsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current SnapshotsListByResourceGroupResponse.
	PageResponse() SnapshotsListByResourceGroupResponse
}

type snapshotsListByResourceGroupPager struct {
	client    *SnapshotsClient
	current   SnapshotsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SnapshotsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *snapshotsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *snapshotsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotList.NextLink == nil || len(*p.current.SnapshotList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *snapshotsListByResourceGroupPager) PageResponse() SnapshotsListByResourceGroupResponse {
	return p.current
}

type SnapshotsListPager interface {
	azcore.Pager
	// PageResponse returns the current SnapshotsListResponse.
	PageResponse() SnapshotsListResponse
}

type snapshotsListPager struct {
	client    *SnapshotsClient
	current   SnapshotsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SnapshotsListResponse) (*azcore.Request, error)
}

func (p *snapshotsListPager) Err() error {
	return p.err
}

func (p *snapshotsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotList.NextLink == nil || len(*p.current.SnapshotList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *snapshotsListPager) PageResponse() SnapshotsListResponse {
	return p.current
}

type UsageListPager interface {
	azcore.Pager
	// PageResponse returns the current UsageListResponse.
	PageResponse() UsageListResponse
}

type usageListPager struct {
	client    *UsageClient
	current   UsageListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UsageListResponse) (*azcore.Request, error)
}

func (p *usageListPager) Err() error {
	return p.err
}

func (p *usageListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListUsagesResult.NextLink == nil || len(*p.current.ListUsagesResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *usageListPager) PageResponse() UsageListResponse {
	return p.current
}

type VirtualMachineRunCommandsListByVirtualMachinePager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineRunCommandsListByVirtualMachineResponse.
	PageResponse() VirtualMachineRunCommandsListByVirtualMachineResponse
}

type virtualMachineRunCommandsListByVirtualMachinePager struct {
	client    *VirtualMachineRunCommandsClient
	current   VirtualMachineRunCommandsListByVirtualMachineResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineRunCommandsListByVirtualMachineResponse) (*azcore.Request, error)
}

func (p *virtualMachineRunCommandsListByVirtualMachinePager) Err() error {
	return p.err
}

func (p *virtualMachineRunCommandsListByVirtualMachinePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineRunCommandsListResult.NextLink == nil || len(*p.current.VirtualMachineRunCommandsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByVirtualMachineHandleError(resp)
		return false
	}
	result, err := p.client.listByVirtualMachineHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineRunCommandsListByVirtualMachinePager) PageResponse() VirtualMachineRunCommandsListByVirtualMachineResponse {
	return p.current
}

type VirtualMachineRunCommandsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineRunCommandsListResponse.
	PageResponse() VirtualMachineRunCommandsListResponse
}

type virtualMachineRunCommandsListPager struct {
	client    *VirtualMachineRunCommandsClient
	current   VirtualMachineRunCommandsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineRunCommandsListResponse) (*azcore.Request, error)
}

func (p *virtualMachineRunCommandsListPager) Err() error {
	return p.err
}

func (p *virtualMachineRunCommandsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RunCommandListResult.NextLink == nil || len(*p.current.RunCommandListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineRunCommandsListPager) PageResponse() VirtualMachineRunCommandsListResponse {
	return p.current
}

type VirtualMachineScaleSetExtensionsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetExtensionsListResponse.
	PageResponse() VirtualMachineScaleSetExtensionsListResponse
}

type virtualMachineScaleSetExtensionsListPager struct {
	client    *VirtualMachineScaleSetExtensionsClient
	current   VirtualMachineScaleSetExtensionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetExtensionsListResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetExtensionsListPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetExtensionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetExtensionListResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetExtensionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetExtensionsListPager) PageResponse() VirtualMachineScaleSetExtensionsListResponse {
	return p.current
}

type VirtualMachineScaleSetVMRunCommandsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetVMRunCommandsListResponse.
	PageResponse() VirtualMachineScaleSetVMRunCommandsListResponse
}

type virtualMachineScaleSetVMRunCommandsListPager struct {
	client    *VirtualMachineScaleSetVMRunCommandsClient
	current   VirtualMachineScaleSetVMRunCommandsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetVMRunCommandsListResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetVMRunCommandsListPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetVMRunCommandsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineRunCommandsListResult.NextLink == nil || len(*p.current.VirtualMachineRunCommandsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetVMRunCommandsListPager) PageResponse() VirtualMachineScaleSetVMRunCommandsListResponse {
	return p.current
}

type VirtualMachineScaleSetVMsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetVMsListResponse.
	PageResponse() VirtualMachineScaleSetVMsListResponse
}

type virtualMachineScaleSetVMsListPager struct {
	client    *VirtualMachineScaleSetVMsClient
	current   VirtualMachineScaleSetVMsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetVMsListResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetVMsListPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetVMsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetVMListResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetVMListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetVMsListPager) PageResponse() VirtualMachineScaleSetVMsListResponse {
	return p.current
}

type VirtualMachineScaleSetsGetOSUpgradeHistoryPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetsGetOSUpgradeHistoryResponse.
	PageResponse() VirtualMachineScaleSetsGetOSUpgradeHistoryResponse
}

type virtualMachineScaleSetsGetOSUpgradeHistoryPager struct {
	client    *VirtualMachineScaleSetsClient
	current   VirtualMachineScaleSetsGetOSUpgradeHistoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetsGetOSUpgradeHistoryResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetsGetOSUpgradeHistoryPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetsGetOSUpgradeHistoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetListOSUpgradeHistory.NextLink == nil || len(*p.current.VirtualMachineScaleSetListOSUpgradeHistory.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getOSUpgradeHistoryHandleError(resp)
		return false
	}
	result, err := p.client.getOSUpgradeHistoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetsGetOSUpgradeHistoryPager) PageResponse() VirtualMachineScaleSetsGetOSUpgradeHistoryResponse {
	return p.current
}

type VirtualMachineScaleSetsListAllPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetsListAllResponse.
	PageResponse() VirtualMachineScaleSetsListAllResponse
}

type virtualMachineScaleSetsListAllPager struct {
	client    *VirtualMachineScaleSetsClient
	current   VirtualMachineScaleSetsListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetsListAllResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetsListAllPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetsListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetListWithLinkResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetListWithLinkResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetsListAllPager) PageResponse() VirtualMachineScaleSetsListAllResponse {
	return p.current
}

type VirtualMachineScaleSetsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetsListByLocationResponse.
	PageResponse() VirtualMachineScaleSetsListByLocationResponse
}

type virtualMachineScaleSetsListByLocationPager struct {
	client    *VirtualMachineScaleSetsClient
	current   VirtualMachineScaleSetsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetsListByLocationResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetsListByLocationPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetListResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetsListByLocationPager) PageResponse() VirtualMachineScaleSetsListByLocationResponse {
	return p.current
}

type VirtualMachineScaleSetsListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetsListResponse.
	PageResponse() VirtualMachineScaleSetsListResponse
}

type virtualMachineScaleSetsListPager struct {
	client    *VirtualMachineScaleSetsClient
	current   VirtualMachineScaleSetsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetsListResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetsListPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetListResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetsListPager) PageResponse() VirtualMachineScaleSetsListResponse {
	return p.current
}

type VirtualMachineScaleSetsListSKUsPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachineScaleSetsListSKUsResponse.
	PageResponse() VirtualMachineScaleSetsListSKUsResponse
}

type virtualMachineScaleSetsListSKUsPager struct {
	client    *VirtualMachineScaleSetsClient
	current   VirtualMachineScaleSetsListSKUsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachineScaleSetsListSKUsResponse) (*azcore.Request, error)
}

func (p *virtualMachineScaleSetsListSKUsPager) Err() error {
	return p.err
}

func (p *virtualMachineScaleSetsListSKUsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineScaleSetListSKUsResult.NextLink == nil || len(*p.current.VirtualMachineScaleSetListSKUsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachineScaleSetsListSKUsPager) PageResponse() VirtualMachineScaleSetsListSKUsResponse {
	return p.current
}

type VirtualMachinesListAllPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachinesListAllResponse.
	PageResponse() VirtualMachinesListAllResponse
}

type virtualMachinesListAllPager struct {
	client    *VirtualMachinesClient
	current   VirtualMachinesListAllResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachinesListAllResponse) (*azcore.Request, error)
}

func (p *virtualMachinesListAllPager) Err() error {
	return p.err
}

func (p *virtualMachinesListAllPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineListResult.NextLink == nil || len(*p.current.VirtualMachineListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachinesListAllPager) PageResponse() VirtualMachinesListAllResponse {
	return p.current
}

type VirtualMachinesListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachinesListByLocationResponse.
	PageResponse() VirtualMachinesListByLocationResponse
}

type virtualMachinesListByLocationPager struct {
	client    *VirtualMachinesClient
	current   VirtualMachinesListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachinesListByLocationResponse) (*azcore.Request, error)
}

func (p *virtualMachinesListByLocationPager) Err() error {
	return p.err
}

func (p *virtualMachinesListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineListResult.NextLink == nil || len(*p.current.VirtualMachineListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachinesListByLocationPager) PageResponse() VirtualMachinesListByLocationResponse {
	return p.current
}

type VirtualMachinesListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualMachinesListResponse.
	PageResponse() VirtualMachinesListResponse
}

type virtualMachinesListPager struct {
	client    *VirtualMachinesClient
	current   VirtualMachinesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualMachinesListResponse) (*azcore.Request, error)
}

func (p *virtualMachinesListPager) Err() error {
	return p.err
}

func (p *virtualMachinesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineListResult.NextLink == nil || len(*p.current.VirtualMachineListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualMachinesListPager) PageResponse() VirtualMachinesListResponse {
	return p.current
}
