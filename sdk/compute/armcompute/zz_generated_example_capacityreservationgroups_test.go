//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/compute/armcompute"
)

func ExampleCapacityReservationGroupsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	con := arm.NewDefaultConnection(cred, nil)
	ctx := context.Background()
	client := armcompute.NewCapacityReservationGroupsClient(con,
		"<subscription-id>")
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<capacity-reservation-group-name>",
		armcompute.CapacityReservationGroup{
			Resource: armcompute.Resource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"department": to.StringPtr("finance"),
				},
			},
			Zones: []*string{
				to.StringPtr("1"),
				to.StringPtr("2")},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("CapacityReservationGroup.ID: %s\n", *res.ID)
}

func ExampleCapacityReservationGroupsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	con := arm.NewDefaultConnection(cred, nil)
	ctx := context.Background()
	client := armcompute.NewCapacityReservationGroupsClient(con,
		"<subscription-id>")
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<capacity-reservation-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("CapacityReservationGroup.ID: %s\n", *res.ID)
}

func ExampleCapacityReservationGroupsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	con := arm.NewDefaultConnection(cred, nil)
	ctx := context.Background()
	client := armcompute.NewCapacityReservationGroupsClient(con,
		"<subscription-id>")
	pager := client.ListByResourceGroup("<resource-group-name>",
		&armcompute.CapacityReservationGroupsListByResourceGroupOptions{Expand: armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("CapacityReservationGroup.ID: %s\n", *v.ID)
		}
	}
}

func ExampleCapacityReservationGroupsClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	con := arm.NewDefaultConnection(cred, nil)
	ctx := context.Background()
	client := armcompute.NewCapacityReservationGroupsClient(con,
		"<subscription-id>")
	pager := client.ListBySubscription(&armcompute.CapacityReservationGroupsListBySubscriptionOptions{Expand: armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("CapacityReservationGroup.ID: %s\n", *v.ID)
		}
	}
}
