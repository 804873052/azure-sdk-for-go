//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClientDiscoveryResponse.NextLink == nil || len(*p.current.ClientDiscoveryResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type PrivateLinkResourcesListPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkResourcesListResponse.
	PageResponse() PrivateLinkResourcesListResponse
}

type privateLinkResourcesListPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListResponse) (*azcore.Request, error)
}

func (p *privateLinkResourcesListPager) Err() error {
	return p.err
}

func (p *privateLinkResourcesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResources.NextLink == nil || len(*p.current.PrivateLinkResources.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkResourcesListPager) PageResponse() PrivateLinkResourcesListResponse {
	return p.current
}

type VaultsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VaultsListByResourceGroupResponse.
	PageResponse() VaultsListByResourceGroupResponse
}

type vaultsListByResourceGroupPager struct {
	client    *VaultsClient
	current   VaultsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VaultsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *vaultsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *vaultsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultList.NextLink == nil || len(*p.current.VaultList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vaultsListByResourceGroupPager) PageResponse() VaultsListByResourceGroupResponse {
	return p.current
}

type VaultsListBySubscriptionIDPager interface {
	azcore.Pager
	// PageResponse returns the current VaultsListBySubscriptionIDResponse.
	PageResponse() VaultsListBySubscriptionIDResponse
}

type vaultsListBySubscriptionIDPager struct {
	client    *VaultsClient
	current   VaultsListBySubscriptionIDResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VaultsListBySubscriptionIDResponse) (*azcore.Request, error)
}

func (p *vaultsListBySubscriptionIDPager) Err() error {
	return p.err
}

func (p *vaultsListBySubscriptionIDPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultList.NextLink == nil || len(*p.current.VaultList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionIDHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionIDHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vaultsListBySubscriptionIDPager) PageResponse() VaultsListBySubscriptionIDResponse {
	return p.current
}
