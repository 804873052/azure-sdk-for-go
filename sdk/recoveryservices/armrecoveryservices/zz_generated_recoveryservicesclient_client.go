//go:build go1.13
// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// RecoveryServicesClient contains the methods for the RecoveryServicesClient group.
// Don't use this type directly, use NewRecoveryServicesClient() instead.
type RecoveryServicesClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewRecoveryServicesClient creates a new instance of RecoveryServicesClient with the specified values.
func NewRecoveryServicesClient(con *armcore.Connection, subscriptionID string) *RecoveryServicesClient {
	return &RecoveryServicesClient{con: con, subscriptionID: subscriptionID}
}

// GetOperationResult - Gets the operation result for a resource.
// If the operation fails it returns the *CloudError error type.
func (client *RecoveryServicesClient) GetOperationResult(ctx context.Context, resourceGroupName string, vaultName string, operationID string, options *RecoveryServicesClientGetOperationResultOptions) (RecoveryServicesClientGetOperationResultResponse, error) {
	req, err := client.getOperationResultCreateRequest(ctx, resourceGroupName, vaultName, operationID, options)
	if err != nil {
		return RecoveryServicesClientGetOperationResultResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RecoveryServicesClientGetOperationResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return RecoveryServicesClientGetOperationResultResponse{}, client.getOperationResultHandleError(resp)
	}
	return client.getOperationResultHandleResponse(resp)
}

// getOperationResultCreateRequest creates the GetOperationResult request.
func (client *RecoveryServicesClient) getOperationResultCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, operationID string, options *RecoveryServicesClientGetOperationResultOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationResults/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getOperationResultHandleResponse handles the GetOperationResult response.
func (client *RecoveryServicesClient) getOperationResultHandleResponse(resp *azcore.Response) (RecoveryServicesClientGetOperationResultResponse, error) {
	result := RecoveryServicesClientGetOperationResultResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Vault); err != nil {
		return RecoveryServicesClientGetOperationResultResponse{}, err
	}
	return result, nil
}

// getOperationResultHandleError handles the GetOperationResult error response.
func (client *RecoveryServicesClient) getOperationResultHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetOperationStatus - Gets the operation status for a resource.
// If the operation fails it returns the *CloudError error type.
func (client *RecoveryServicesClient) GetOperationStatus(ctx context.Context, resourceGroupName string, vaultName string, operationID string, options *RecoveryServicesClientGetOperationStatusOptions) (RecoveryServicesClientGetOperationStatusResponse, error) {
	req, err := client.getOperationStatusCreateRequest(ctx, resourceGroupName, vaultName, operationID, options)
	if err != nil {
		return RecoveryServicesClientGetOperationStatusResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RecoveryServicesClientGetOperationStatusResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return RecoveryServicesClientGetOperationStatusResponse{}, client.getOperationStatusHandleError(resp)
	}
	return client.getOperationStatusHandleResponse(resp)
}

// getOperationStatusCreateRequest creates the GetOperationStatus request.
func (client *RecoveryServicesClient) getOperationStatusCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, operationID string, options *RecoveryServicesClientGetOperationStatusOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationStatus/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getOperationStatusHandleResponse handles the GetOperationStatus response.
func (client *RecoveryServicesClient) getOperationStatusHandleResponse(resp *azcore.Response) (RecoveryServicesClientGetOperationStatusResponse, error) {
	result := RecoveryServicesClientGetOperationStatusResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.OperationResource); err != nil {
		return RecoveryServicesClientGetOperationStatusResponse{}, err
	}
	return result, nil
}

// getOperationStatusHandleError handles the GetOperationStatus error response.
func (client *RecoveryServicesClient) getOperationStatusHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
