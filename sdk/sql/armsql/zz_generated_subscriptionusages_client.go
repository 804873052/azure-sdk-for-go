// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionUsagesClient contains the methods for the SubscriptionUsages group.
// Don't use this type directly, use NewSubscriptionUsagesClient() instead.
type SubscriptionUsagesClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewSubscriptionUsagesClient creates a new instance of SubscriptionUsagesClient with the specified values.
func NewSubscriptionUsagesClient(con *armcore.Connection, subscriptionID string) *SubscriptionUsagesClient {
	return &SubscriptionUsagesClient{con: con, subscriptionID: subscriptionID}
}

// Get - Gets a subscription usage metric.
// If the operation fails it returns a generic error.
func (client *SubscriptionUsagesClient) Get(ctx context.Context, locationName string, usageName string, options *SubscriptionUsagesGetOptions) (SubscriptionUsagesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, locationName, usageName, options)
	if err != nil {
		return SubscriptionUsagesGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return SubscriptionUsagesGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SubscriptionUsagesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SubscriptionUsagesClient) getCreateRequest(ctx context.Context, locationName string, usageName string, options *SubscriptionUsagesGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}"
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	if usageName == "" {
		return nil, errors.New("parameter usageName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{usageName}", url.PathEscape(usageName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-11-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SubscriptionUsagesClient) getHandleResponse(resp *azcore.Response) (SubscriptionUsagesGetResponse, error) {
	result := SubscriptionUsagesGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SubscriptionUsage); err != nil {
		return SubscriptionUsagesGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SubscriptionUsagesClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// ListByLocation - Gets all subscription usage metrics in a given location.
// If the operation fails it returns a generic error.
func (client *SubscriptionUsagesClient) ListByLocation(locationName string, options *SubscriptionUsagesListByLocationOptions) SubscriptionUsagesListByLocationPager {
	return &subscriptionUsagesListByLocationPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByLocationCreateRequest(ctx, locationName, options)
		},
		advancer: func(ctx context.Context, resp SubscriptionUsagesListByLocationResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.SubscriptionUsageListResult.NextLink)
		},
	}
}

// listByLocationCreateRequest creates the ListByLocation request.
func (client *SubscriptionUsagesClient) listByLocationCreateRequest(ctx context.Context, locationName string, options *SubscriptionUsagesListByLocationOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages"
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-11-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByLocationHandleResponse handles the ListByLocation response.
func (client *SubscriptionUsagesClient) listByLocationHandleResponse(resp *azcore.Response) (SubscriptionUsagesListByLocationResponse, error) {
	result := SubscriptionUsagesListByLocationResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SubscriptionUsageListResult); err != nil {
		return SubscriptionUsagesListByLocationResponse{}, err
	}
	return result, nil
}

// listByLocationHandleError handles the ListByLocation error response.
func (client *SubscriptionUsagesClient) listByLocationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
