// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type BackupShortTermRetentionPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current BackupShortTermRetentionPoliciesListByDatabaseResponse.
	PageResponse() BackupShortTermRetentionPoliciesListByDatabaseResponse
}

type backupShortTermRetentionPoliciesListByDatabasePager struct {
	client    *BackupShortTermRetentionPoliciesClient
	current   BackupShortTermRetentionPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, BackupShortTermRetentionPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *backupShortTermRetentionPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *backupShortTermRetentionPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupShortTermRetentionPolicyListResult.NextLink == nil || len(*p.current.BackupShortTermRetentionPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *backupShortTermRetentionPoliciesListByDatabasePager) PageResponse() BackupShortTermRetentionPoliciesListByDatabaseResponse {
	return p.current
}

type DataWarehouseUserActivitiesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DataWarehouseUserActivitiesListByDatabaseResponse.
	PageResponse() DataWarehouseUserActivitiesListByDatabaseResponse
}

type dataWarehouseUserActivitiesListByDatabasePager struct {
	client    *DataWarehouseUserActivitiesClient
	current   DataWarehouseUserActivitiesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DataWarehouseUserActivitiesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *dataWarehouseUserActivitiesListByDatabasePager) Err() error {
	return p.err
}

func (p *dataWarehouseUserActivitiesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataWarehouseUserActivitiesListResult.NextLink == nil || len(*p.current.DataWarehouseUserActivitiesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataWarehouseUserActivitiesListByDatabasePager) PageResponse() DataWarehouseUserActivitiesListByDatabaseResponse {
	return p.current
}

type DatabaseBlobAuditingPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseBlobAuditingPoliciesListByDatabaseResponse.
	PageResponse() DatabaseBlobAuditingPoliciesListByDatabaseResponse
}

type databaseBlobAuditingPoliciesListByDatabasePager struct {
	client    *DatabaseBlobAuditingPoliciesClient
	current   DatabaseBlobAuditingPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseBlobAuditingPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseBlobAuditingPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseBlobAuditingPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseBlobAuditingPolicyListResult.NextLink == nil || len(*p.current.DatabaseBlobAuditingPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseBlobAuditingPoliciesListByDatabasePager) PageResponse() DatabaseBlobAuditingPoliciesListByDatabaseResponse {
	return p.current
}

type DatabaseColumnsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseColumnsListByDatabaseResponse.
	PageResponse() DatabaseColumnsListByDatabaseResponse
}

type databaseColumnsListByDatabasePager struct {
	client    *DatabaseColumnsClient
	current   DatabaseColumnsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseColumnsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseColumnsListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseColumnsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseColumnListResult.NextLink == nil || len(*p.current.DatabaseColumnListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseColumnsListByDatabasePager) PageResponse() DatabaseColumnsListByDatabaseResponse {
	return p.current
}

type DatabaseColumnsListByTablePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseColumnsListByTableResponse.
	PageResponse() DatabaseColumnsListByTableResponse
}

type databaseColumnsListByTablePager struct {
	client    *DatabaseColumnsClient
	current   DatabaseColumnsListByTableResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseColumnsListByTableResponse) (*azcore.Request, error)
}

func (p *databaseColumnsListByTablePager) Err() error {
	return p.err
}

func (p *databaseColumnsListByTablePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseColumnListResult.NextLink == nil || len(*p.current.DatabaseColumnListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTableHandleError(resp)
		return false
	}
	result, err := p.client.listByTableHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseColumnsListByTablePager) PageResponse() DatabaseColumnsListByTableResponse {
	return p.current
}

type DatabaseExtensionsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseExtensionsListByDatabaseResponse.
	PageResponse() DatabaseExtensionsListByDatabaseResponse
}

type databaseExtensionsListByDatabasePager struct {
	client    *DatabaseExtensionsClient
	current   DatabaseExtensionsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseExtensionsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseExtensionsListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseExtensionsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ImportExportExtensionsOperationListResult.NextLink == nil || len(*p.current.ImportExportExtensionsOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseExtensionsListByDatabasePager) PageResponse() DatabaseExtensionsListByDatabaseResponse {
	return p.current
}

type DatabaseOperationsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseOperationsListByDatabaseResponse.
	PageResponse() DatabaseOperationsListByDatabaseResponse
}

type databaseOperationsListByDatabasePager struct {
	client    *DatabaseOperationsClient
	current   DatabaseOperationsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseOperationsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseOperationsListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseOperationsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseOperationListResult.NextLink == nil || len(*p.current.DatabaseOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseOperationsListByDatabasePager) PageResponse() DatabaseOperationsListByDatabaseResponse {
	return p.current
}

type DatabaseSchemasListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseSchemasListByDatabaseResponse.
	PageResponse() DatabaseSchemasListByDatabaseResponse
}

type databaseSchemasListByDatabasePager struct {
	client    *DatabaseSchemasClient
	current   DatabaseSchemasListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseSchemasListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseSchemasListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseSchemasListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseSchemaListResult.NextLink == nil || len(*p.current.DatabaseSchemaListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseSchemasListByDatabasePager) PageResponse() DatabaseSchemasListByDatabaseResponse {
	return p.current
}

type DatabaseSecurityAlertPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseSecurityAlertPoliciesListByDatabaseResponse.
	PageResponse() DatabaseSecurityAlertPoliciesListByDatabaseResponse
}

type databaseSecurityAlertPoliciesListByDatabasePager struct {
	client    *DatabaseSecurityAlertPoliciesClient
	current   DatabaseSecurityAlertPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseSecurityAlertPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseSecurityAlertPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseSecurityAlertPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseSecurityAlertListResult.NextLink == nil || len(*p.current.DatabaseSecurityAlertListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseSecurityAlertPoliciesListByDatabasePager) PageResponse() DatabaseSecurityAlertPoliciesListByDatabaseResponse {
	return p.current
}

type DatabaseTablesListBySchemaPager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseTablesListBySchemaResponse.
	PageResponse() DatabaseTablesListBySchemaResponse
}

type databaseTablesListBySchemaPager struct {
	client    *DatabaseTablesClient
	current   DatabaseTablesListBySchemaResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseTablesListBySchemaResponse) (*azcore.Request, error)
}

func (p *databaseTablesListBySchemaPager) Err() error {
	return p.err
}

func (p *databaseTablesListBySchemaPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseTableListResult.NextLink == nil || len(*p.current.DatabaseTableListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySchemaHandleError(resp)
		return false
	}
	result, err := p.client.listBySchemaHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseTablesListBySchemaPager) PageResponse() DatabaseTablesListBySchemaResponse {
	return p.current
}

type DatabaseUsagesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseUsagesListByDatabaseResponse.
	PageResponse() DatabaseUsagesListByDatabaseResponse
}

type databaseUsagesListByDatabasePager struct {
	client    *DatabaseUsagesClient
	current   DatabaseUsagesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseUsagesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseUsagesListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseUsagesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseUsageListResult.NextLink == nil || len(*p.current.DatabaseUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseUsagesListByDatabasePager) PageResponse() DatabaseUsagesListByDatabaseResponse {
	return p.current
}

type DatabaseVulnerabilityAssessmentScansListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseVulnerabilityAssessmentScansListByDatabaseResponse.
	PageResponse() DatabaseVulnerabilityAssessmentScansListByDatabaseResponse
}

type databaseVulnerabilityAssessmentScansListByDatabasePager struct {
	client    *DatabaseVulnerabilityAssessmentScansClient
	current   DatabaseVulnerabilityAssessmentScansListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseVulnerabilityAssessmentScansListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseVulnerabilityAssessmentScansListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseVulnerabilityAssessmentScansListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VulnerabilityAssessmentScanRecordListResult.NextLink == nil || len(*p.current.VulnerabilityAssessmentScanRecordListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseVulnerabilityAssessmentScansListByDatabasePager) PageResponse() DatabaseVulnerabilityAssessmentScansListByDatabaseResponse {
	return p.current
}

type DatabaseVulnerabilityAssessmentsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current DatabaseVulnerabilityAssessmentsListByDatabaseResponse.
	PageResponse() DatabaseVulnerabilityAssessmentsListByDatabaseResponse
}

type databaseVulnerabilityAssessmentsListByDatabasePager struct {
	client    *DatabaseVulnerabilityAssessmentsClient
	current   DatabaseVulnerabilityAssessmentsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabaseVulnerabilityAssessmentsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *databaseVulnerabilityAssessmentsListByDatabasePager) Err() error {
	return p.err
}

func (p *databaseVulnerabilityAssessmentsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseVulnerabilityAssessmentListResult.NextLink == nil || len(*p.current.DatabaseVulnerabilityAssessmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databaseVulnerabilityAssessmentsListByDatabasePager) PageResponse() DatabaseVulnerabilityAssessmentsListByDatabaseResponse {
	return p.current
}

type DatabasesListByElasticPoolPager interface {
	azcore.Pager
	// PageResponse returns the current DatabasesListByElasticPoolResponse.
	PageResponse() DatabasesListByElasticPoolResponse
}

type databasesListByElasticPoolPager struct {
	client    *DatabasesClient
	current   DatabasesListByElasticPoolResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabasesListByElasticPoolResponse) (*azcore.Request, error)
}

func (p *databasesListByElasticPoolPager) Err() error {
	return p.err
}

func (p *databasesListByElasticPoolPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseListResult.NextLink == nil || len(*p.current.DatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByElasticPoolHandleError(resp)
		return false
	}
	result, err := p.client.listByElasticPoolHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databasesListByElasticPoolPager) PageResponse() DatabasesListByElasticPoolResponse {
	return p.current
}

type DatabasesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current DatabasesListByServerResponse.
	PageResponse() DatabasesListByServerResponse
}

type databasesListByServerPager struct {
	client    *DatabasesClient
	current   DatabasesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabasesListByServerResponse) (*azcore.Request, error)
}

func (p *databasesListByServerPager) Err() error {
	return p.err
}

func (p *databasesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseListResult.NextLink == nil || len(*p.current.DatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databasesListByServerPager) PageResponse() DatabasesListByServerResponse {
	return p.current
}

type DatabasesListInaccessibleByServerPager interface {
	azcore.Pager
	// PageResponse returns the current DatabasesListInaccessibleByServerResponse.
	PageResponse() DatabasesListInaccessibleByServerResponse
}

type databasesListInaccessibleByServerPager struct {
	client    *DatabasesClient
	current   DatabasesListInaccessibleByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabasesListInaccessibleByServerResponse) (*azcore.Request, error)
}

func (p *databasesListInaccessibleByServerPager) Err() error {
	return p.err
}

func (p *databasesListInaccessibleByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseListResult.NextLink == nil || len(*p.current.DatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInaccessibleByServerHandleError(resp)
		return false
	}
	result, err := p.client.listInaccessibleByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databasesListInaccessibleByServerPager) PageResponse() DatabasesListInaccessibleByServerResponse {
	return p.current
}

type DeletedServersListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current DeletedServersListByLocationResponse.
	PageResponse() DeletedServersListByLocationResponse
}

type deletedServersListByLocationPager struct {
	client    *DeletedServersClient
	current   DeletedServersListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeletedServersListByLocationResponse) (*azcore.Request, error)
}

func (p *deletedServersListByLocationPager) Err() error {
	return p.err
}

func (p *deletedServersListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedServerListResult.NextLink == nil || len(*p.current.DeletedServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedServersListByLocationPager) PageResponse() DeletedServersListByLocationResponse {
	return p.current
}

type DeletedServersListPager interface {
	azcore.Pager
	// PageResponse returns the current DeletedServersListResponse.
	PageResponse() DeletedServersListResponse
}

type deletedServersListPager struct {
	client    *DeletedServersClient
	current   DeletedServersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeletedServersListResponse) (*azcore.Request, error)
}

func (p *deletedServersListPager) Err() error {
	return p.err
}

func (p *deletedServersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedServerListResult.NextLink == nil || len(*p.current.DeletedServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedServersListPager) PageResponse() DeletedServersListResponse {
	return p.current
}

type ElasticPoolOperationsListByElasticPoolPager interface {
	azcore.Pager
	// PageResponse returns the current ElasticPoolOperationsListByElasticPoolResponse.
	PageResponse() ElasticPoolOperationsListByElasticPoolResponse
}

type elasticPoolOperationsListByElasticPoolPager struct {
	client    *ElasticPoolOperationsClient
	current   ElasticPoolOperationsListByElasticPoolResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ElasticPoolOperationsListByElasticPoolResponse) (*azcore.Request, error)
}

func (p *elasticPoolOperationsListByElasticPoolPager) Err() error {
	return p.err
}

func (p *elasticPoolOperationsListByElasticPoolPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ElasticPoolOperationListResult.NextLink == nil || len(*p.current.ElasticPoolOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByElasticPoolHandleError(resp)
		return false
	}
	result, err := p.client.listByElasticPoolHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *elasticPoolOperationsListByElasticPoolPager) PageResponse() ElasticPoolOperationsListByElasticPoolResponse {
	return p.current
}

type ElasticPoolsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ElasticPoolsListByServerResponse.
	PageResponse() ElasticPoolsListByServerResponse
}

type elasticPoolsListByServerPager struct {
	client    *ElasticPoolsClient
	current   ElasticPoolsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ElasticPoolsListByServerResponse) (*azcore.Request, error)
}

func (p *elasticPoolsListByServerPager) Err() error {
	return p.err
}

func (p *elasticPoolsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ElasticPoolListResult.NextLink == nil || len(*p.current.ElasticPoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *elasticPoolsListByServerPager) PageResponse() ElasticPoolsListByServerResponse {
	return p.current
}

type EncryptionProtectorsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current EncryptionProtectorsListByServerResponse.
	PageResponse() EncryptionProtectorsListByServerResponse
}

type encryptionProtectorsListByServerPager struct {
	client    *EncryptionProtectorsClient
	current   EncryptionProtectorsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EncryptionProtectorsListByServerResponse) (*azcore.Request, error)
}

func (p *encryptionProtectorsListByServerPager) Err() error {
	return p.err
}

func (p *encryptionProtectorsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EncryptionProtectorListResult.NextLink == nil || len(*p.current.EncryptionProtectorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *encryptionProtectorsListByServerPager) PageResponse() EncryptionProtectorsListByServerResponse {
	return p.current
}

type ExtendedDatabaseBlobAuditingPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse.
	PageResponse() ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse
}

type extendedDatabaseBlobAuditingPoliciesListByDatabasePager struct {
	client    *ExtendedDatabaseBlobAuditingPoliciesClient
	current   ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *extendedDatabaseBlobAuditingPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *extendedDatabaseBlobAuditingPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExtendedDatabaseBlobAuditingPolicyListResult.NextLink == nil || len(*p.current.ExtendedDatabaseBlobAuditingPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *extendedDatabaseBlobAuditingPoliciesListByDatabasePager) PageResponse() ExtendedDatabaseBlobAuditingPoliciesListByDatabaseResponse {
	return p.current
}

type ExtendedServerBlobAuditingPoliciesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ExtendedServerBlobAuditingPoliciesListByServerResponse.
	PageResponse() ExtendedServerBlobAuditingPoliciesListByServerResponse
}

type extendedServerBlobAuditingPoliciesListByServerPager struct {
	client    *ExtendedServerBlobAuditingPoliciesClient
	current   ExtendedServerBlobAuditingPoliciesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExtendedServerBlobAuditingPoliciesListByServerResponse) (*azcore.Request, error)
}

func (p *extendedServerBlobAuditingPoliciesListByServerPager) Err() error {
	return p.err
}

func (p *extendedServerBlobAuditingPoliciesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExtendedServerBlobAuditingPolicyListResult.NextLink == nil || len(*p.current.ExtendedServerBlobAuditingPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *extendedServerBlobAuditingPoliciesListByServerPager) PageResponse() ExtendedServerBlobAuditingPoliciesListByServerResponse {
	return p.current
}

type FailoverGroupsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current FailoverGroupsListByServerResponse.
	PageResponse() FailoverGroupsListByServerResponse
}

type failoverGroupsListByServerPager struct {
	client    *FailoverGroupsClient
	current   FailoverGroupsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FailoverGroupsListByServerResponse) (*azcore.Request, error)
}

func (p *failoverGroupsListByServerPager) Err() error {
	return p.err
}

func (p *failoverGroupsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FailoverGroupListResult.NextLink == nil || len(*p.current.FailoverGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *failoverGroupsListByServerPager) PageResponse() FailoverGroupsListByServerResponse {
	return p.current
}

type FirewallRulesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current FirewallRulesListByServerResponse.
	PageResponse() FirewallRulesListByServerResponse
}

type firewallRulesListByServerPager struct {
	client    *FirewallRulesClient
	current   FirewallRulesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FirewallRulesListByServerResponse) (*azcore.Request, error)
}

func (p *firewallRulesListByServerPager) Err() error {
	return p.err
}

func (p *firewallRulesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallRuleListResult.NextLink == nil || len(*p.current.FirewallRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *firewallRulesListByServerPager) PageResponse() FirewallRulesListByServerResponse {
	return p.current
}

type InstanceFailoverGroupsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current InstanceFailoverGroupsListByLocationResponse.
	PageResponse() InstanceFailoverGroupsListByLocationResponse
}

type instanceFailoverGroupsListByLocationPager struct {
	client    *InstanceFailoverGroupsClient
	current   InstanceFailoverGroupsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, InstanceFailoverGroupsListByLocationResponse) (*azcore.Request, error)
}

func (p *instanceFailoverGroupsListByLocationPager) Err() error {
	return p.err
}

func (p *instanceFailoverGroupsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InstanceFailoverGroupListResult.NextLink == nil || len(*p.current.InstanceFailoverGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *instanceFailoverGroupsListByLocationPager) PageResponse() InstanceFailoverGroupsListByLocationResponse {
	return p.current
}

type InstancePoolsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current InstancePoolsListByResourceGroupResponse.
	PageResponse() InstancePoolsListByResourceGroupResponse
}

type instancePoolsListByResourceGroupPager struct {
	client    *InstancePoolsClient
	current   InstancePoolsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, InstancePoolsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *instancePoolsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *instancePoolsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InstancePoolListResult.NextLink == nil || len(*p.current.InstancePoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *instancePoolsListByResourceGroupPager) PageResponse() InstancePoolsListByResourceGroupResponse {
	return p.current
}

type InstancePoolsListPager interface {
	azcore.Pager
	// PageResponse returns the current InstancePoolsListResponse.
	PageResponse() InstancePoolsListResponse
}

type instancePoolsListPager struct {
	client    *InstancePoolsClient
	current   InstancePoolsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, InstancePoolsListResponse) (*azcore.Request, error)
}

func (p *instancePoolsListPager) Err() error {
	return p.err
}

func (p *instancePoolsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InstancePoolListResult.NextLink == nil || len(*p.current.InstancePoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *instancePoolsListPager) PageResponse() InstancePoolsListResponse {
	return p.current
}

type JobAgentsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current JobAgentsListByServerResponse.
	PageResponse() JobAgentsListByServerResponse
}

type jobAgentsListByServerPager struct {
	client    *JobAgentsClient
	current   JobAgentsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobAgentsListByServerResponse) (*azcore.Request, error)
}

func (p *jobAgentsListByServerPager) Err() error {
	return p.err
}

func (p *jobAgentsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobAgentListResult.NextLink == nil || len(*p.current.JobAgentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobAgentsListByServerPager) PageResponse() JobAgentsListByServerResponse {
	return p.current
}

type JobCredentialsListByAgentPager interface {
	azcore.Pager
	// PageResponse returns the current JobCredentialsListByAgentResponse.
	PageResponse() JobCredentialsListByAgentResponse
}

type jobCredentialsListByAgentPager struct {
	client    *JobCredentialsClient
	current   JobCredentialsListByAgentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobCredentialsListByAgentResponse) (*azcore.Request, error)
}

func (p *jobCredentialsListByAgentPager) Err() error {
	return p.err
}

func (p *jobCredentialsListByAgentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobCredentialListResult.NextLink == nil || len(*p.current.JobCredentialListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAgentHandleError(resp)
		return false
	}
	result, err := p.client.listByAgentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobCredentialsListByAgentPager) PageResponse() JobCredentialsListByAgentResponse {
	return p.current
}

type JobExecutionsListByAgentPager interface {
	azcore.Pager
	// PageResponse returns the current JobExecutionsListByAgentResponse.
	PageResponse() JobExecutionsListByAgentResponse
}

type jobExecutionsListByAgentPager struct {
	client    *JobExecutionsClient
	current   JobExecutionsListByAgentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobExecutionsListByAgentResponse) (*azcore.Request, error)
}

func (p *jobExecutionsListByAgentPager) Err() error {
	return p.err
}

func (p *jobExecutionsListByAgentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobExecutionListResult.NextLink == nil || len(*p.current.JobExecutionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAgentHandleError(resp)
		return false
	}
	result, err := p.client.listByAgentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobExecutionsListByAgentPager) PageResponse() JobExecutionsListByAgentResponse {
	return p.current
}

type JobExecutionsListByJobPager interface {
	azcore.Pager
	// PageResponse returns the current JobExecutionsListByJobResponse.
	PageResponse() JobExecutionsListByJobResponse
}

type jobExecutionsListByJobPager struct {
	client    *JobExecutionsClient
	current   JobExecutionsListByJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobExecutionsListByJobResponse) (*azcore.Request, error)
}

func (p *jobExecutionsListByJobPager) Err() error {
	return p.err
}

func (p *jobExecutionsListByJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobExecutionListResult.NextLink == nil || len(*p.current.JobExecutionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobHandleError(resp)
		return false
	}
	result, err := p.client.listByJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobExecutionsListByJobPager) PageResponse() JobExecutionsListByJobResponse {
	return p.current
}

type JobStepExecutionsListByJobExecutionPager interface {
	azcore.Pager
	// PageResponse returns the current JobStepExecutionsListByJobExecutionResponse.
	PageResponse() JobStepExecutionsListByJobExecutionResponse
}

type jobStepExecutionsListByJobExecutionPager struct {
	client    *JobStepExecutionsClient
	current   JobStepExecutionsListByJobExecutionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobStepExecutionsListByJobExecutionResponse) (*azcore.Request, error)
}

func (p *jobStepExecutionsListByJobExecutionPager) Err() error {
	return p.err
}

func (p *jobStepExecutionsListByJobExecutionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobExecutionListResult.NextLink == nil || len(*p.current.JobExecutionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobExecutionHandleError(resp)
		return false
	}
	result, err := p.client.listByJobExecutionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobStepExecutionsListByJobExecutionPager) PageResponse() JobStepExecutionsListByJobExecutionResponse {
	return p.current
}

type JobStepsListByJobPager interface {
	azcore.Pager
	// PageResponse returns the current JobStepsListByJobResponse.
	PageResponse() JobStepsListByJobResponse
}

type jobStepsListByJobPager struct {
	client    *JobStepsClient
	current   JobStepsListByJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobStepsListByJobResponse) (*azcore.Request, error)
}

func (p *jobStepsListByJobPager) Err() error {
	return p.err
}

func (p *jobStepsListByJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobStepListResult.NextLink == nil || len(*p.current.JobStepListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobHandleError(resp)
		return false
	}
	result, err := p.client.listByJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobStepsListByJobPager) PageResponse() JobStepsListByJobResponse {
	return p.current
}

type JobStepsListByVersionPager interface {
	azcore.Pager
	// PageResponse returns the current JobStepsListByVersionResponse.
	PageResponse() JobStepsListByVersionResponse
}

type jobStepsListByVersionPager struct {
	client    *JobStepsClient
	current   JobStepsListByVersionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobStepsListByVersionResponse) (*azcore.Request, error)
}

func (p *jobStepsListByVersionPager) Err() error {
	return p.err
}

func (p *jobStepsListByVersionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobStepListResult.NextLink == nil || len(*p.current.JobStepListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByVersionHandleError(resp)
		return false
	}
	result, err := p.client.listByVersionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobStepsListByVersionPager) PageResponse() JobStepsListByVersionResponse {
	return p.current
}

type JobTargetExecutionsListByJobExecutionPager interface {
	azcore.Pager
	// PageResponse returns the current JobTargetExecutionsListByJobExecutionResponse.
	PageResponse() JobTargetExecutionsListByJobExecutionResponse
}

type jobTargetExecutionsListByJobExecutionPager struct {
	client    *JobTargetExecutionsClient
	current   JobTargetExecutionsListByJobExecutionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobTargetExecutionsListByJobExecutionResponse) (*azcore.Request, error)
}

func (p *jobTargetExecutionsListByJobExecutionPager) Err() error {
	return p.err
}

func (p *jobTargetExecutionsListByJobExecutionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobExecutionListResult.NextLink == nil || len(*p.current.JobExecutionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobExecutionHandleError(resp)
		return false
	}
	result, err := p.client.listByJobExecutionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobTargetExecutionsListByJobExecutionPager) PageResponse() JobTargetExecutionsListByJobExecutionResponse {
	return p.current
}

type JobTargetExecutionsListByStepPager interface {
	azcore.Pager
	// PageResponse returns the current JobTargetExecutionsListByStepResponse.
	PageResponse() JobTargetExecutionsListByStepResponse
}

type jobTargetExecutionsListByStepPager struct {
	client    *JobTargetExecutionsClient
	current   JobTargetExecutionsListByStepResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobTargetExecutionsListByStepResponse) (*azcore.Request, error)
}

func (p *jobTargetExecutionsListByStepPager) Err() error {
	return p.err
}

func (p *jobTargetExecutionsListByStepPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobExecutionListResult.NextLink == nil || len(*p.current.JobExecutionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByStepHandleError(resp)
		return false
	}
	result, err := p.client.listByStepHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobTargetExecutionsListByStepPager) PageResponse() JobTargetExecutionsListByStepResponse {
	return p.current
}

type JobTargetGroupsListByAgentPager interface {
	azcore.Pager
	// PageResponse returns the current JobTargetGroupsListByAgentResponse.
	PageResponse() JobTargetGroupsListByAgentResponse
}

type jobTargetGroupsListByAgentPager struct {
	client    *JobTargetGroupsClient
	current   JobTargetGroupsListByAgentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobTargetGroupsListByAgentResponse) (*azcore.Request, error)
}

func (p *jobTargetGroupsListByAgentPager) Err() error {
	return p.err
}

func (p *jobTargetGroupsListByAgentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobTargetGroupListResult.NextLink == nil || len(*p.current.JobTargetGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAgentHandleError(resp)
		return false
	}
	result, err := p.client.listByAgentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobTargetGroupsListByAgentPager) PageResponse() JobTargetGroupsListByAgentResponse {
	return p.current
}

type JobVersionsListByJobPager interface {
	azcore.Pager
	// PageResponse returns the current JobVersionsListByJobResponse.
	PageResponse() JobVersionsListByJobResponse
}

type jobVersionsListByJobPager struct {
	client    *JobVersionsClient
	current   JobVersionsListByJobResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobVersionsListByJobResponse) (*azcore.Request, error)
}

func (p *jobVersionsListByJobPager) Err() error {
	return p.err
}

func (p *jobVersionsListByJobPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobVersionListResult.NextLink == nil || len(*p.current.JobVersionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByJobHandleError(resp)
		return false
	}
	result, err := p.client.listByJobHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobVersionsListByJobPager) PageResponse() JobVersionsListByJobResponse {
	return p.current
}

type JobsListByAgentPager interface {
	azcore.Pager
	// PageResponse returns the current JobsListByAgentResponse.
	PageResponse() JobsListByAgentResponse
}

type jobsListByAgentPager struct {
	client    *JobsClient
	current   JobsListByAgentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, JobsListByAgentResponse) (*azcore.Request, error)
}

func (p *jobsListByAgentPager) Err() error {
	return p.err
}

func (p *jobsListByAgentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobListResult.NextLink == nil || len(*p.current.JobListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAgentHandleError(resp)
		return false
	}
	result, err := p.client.listByAgentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *jobsListByAgentPager) PageResponse() JobsListByAgentResponse {
	return p.current
}

type LedgerDigestUploadsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LedgerDigestUploadsListByDatabaseResponse.
	PageResponse() LedgerDigestUploadsListByDatabaseResponse
}

type ledgerDigestUploadsListByDatabasePager struct {
	client    *LedgerDigestUploadsClient
	current   LedgerDigestUploadsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LedgerDigestUploadsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *ledgerDigestUploadsListByDatabasePager) Err() error {
	return p.err
}

func (p *ledgerDigestUploadsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LedgerDigestUploadsListResult.NextLink == nil || len(*p.current.LedgerDigestUploadsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *ledgerDigestUploadsListByDatabasePager) PageResponse() LedgerDigestUploadsListByDatabaseResponse {
	return p.current
}

type LongTermRetentionBackupsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByDatabaseResponse.
	PageResponse() LongTermRetentionBackupsListByDatabaseResponse
}

type longTermRetentionBackupsListByDatabasePager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByDatabasePager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByDatabasePager) PageResponse() LongTermRetentionBackupsListByDatabaseResponse {
	return p.current
}

type LongTermRetentionBackupsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByLocationResponse.
	PageResponse() LongTermRetentionBackupsListByLocationResponse
}

type longTermRetentionBackupsListByLocationPager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByLocationResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByLocationPager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByLocationPager) PageResponse() LongTermRetentionBackupsListByLocationResponse {
	return p.current
}

type LongTermRetentionBackupsListByResourceGroupDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByResourceGroupDatabaseResponse.
	PageResponse() LongTermRetentionBackupsListByResourceGroupDatabaseResponse
}

type longTermRetentionBackupsListByResourceGroupDatabasePager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByResourceGroupDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByResourceGroupDatabaseResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByResourceGroupDatabasePager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByResourceGroupDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByResourceGroupDatabasePager) PageResponse() LongTermRetentionBackupsListByResourceGroupDatabaseResponse {
	return p.current
}

type LongTermRetentionBackupsListByResourceGroupLocationPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByResourceGroupLocationResponse.
	PageResponse() LongTermRetentionBackupsListByResourceGroupLocationResponse
}

type longTermRetentionBackupsListByResourceGroupLocationPager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByResourceGroupLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByResourceGroupLocationResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByResourceGroupLocationPager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByResourceGroupLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByResourceGroupLocationPager) PageResponse() LongTermRetentionBackupsListByResourceGroupLocationResponse {
	return p.current
}

type LongTermRetentionBackupsListByResourceGroupServerPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByResourceGroupServerResponse.
	PageResponse() LongTermRetentionBackupsListByResourceGroupServerResponse
}

type longTermRetentionBackupsListByResourceGroupServerPager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByResourceGroupServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByResourceGroupServerResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByResourceGroupServerPager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByResourceGroupServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupServerHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByResourceGroupServerPager) PageResponse() LongTermRetentionBackupsListByResourceGroupServerResponse {
	return p.current
}

type LongTermRetentionBackupsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionBackupsListByServerResponse.
	PageResponse() LongTermRetentionBackupsListByServerResponse
}

type longTermRetentionBackupsListByServerPager struct {
	client    *LongTermRetentionBackupsClient
	current   LongTermRetentionBackupsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionBackupsListByServerResponse) (*azcore.Request, error)
}

func (p *longTermRetentionBackupsListByServerPager) Err() error {
	return p.err
}

func (p *longTermRetentionBackupsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionBackupListResult.NextLink == nil || len(*p.current.LongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionBackupsListByServerPager) PageResponse() LongTermRetentionBackupsListByServerResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByDatabaseResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByDatabaseResponse
}

type longTermRetentionManagedInstanceBackupsListByDatabasePager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByDatabasePager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByDatabasePager) PageResponse() LongTermRetentionManagedInstanceBackupsListByDatabaseResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByInstanceResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByInstanceResponse
}

type longTermRetentionManagedInstanceBackupsListByInstancePager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByInstanceResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByInstancePager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByInstancePager) PageResponse() LongTermRetentionManagedInstanceBackupsListByInstanceResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByLocationResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByLocationResponse
}

type longTermRetentionManagedInstanceBackupsListByLocationPager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByLocationResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByLocationPager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByLocationPager) PageResponse() LongTermRetentionManagedInstanceBackupsListByLocationResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse
}

type longTermRetentionManagedInstanceBackupsListByResourceGroupDatabasePager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupDatabasePager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupDatabasePager) PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByResourceGroupInstancePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse
}

type longTermRetentionManagedInstanceBackupsListByResourceGroupInstancePager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupInstancePager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupInstancePager) PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse {
	return p.current
}

type LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationPager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse.
	PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse
}

type longTermRetentionManagedInstanceBackupsListByResourceGroupLocationPager struct {
	client    *LongTermRetentionManagedInstanceBackupsClient
	current   LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse) (*azcore.Request, error)
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupLocationPager) Err() error {
	return p.err
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionBackupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionManagedInstanceBackupsListByResourceGroupLocationPager) PageResponse() LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse {
	return p.current
}

type LongTermRetentionPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current LongTermRetentionPoliciesListByDatabaseResponse.
	PageResponse() LongTermRetentionPoliciesListByDatabaseResponse
}

type longTermRetentionPoliciesListByDatabasePager struct {
	client    *LongTermRetentionPoliciesClient
	current   LongTermRetentionPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LongTermRetentionPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *longTermRetentionPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *longTermRetentionPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LongTermRetentionPolicyListResult.NextLink == nil || len(*p.current.LongTermRetentionPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *longTermRetentionPoliciesListByDatabasePager) PageResponse() LongTermRetentionPoliciesListByDatabaseResponse {
	return p.current
}

type ManagedBackupShortTermRetentionPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse.
	PageResponse() ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse
}

type managedBackupShortTermRetentionPoliciesListByDatabasePager struct {
	client    *ManagedBackupShortTermRetentionPoliciesClient
	current   ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedBackupShortTermRetentionPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *managedBackupShortTermRetentionPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedBackupShortTermRetentionPolicyListResult.NextLink == nil || len(*p.current.ManagedBackupShortTermRetentionPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedBackupShortTermRetentionPoliciesListByDatabasePager) PageResponse() ManagedBackupShortTermRetentionPoliciesListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseColumnsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseColumnsListByDatabaseResponse.
	PageResponse() ManagedDatabaseColumnsListByDatabaseResponse
}

type managedDatabaseColumnsListByDatabasePager struct {
	client    *ManagedDatabaseColumnsClient
	current   ManagedDatabaseColumnsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseColumnsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseColumnsListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseColumnsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseColumnListResult.NextLink == nil || len(*p.current.DatabaseColumnListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseColumnsListByDatabasePager) PageResponse() ManagedDatabaseColumnsListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseColumnsListByTablePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseColumnsListByTableResponse.
	PageResponse() ManagedDatabaseColumnsListByTableResponse
}

type managedDatabaseColumnsListByTablePager struct {
	client    *ManagedDatabaseColumnsClient
	current   ManagedDatabaseColumnsListByTableResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseColumnsListByTableResponse) (*azcore.Request, error)
}

func (p *managedDatabaseColumnsListByTablePager) Err() error {
	return p.err
}

func (p *managedDatabaseColumnsListByTablePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseColumnListResult.NextLink == nil || len(*p.current.DatabaseColumnListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTableHandleError(resp)
		return false
	}
	result, err := p.client.listByTableHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseColumnsListByTablePager) PageResponse() ManagedDatabaseColumnsListByTableResponse {
	return p.current
}

type ManagedDatabaseQueriesListByQueryPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseQueriesListByQueryResponse.
	PageResponse() ManagedDatabaseQueriesListByQueryResponse
}

type managedDatabaseQueriesListByQueryPager struct {
	client    *ManagedDatabaseQueriesClient
	current   ManagedDatabaseQueriesListByQueryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseQueriesListByQueryResponse) (*azcore.Request, error)
}

func (p *managedDatabaseQueriesListByQueryPager) Err() error {
	return p.err
}

func (p *managedDatabaseQueriesListByQueryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceQueryStatistics.NextLink == nil || len(*p.current.ManagedInstanceQueryStatistics.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByQueryHandleError(resp)
		return false
	}
	result, err := p.client.listByQueryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseQueriesListByQueryPager) PageResponse() ManagedDatabaseQueriesListByQueryResponse {
	return p.current
}

type ManagedDatabaseSchemasListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseSchemasListByDatabaseResponse.
	PageResponse() ManagedDatabaseSchemasListByDatabaseResponse
}

type managedDatabaseSchemasListByDatabasePager struct {
	client    *ManagedDatabaseSchemasClient
	current   ManagedDatabaseSchemasListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseSchemasListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseSchemasListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseSchemasListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseSchemaListResult.NextLink == nil || len(*p.current.DatabaseSchemaListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseSchemasListByDatabasePager) PageResponse() ManagedDatabaseSchemasListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseSecurityAlertPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse.
	PageResponse() ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse
}

type managedDatabaseSecurityAlertPoliciesListByDatabasePager struct {
	client    *ManagedDatabaseSecurityAlertPoliciesClient
	current   ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseSecurityAlertPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseSecurityAlertPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedDatabaseSecurityAlertPolicyListResult.NextLink == nil || len(*p.current.ManagedDatabaseSecurityAlertPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseSecurityAlertPoliciesListByDatabasePager) PageResponse() ManagedDatabaseSecurityAlertPoliciesListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseSecurityEventsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseSecurityEventsListByDatabaseResponse.
	PageResponse() ManagedDatabaseSecurityEventsListByDatabaseResponse
}

type managedDatabaseSecurityEventsListByDatabasePager struct {
	client    *ManagedDatabaseSecurityEventsClient
	current   ManagedDatabaseSecurityEventsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseSecurityEventsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseSecurityEventsListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseSecurityEventsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityEventCollection.NextLink == nil || len(*p.current.SecurityEventCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseSecurityEventsListByDatabasePager) PageResponse() ManagedDatabaseSecurityEventsListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseSensitivityLabelsListCurrentByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse.
	PageResponse() ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse
}

type managedDatabaseSensitivityLabelsListCurrentByDatabasePager struct {
	client    *ManagedDatabaseSensitivityLabelsClient
	current   ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseSensitivityLabelsListCurrentByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseSensitivityLabelsListCurrentByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SensitivityLabelListResult.NextLink == nil || len(*p.current.SensitivityLabelListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listCurrentByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listCurrentByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseSensitivityLabelsListCurrentByDatabasePager) PageResponse() ManagedDatabaseSensitivityLabelsListCurrentByDatabaseResponse {
	return p.current
}

type ManagedDatabaseSensitivityLabelsListRecommendedByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse.
	PageResponse() ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse
}

type managedDatabaseSensitivityLabelsListRecommendedByDatabasePager struct {
	client    *ManagedDatabaseSensitivityLabelsClient
	current   ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseSensitivityLabelsListRecommendedByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseSensitivityLabelsListRecommendedByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SensitivityLabelListResult.NextLink == nil || len(*p.current.SensitivityLabelListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRecommendedByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseSensitivityLabelsListRecommendedByDatabasePager) PageResponse() ManagedDatabaseSensitivityLabelsListRecommendedByDatabaseResponse {
	return p.current
}

type ManagedDatabaseTablesListBySchemaPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseTablesListBySchemaResponse.
	PageResponse() ManagedDatabaseTablesListBySchemaResponse
}

type managedDatabaseTablesListBySchemaPager struct {
	client    *ManagedDatabaseTablesClient
	current   ManagedDatabaseTablesListBySchemaResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseTablesListBySchemaResponse) (*azcore.Request, error)
}

func (p *managedDatabaseTablesListBySchemaPager) Err() error {
	return p.err
}

func (p *managedDatabaseTablesListBySchemaPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseTableListResult.NextLink == nil || len(*p.current.DatabaseTableListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySchemaHandleError(resp)
		return false
	}
	result, err := p.client.listBySchemaHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseTablesListBySchemaPager) PageResponse() ManagedDatabaseTablesListBySchemaResponse {
	return p.current
}

type ManagedDatabaseTransparentDataEncryptionListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseTransparentDataEncryptionListByDatabaseResponse.
	PageResponse() ManagedDatabaseTransparentDataEncryptionListByDatabaseResponse
}

type managedDatabaseTransparentDataEncryptionListByDatabasePager struct {
	client    *ManagedDatabaseTransparentDataEncryptionClient
	current   ManagedDatabaseTransparentDataEncryptionListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseTransparentDataEncryptionListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseTransparentDataEncryptionListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseTransparentDataEncryptionListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedTransparentDataEncryptionListResult.NextLink == nil || len(*p.current.ManagedTransparentDataEncryptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseTransparentDataEncryptionListByDatabasePager) PageResponse() ManagedDatabaseTransparentDataEncryptionListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseVulnerabilityAssessmentScansListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse.
	PageResponse() ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse
}

type managedDatabaseVulnerabilityAssessmentScansListByDatabasePager struct {
	client    *ManagedDatabaseVulnerabilityAssessmentScansClient
	current   ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseVulnerabilityAssessmentScansListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseVulnerabilityAssessmentScansListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VulnerabilityAssessmentScanRecordListResult.NextLink == nil || len(*p.current.VulnerabilityAssessmentScanRecordListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseVulnerabilityAssessmentScansListByDatabasePager) PageResponse() ManagedDatabaseVulnerabilityAssessmentScansListByDatabaseResponse {
	return p.current
}

type ManagedDatabaseVulnerabilityAssessmentsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse.
	PageResponse() ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse
}

type managedDatabaseVulnerabilityAssessmentsListByDatabasePager struct {
	client    *ManagedDatabaseVulnerabilityAssessmentsClient
	current   ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedDatabaseVulnerabilityAssessmentsListByDatabasePager) Err() error {
	return p.err
}

func (p *managedDatabaseVulnerabilityAssessmentsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseVulnerabilityAssessmentListResult.NextLink == nil || len(*p.current.DatabaseVulnerabilityAssessmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabaseVulnerabilityAssessmentsListByDatabasePager) PageResponse() ManagedDatabaseVulnerabilityAssessmentsListByDatabaseResponse {
	return p.current
}

type ManagedDatabasesListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabasesListByInstanceResponse.
	PageResponse() ManagedDatabasesListByInstanceResponse
}

type managedDatabasesListByInstancePager struct {
	client    *ManagedDatabasesClient
	current   ManagedDatabasesListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabasesListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedDatabasesListByInstancePager) Err() error {
	return p.err
}

func (p *managedDatabasesListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedDatabaseListResult.NextLink == nil || len(*p.current.ManagedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabasesListByInstancePager) PageResponse() ManagedDatabasesListByInstanceResponse {
	return p.current
}

type ManagedDatabasesListInaccessibleByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedDatabasesListInaccessibleByInstanceResponse.
	PageResponse() ManagedDatabasesListInaccessibleByInstanceResponse
}

type managedDatabasesListInaccessibleByInstancePager struct {
	client    *ManagedDatabasesClient
	current   ManagedDatabasesListInaccessibleByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedDatabasesListInaccessibleByInstanceResponse) (*azcore.Request, error)
}

func (p *managedDatabasesListInaccessibleByInstancePager) Err() error {
	return p.err
}

func (p *managedDatabasesListInaccessibleByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedDatabaseListResult.NextLink == nil || len(*p.current.ManagedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInaccessibleByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listInaccessibleByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedDatabasesListInaccessibleByInstancePager) PageResponse() ManagedDatabasesListInaccessibleByInstanceResponse {
	return p.current
}

type ManagedInstanceAdministratorsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceAdministratorsListByInstanceResponse.
	PageResponse() ManagedInstanceAdministratorsListByInstanceResponse
}

type managedInstanceAdministratorsListByInstancePager struct {
	client    *ManagedInstanceAdministratorsClient
	current   ManagedInstanceAdministratorsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceAdministratorsListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceAdministratorsListByInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceAdministratorsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceAdministratorListResult.NextLink == nil || len(*p.current.ManagedInstanceAdministratorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceAdministratorsListByInstancePager) PageResponse() ManagedInstanceAdministratorsListByInstanceResponse {
	return p.current
}

type ManagedInstanceAzureADOnlyAuthenticationsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceAzureADOnlyAuthenticationsListByInstanceResponse.
	PageResponse() ManagedInstanceAzureADOnlyAuthenticationsListByInstanceResponse
}

type managedInstanceAzureADOnlyAuthenticationsListByInstancePager struct {
	client    *ManagedInstanceAzureADOnlyAuthenticationsClient
	current   ManagedInstanceAzureADOnlyAuthenticationsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceAzureADOnlyAuthenticationsListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceAzureADOnlyAuthenticationsListByInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceAzureADOnlyAuthenticationsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceAzureADOnlyAuthListResult.NextLink == nil || len(*p.current.ManagedInstanceAzureADOnlyAuthListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceAzureADOnlyAuthenticationsListByInstancePager) PageResponse() ManagedInstanceAzureADOnlyAuthenticationsListByInstanceResponse {
	return p.current
}

type ManagedInstanceEncryptionProtectorsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceEncryptionProtectorsListByInstanceResponse.
	PageResponse() ManagedInstanceEncryptionProtectorsListByInstanceResponse
}

type managedInstanceEncryptionProtectorsListByInstancePager struct {
	client    *ManagedInstanceEncryptionProtectorsClient
	current   ManagedInstanceEncryptionProtectorsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceEncryptionProtectorsListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceEncryptionProtectorsListByInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceEncryptionProtectorsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceEncryptionProtectorListResult.NextLink == nil || len(*p.current.ManagedInstanceEncryptionProtectorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceEncryptionProtectorsListByInstancePager) PageResponse() ManagedInstanceEncryptionProtectorsListByInstanceResponse {
	return p.current
}

type ManagedInstanceKeysListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceKeysListByInstanceResponse.
	PageResponse() ManagedInstanceKeysListByInstanceResponse
}

type managedInstanceKeysListByInstancePager struct {
	client    *ManagedInstanceKeysClient
	current   ManagedInstanceKeysListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceKeysListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceKeysListByInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceKeysListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceKeyListResult.NextLink == nil || len(*p.current.ManagedInstanceKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceKeysListByInstancePager) PageResponse() ManagedInstanceKeysListByInstanceResponse {
	return p.current
}

type ManagedInstanceLongTermRetentionPoliciesListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse.
	PageResponse() ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse
}

type managedInstanceLongTermRetentionPoliciesListByDatabasePager struct {
	client    *ManagedInstanceLongTermRetentionPoliciesClient
	current   ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse) (*azcore.Request, error)
}

func (p *managedInstanceLongTermRetentionPoliciesListByDatabasePager) Err() error {
	return p.err
}

func (p *managedInstanceLongTermRetentionPoliciesListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceLongTermRetentionPolicyListResult.NextLink == nil || len(*p.current.ManagedInstanceLongTermRetentionPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceLongTermRetentionPoliciesListByDatabasePager) PageResponse() ManagedInstanceLongTermRetentionPoliciesListByDatabaseResponse {
	return p.current
}

type ManagedInstanceOperationsListByManagedInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceOperationsListByManagedInstanceResponse.
	PageResponse() ManagedInstanceOperationsListByManagedInstanceResponse
}

type managedInstanceOperationsListByManagedInstancePager struct {
	client    *ManagedInstanceOperationsClient
	current   ManagedInstanceOperationsListByManagedInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceOperationsListByManagedInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceOperationsListByManagedInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceOperationsListByManagedInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceOperationListResult.NextLink == nil || len(*p.current.ManagedInstanceOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByManagedInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByManagedInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceOperationsListByManagedInstancePager) PageResponse() ManagedInstanceOperationsListByManagedInstanceResponse {
	return p.current
}

type ManagedInstancePrivateEndpointConnectionsListByManagedInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancePrivateEndpointConnectionsListByManagedInstanceResponse.
	PageResponse() ManagedInstancePrivateEndpointConnectionsListByManagedInstanceResponse
}

type managedInstancePrivateEndpointConnectionsListByManagedInstancePager struct {
	client    *ManagedInstancePrivateEndpointConnectionsClient
	current   ManagedInstancePrivateEndpointConnectionsListByManagedInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancePrivateEndpointConnectionsListByManagedInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstancePrivateEndpointConnectionsListByManagedInstancePager) Err() error {
	return p.err
}

func (p *managedInstancePrivateEndpointConnectionsListByManagedInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstancePrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.ManagedInstancePrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByManagedInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByManagedInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancePrivateEndpointConnectionsListByManagedInstancePager) PageResponse() ManagedInstancePrivateEndpointConnectionsListByManagedInstanceResponse {
	return p.current
}

type ManagedInstancePrivateLinkResourcesListByManagedInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse.
	PageResponse() ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse
}

type managedInstancePrivateLinkResourcesListByManagedInstancePager struct {
	client    *ManagedInstancePrivateLinkResourcesClient
	current   ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstancePrivateLinkResourcesListByManagedInstancePager) Err() error {
	return p.err
}

func (p *managedInstancePrivateLinkResourcesListByManagedInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstancePrivateLinkListResult.NextLink == nil || len(*p.current.ManagedInstancePrivateLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByManagedInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByManagedInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancePrivateLinkResourcesListByManagedInstancePager) PageResponse() ManagedInstancePrivateLinkResourcesListByManagedInstanceResponse {
	return p.current
}

type ManagedInstanceVulnerabilityAssessmentsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse.
	PageResponse() ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse
}

type managedInstanceVulnerabilityAssessmentsListByInstancePager struct {
	client    *ManagedInstanceVulnerabilityAssessmentsClient
	current   ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstanceVulnerabilityAssessmentsListByInstancePager) Err() error {
	return p.err
}

func (p *managedInstanceVulnerabilityAssessmentsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceVulnerabilityAssessmentListResult.NextLink == nil || len(*p.current.ManagedInstanceVulnerabilityAssessmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstanceVulnerabilityAssessmentsListByInstancePager) PageResponse() ManagedInstanceVulnerabilityAssessmentsListByInstanceResponse {
	return p.current
}

type ManagedInstancesListByInstancePoolPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancesListByInstancePoolResponse.
	PageResponse() ManagedInstancesListByInstancePoolResponse
}

type managedInstancesListByInstancePoolPager struct {
	client    *ManagedInstancesClient
	current   ManagedInstancesListByInstancePoolResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancesListByInstancePoolResponse) (*azcore.Request, error)
}

func (p *managedInstancesListByInstancePoolPager) Err() error {
	return p.err
}

func (p *managedInstancesListByInstancePoolPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceListResult.NextLink == nil || len(*p.current.ManagedInstanceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstancePoolHandleError(resp)
		return false
	}
	result, err := p.client.listByInstancePoolHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancesListByInstancePoolPager) PageResponse() ManagedInstancesListByInstancePoolResponse {
	return p.current
}

type ManagedInstancesListByManagedInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancesListByManagedInstanceResponse.
	PageResponse() ManagedInstancesListByManagedInstanceResponse
}

type managedInstancesListByManagedInstancePager struct {
	client    *ManagedInstancesClient
	current   ManagedInstancesListByManagedInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancesListByManagedInstanceResponse) (*azcore.Request, error)
}

func (p *managedInstancesListByManagedInstancePager) Err() error {
	return p.err
}

func (p *managedInstancesListByManagedInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopQueriesListResult.NextLink == nil || len(*p.current.TopQueriesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByManagedInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByManagedInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancesListByManagedInstancePager) PageResponse() ManagedInstancesListByManagedInstanceResponse {
	return p.current
}

type ManagedInstancesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancesListByResourceGroupResponse.
	PageResponse() ManagedInstancesListByResourceGroupResponse
}

type managedInstancesListByResourceGroupPager struct {
	client    *ManagedInstancesClient
	current   ManagedInstancesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *managedInstancesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *managedInstancesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceListResult.NextLink == nil || len(*p.current.ManagedInstanceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancesListByResourceGroupPager) PageResponse() ManagedInstancesListByResourceGroupResponse {
	return p.current
}

type ManagedInstancesListPager interface {
	azcore.Pager
	// PageResponse returns the current ManagedInstancesListResponse.
	PageResponse() ManagedInstancesListResponse
}

type managedInstancesListPager struct {
	client    *ManagedInstancesClient
	current   ManagedInstancesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedInstancesListResponse) (*azcore.Request, error)
}

func (p *managedInstancesListPager) Err() error {
	return p.err
}

func (p *managedInstancesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedInstanceListResult.NextLink == nil || len(*p.current.ManagedInstanceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedInstancesListPager) PageResponse() ManagedInstancesListResponse {
	return p.current
}

type ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse.
	PageResponse() ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse
}

type managedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabasePager struct {
	client    *ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesClient
	current   ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse) (*azcore.Request, error)
}

func (p *managedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabasePager) Err() error {
	return p.err
}

func (p *managedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedBackupShortTermRetentionPolicyListResult.NextLink == nil || len(*p.current.ManagedBackupShortTermRetentionPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByRestorableDroppedDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByRestorableDroppedDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabasePager) PageResponse() ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesListByRestorableDroppedDatabaseResponse {
	return p.current
}

type ManagedServerSecurityAlertPoliciesListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ManagedServerSecurityAlertPoliciesListByInstanceResponse.
	PageResponse() ManagedServerSecurityAlertPoliciesListByInstanceResponse
}

type managedServerSecurityAlertPoliciesListByInstancePager struct {
	client    *ManagedServerSecurityAlertPoliciesClient
	current   ManagedServerSecurityAlertPoliciesListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ManagedServerSecurityAlertPoliciesListByInstanceResponse) (*azcore.Request, error)
}

func (p *managedServerSecurityAlertPoliciesListByInstancePager) Err() error {
	return p.err
}

func (p *managedServerSecurityAlertPoliciesListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedServerSecurityAlertPolicyListResult.NextLink == nil || len(*p.current.ManagedServerSecurityAlertPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedServerSecurityAlertPoliciesListByInstancePager) PageResponse() ManagedServerSecurityAlertPoliciesListByInstanceResponse {
	return p.current
}

type OperationsHealthListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsHealthListByLocationResponse.
	PageResponse() OperationsHealthListByLocationResponse
}

type operationsHealthListByLocationPager struct {
	client    *OperationsHealthClient
	current   OperationsHealthListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsHealthListByLocationResponse) (*azcore.Request, error)
}

func (p *operationsHealthListByLocationPager) Err() error {
	return p.err
}

func (p *operationsHealthListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsHealthListResult.NextLink == nil || len(*p.current.OperationsHealthListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsHealthListByLocationPager) PageResponse() OperationsHealthListByLocationResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type OutboundFirewallRulesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current OutboundFirewallRulesListByServerResponse.
	PageResponse() OutboundFirewallRulesListByServerResponse
}

type outboundFirewallRulesListByServerPager struct {
	client    *OutboundFirewallRulesClient
	current   OutboundFirewallRulesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OutboundFirewallRulesListByServerResponse) (*azcore.Request, error)
}

func (p *outboundFirewallRulesListByServerPager) Err() error {
	return p.err
}

func (p *outboundFirewallRulesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundFirewallRuleListResult.NextLink == nil || len(*p.current.OutboundFirewallRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *outboundFirewallRulesListByServerPager) PageResponse() OutboundFirewallRulesListByServerResponse {
	return p.current
}

type PrivateEndpointConnectionsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndpointConnectionsListByServerResponse.
	PageResponse() PrivateEndpointConnectionsListByServerResponse
}

type privateEndpointConnectionsListByServerPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsListByServerResponse) (*azcore.Request, error)
}

func (p *privateEndpointConnectionsListByServerPager) Err() error {
	return p.err
}

func (p *privateEndpointConnectionsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointConnectionsListByServerPager) PageResponse() PrivateEndpointConnectionsListByServerResponse {
	return p.current
}

type PrivateLinkResourcesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkResourcesListByServerResponse.
	PageResponse() PrivateLinkResourcesListByServerResponse
}

type privateLinkResourcesListByServerPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListByServerResponse) (*azcore.Request, error)
}

func (p *privateLinkResourcesListByServerPager) Err() error {
	return p.err
}

func (p *privateLinkResourcesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkResourcesListByServerPager) PageResponse() PrivateLinkResourcesListByServerResponse {
	return p.current
}

type RecoverableManagedDatabasesListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current RecoverableManagedDatabasesListByInstanceResponse.
	PageResponse() RecoverableManagedDatabasesListByInstanceResponse
}

type recoverableManagedDatabasesListByInstancePager struct {
	client    *RecoverableManagedDatabasesClient
	current   RecoverableManagedDatabasesListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecoverableManagedDatabasesListByInstanceResponse) (*azcore.Request, error)
}

func (p *recoverableManagedDatabasesListByInstancePager) Err() error {
	return p.err
}

func (p *recoverableManagedDatabasesListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoverableManagedDatabaseListResult.NextLink == nil || len(*p.current.RecoverableManagedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recoverableManagedDatabasesListByInstancePager) PageResponse() RecoverableManagedDatabasesListByInstanceResponse {
	return p.current
}

type ReplicationLinksListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current ReplicationLinksListByDatabaseResponse.
	PageResponse() ReplicationLinksListByDatabaseResponse
}

type replicationLinksListByDatabasePager struct {
	client    *ReplicationLinksClient
	current   ReplicationLinksListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReplicationLinksListByDatabaseResponse) (*azcore.Request, error)
}

func (p *replicationLinksListByDatabasePager) Err() error {
	return p.err
}

func (p *replicationLinksListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationLinkListResult.NextLink == nil || len(*p.current.ReplicationLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *replicationLinksListByDatabasePager) PageResponse() ReplicationLinksListByDatabaseResponse {
	return p.current
}

type ReplicationLinksListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ReplicationLinksListByServerResponse.
	PageResponse() ReplicationLinksListByServerResponse
}

type replicationLinksListByServerPager struct {
	client    *ReplicationLinksClient
	current   ReplicationLinksListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReplicationLinksListByServerResponse) (*azcore.Request, error)
}

func (p *replicationLinksListByServerPager) Err() error {
	return p.err
}

func (p *replicationLinksListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationLinkListResult.NextLink == nil || len(*p.current.ReplicationLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *replicationLinksListByServerPager) PageResponse() ReplicationLinksListByServerResponse {
	return p.current
}

type RestorableDroppedDatabasesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current RestorableDroppedDatabasesListByServerResponse.
	PageResponse() RestorableDroppedDatabasesListByServerResponse
}

type restorableDroppedDatabasesListByServerPager struct {
	client    *RestorableDroppedDatabasesClient
	current   RestorableDroppedDatabasesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RestorableDroppedDatabasesListByServerResponse) (*azcore.Request, error)
}

func (p *restorableDroppedDatabasesListByServerPager) Err() error {
	return p.err
}

func (p *restorableDroppedDatabasesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RestorableDroppedDatabaseListResult.NextLink == nil || len(*p.current.RestorableDroppedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *restorableDroppedDatabasesListByServerPager) PageResponse() RestorableDroppedDatabasesListByServerResponse {
	return p.current
}

type RestorableDroppedManagedDatabasesListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current RestorableDroppedManagedDatabasesListByInstanceResponse.
	PageResponse() RestorableDroppedManagedDatabasesListByInstanceResponse
}

type restorableDroppedManagedDatabasesListByInstancePager struct {
	client    *RestorableDroppedManagedDatabasesClient
	current   RestorableDroppedManagedDatabasesListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RestorableDroppedManagedDatabasesListByInstanceResponse) (*azcore.Request, error)
}

func (p *restorableDroppedManagedDatabasesListByInstancePager) Err() error {
	return p.err
}

func (p *restorableDroppedManagedDatabasesListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RestorableDroppedManagedDatabaseListResult.NextLink == nil || len(*p.current.RestorableDroppedManagedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *restorableDroppedManagedDatabasesListByInstancePager) PageResponse() RestorableDroppedManagedDatabasesListByInstanceResponse {
	return p.current
}

type RestorePointsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current RestorePointsListByDatabaseResponse.
	PageResponse() RestorePointsListByDatabaseResponse
}

type restorePointsListByDatabasePager struct {
	client    *RestorePointsClient
	current   RestorePointsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RestorePointsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *restorePointsListByDatabasePager) Err() error {
	return p.err
}

func (p *restorePointsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RestorePointListResult.NextLink == nil || len(*p.current.RestorePointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *restorePointsListByDatabasePager) PageResponse() RestorePointsListByDatabaseResponse {
	return p.current
}

type SensitivityLabelsListCurrentByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current SensitivityLabelsListCurrentByDatabaseResponse.
	PageResponse() SensitivityLabelsListCurrentByDatabaseResponse
}

type sensitivityLabelsListCurrentByDatabasePager struct {
	client    *SensitivityLabelsClient
	current   SensitivityLabelsListCurrentByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SensitivityLabelsListCurrentByDatabaseResponse) (*azcore.Request, error)
}

func (p *sensitivityLabelsListCurrentByDatabasePager) Err() error {
	return p.err
}

func (p *sensitivityLabelsListCurrentByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SensitivityLabelListResult.NextLink == nil || len(*p.current.SensitivityLabelListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listCurrentByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listCurrentByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sensitivityLabelsListCurrentByDatabasePager) PageResponse() SensitivityLabelsListCurrentByDatabaseResponse {
	return p.current
}

type SensitivityLabelsListRecommendedByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current SensitivityLabelsListRecommendedByDatabaseResponse.
	PageResponse() SensitivityLabelsListRecommendedByDatabaseResponse
}

type sensitivityLabelsListRecommendedByDatabasePager struct {
	client    *SensitivityLabelsClient
	current   SensitivityLabelsListRecommendedByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SensitivityLabelsListRecommendedByDatabaseResponse) (*azcore.Request, error)
}

func (p *sensitivityLabelsListRecommendedByDatabasePager) Err() error {
	return p.err
}

func (p *sensitivityLabelsListRecommendedByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SensitivityLabelListResult.NextLink == nil || len(*p.current.SensitivityLabelListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRecommendedByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sensitivityLabelsListRecommendedByDatabasePager) PageResponse() SensitivityLabelsListRecommendedByDatabaseResponse {
	return p.current
}

type ServerAzureADAdministratorsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerAzureADAdministratorsListByServerResponse.
	PageResponse() ServerAzureADAdministratorsListByServerResponse
}

type serverAzureADAdministratorsListByServerPager struct {
	client    *ServerAzureADAdministratorsClient
	current   ServerAzureADAdministratorsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerAzureADAdministratorsListByServerResponse) (*azcore.Request, error)
}

func (p *serverAzureADAdministratorsListByServerPager) Err() error {
	return p.err
}

func (p *serverAzureADAdministratorsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AdministratorListResult.NextLink == nil || len(*p.current.AdministratorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverAzureADAdministratorsListByServerPager) PageResponse() ServerAzureADAdministratorsListByServerResponse {
	return p.current
}

type ServerAzureADOnlyAuthenticationsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerAzureADOnlyAuthenticationsListByServerResponse.
	PageResponse() ServerAzureADOnlyAuthenticationsListByServerResponse
}

type serverAzureADOnlyAuthenticationsListByServerPager struct {
	client    *ServerAzureADOnlyAuthenticationsClient
	current   ServerAzureADOnlyAuthenticationsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerAzureADOnlyAuthenticationsListByServerResponse) (*azcore.Request, error)
}

func (p *serverAzureADOnlyAuthenticationsListByServerPager) Err() error {
	return p.err
}

func (p *serverAzureADOnlyAuthenticationsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureADOnlyAuthListResult.NextLink == nil || len(*p.current.AzureADOnlyAuthListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverAzureADOnlyAuthenticationsListByServerPager) PageResponse() ServerAzureADOnlyAuthenticationsListByServerResponse {
	return p.current
}

type ServerBlobAuditingPoliciesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerBlobAuditingPoliciesListByServerResponse.
	PageResponse() ServerBlobAuditingPoliciesListByServerResponse
}

type serverBlobAuditingPoliciesListByServerPager struct {
	client    *ServerBlobAuditingPoliciesClient
	current   ServerBlobAuditingPoliciesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerBlobAuditingPoliciesListByServerResponse) (*azcore.Request, error)
}

func (p *serverBlobAuditingPoliciesListByServerPager) Err() error {
	return p.err
}

func (p *serverBlobAuditingPoliciesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerBlobAuditingPolicyListResult.NextLink == nil || len(*p.current.ServerBlobAuditingPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverBlobAuditingPoliciesListByServerPager) PageResponse() ServerBlobAuditingPoliciesListByServerResponse {
	return p.current
}

type ServerDNSAliasesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerDNSAliasesListByServerResponse.
	PageResponse() ServerDNSAliasesListByServerResponse
}

type serverDNSAliasesListByServerPager struct {
	client    *ServerDNSAliasesClient
	current   ServerDNSAliasesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerDNSAliasesListByServerResponse) (*azcore.Request, error)
}

func (p *serverDNSAliasesListByServerPager) Err() error {
	return p.err
}

func (p *serverDNSAliasesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerDNSAliasListResult.NextLink == nil || len(*p.current.ServerDNSAliasListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverDNSAliasesListByServerPager) PageResponse() ServerDNSAliasesListByServerResponse {
	return p.current
}

type ServerDevOpsAuditSettingsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerDevOpsAuditSettingsListByServerResponse.
	PageResponse() ServerDevOpsAuditSettingsListByServerResponse
}

type serverDevOpsAuditSettingsListByServerPager struct {
	client    *ServerDevOpsAuditSettingsClient
	current   ServerDevOpsAuditSettingsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerDevOpsAuditSettingsListByServerResponse) (*azcore.Request, error)
}

func (p *serverDevOpsAuditSettingsListByServerPager) Err() error {
	return p.err
}

func (p *serverDevOpsAuditSettingsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerDevOpsAuditSettingsListResult.NextLink == nil || len(*p.current.ServerDevOpsAuditSettingsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverDevOpsAuditSettingsListByServerPager) PageResponse() ServerDevOpsAuditSettingsListByServerResponse {
	return p.current
}

type ServerKeysListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerKeysListByServerResponse.
	PageResponse() ServerKeysListByServerResponse
}

type serverKeysListByServerPager struct {
	client    *ServerKeysClient
	current   ServerKeysListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerKeysListByServerResponse) (*azcore.Request, error)
}

func (p *serverKeysListByServerPager) Err() error {
	return p.err
}

func (p *serverKeysListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerKeyListResult.NextLink == nil || len(*p.current.ServerKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverKeysListByServerPager) PageResponse() ServerKeysListByServerResponse {
	return p.current
}

type ServerOperationsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerOperationsListByServerResponse.
	PageResponse() ServerOperationsListByServerResponse
}

type serverOperationsListByServerPager struct {
	client    *ServerOperationsClient
	current   ServerOperationsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerOperationsListByServerResponse) (*azcore.Request, error)
}

func (p *serverOperationsListByServerPager) Err() error {
	return p.err
}

func (p *serverOperationsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerOperationListResult.NextLink == nil || len(*p.current.ServerOperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverOperationsListByServerPager) PageResponse() ServerOperationsListByServerResponse {
	return p.current
}

type ServerSecurityAlertPoliciesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerSecurityAlertPoliciesListByServerResponse.
	PageResponse() ServerSecurityAlertPoliciesListByServerResponse
}

type serverSecurityAlertPoliciesListByServerPager struct {
	client    *ServerSecurityAlertPoliciesClient
	current   ServerSecurityAlertPoliciesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerSecurityAlertPoliciesListByServerResponse) (*azcore.Request, error)
}

func (p *serverSecurityAlertPoliciesListByServerPager) Err() error {
	return p.err
}

func (p *serverSecurityAlertPoliciesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogicalServerSecurityAlertPolicyListResult.NextLink == nil || len(*p.current.LogicalServerSecurityAlertPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverSecurityAlertPoliciesListByServerPager) PageResponse() ServerSecurityAlertPoliciesListByServerResponse {
	return p.current
}

type ServerTrustGroupsListByInstancePager interface {
	azcore.Pager
	// PageResponse returns the current ServerTrustGroupsListByInstanceResponse.
	PageResponse() ServerTrustGroupsListByInstanceResponse
}

type serverTrustGroupsListByInstancePager struct {
	client    *ServerTrustGroupsClient
	current   ServerTrustGroupsListByInstanceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerTrustGroupsListByInstanceResponse) (*azcore.Request, error)
}

func (p *serverTrustGroupsListByInstancePager) Err() error {
	return p.err
}

func (p *serverTrustGroupsListByInstancePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerTrustGroupListResult.NextLink == nil || len(*p.current.ServerTrustGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstanceHandleError(resp)
		return false
	}
	result, err := p.client.listByInstanceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverTrustGroupsListByInstancePager) PageResponse() ServerTrustGroupsListByInstanceResponse {
	return p.current
}

type ServerTrustGroupsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current ServerTrustGroupsListByLocationResponse.
	PageResponse() ServerTrustGroupsListByLocationResponse
}

type serverTrustGroupsListByLocationPager struct {
	client    *ServerTrustGroupsClient
	current   ServerTrustGroupsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerTrustGroupsListByLocationResponse) (*azcore.Request, error)
}

func (p *serverTrustGroupsListByLocationPager) Err() error {
	return p.err
}

func (p *serverTrustGroupsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerTrustGroupListResult.NextLink == nil || len(*p.current.ServerTrustGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverTrustGroupsListByLocationPager) PageResponse() ServerTrustGroupsListByLocationResponse {
	return p.current
}

type ServerVulnerabilityAssessmentsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerVulnerabilityAssessmentsListByServerResponse.
	PageResponse() ServerVulnerabilityAssessmentsListByServerResponse
}

type serverVulnerabilityAssessmentsListByServerPager struct {
	client    *ServerVulnerabilityAssessmentsClient
	current   ServerVulnerabilityAssessmentsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerVulnerabilityAssessmentsListByServerResponse) (*azcore.Request, error)
}

func (p *serverVulnerabilityAssessmentsListByServerPager) Err() error {
	return p.err
}

func (p *serverVulnerabilityAssessmentsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerVulnerabilityAssessmentListResult.NextLink == nil || len(*p.current.ServerVulnerabilityAssessmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverVulnerabilityAssessmentsListByServerPager) PageResponse() ServerVulnerabilityAssessmentsListByServerResponse {
	return p.current
}

type ServersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ServersListByResourceGroupResponse.
	PageResponse() ServersListByResourceGroupResponse
}

type serversListByResourceGroupPager struct {
	client    *ServersClient
	current   ServersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *serversListByResourceGroupPager) Err() error {
	return p.err
}

func (p *serversListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerListResult.NextLink == nil || len(*p.current.ServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serversListByResourceGroupPager) PageResponse() ServersListByResourceGroupResponse {
	return p.current
}

type ServersListPager interface {
	azcore.Pager
	// PageResponse returns the current ServersListResponse.
	PageResponse() ServersListResponse
}

type serversListPager struct {
	client    *ServersClient
	current   ServersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServersListResponse) (*azcore.Request, error)
}

func (p *serversListPager) Err() error {
	return p.err
}

func (p *serversListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerListResult.NextLink == nil || len(*p.current.ServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serversListPager) PageResponse() ServersListResponse {
	return p.current
}

type SubscriptionUsagesListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current SubscriptionUsagesListByLocationResponse.
	PageResponse() SubscriptionUsagesListByLocationResponse
}

type subscriptionUsagesListByLocationPager struct {
	client    *SubscriptionUsagesClient
	current   SubscriptionUsagesListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SubscriptionUsagesListByLocationResponse) (*azcore.Request, error)
}

func (p *subscriptionUsagesListByLocationPager) Err() error {
	return p.err
}

func (p *subscriptionUsagesListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SubscriptionUsageListResult.NextLink == nil || len(*p.current.SubscriptionUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *subscriptionUsagesListByLocationPager) PageResponse() SubscriptionUsagesListByLocationResponse {
	return p.current
}

type SyncAgentsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current SyncAgentsListByServerResponse.
	PageResponse() SyncAgentsListByServerResponse
}

type syncAgentsListByServerPager struct {
	client    *SyncAgentsClient
	current   SyncAgentsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncAgentsListByServerResponse) (*azcore.Request, error)
}

func (p *syncAgentsListByServerPager) Err() error {
	return p.err
}

func (p *syncAgentsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncAgentListResult.NextLink == nil || len(*p.current.SyncAgentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncAgentsListByServerPager) PageResponse() SyncAgentsListByServerResponse {
	return p.current
}

type SyncAgentsListLinkedDatabasesPager interface {
	azcore.Pager
	// PageResponse returns the current SyncAgentsListLinkedDatabasesResponse.
	PageResponse() SyncAgentsListLinkedDatabasesResponse
}

type syncAgentsListLinkedDatabasesPager struct {
	client    *SyncAgentsClient
	current   SyncAgentsListLinkedDatabasesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncAgentsListLinkedDatabasesResponse) (*azcore.Request, error)
}

func (p *syncAgentsListLinkedDatabasesPager) Err() error {
	return p.err
}

func (p *syncAgentsListLinkedDatabasesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncAgentLinkedDatabaseListResult.NextLink == nil || len(*p.current.SyncAgentLinkedDatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listLinkedDatabasesHandleError(resp)
		return false
	}
	result, err := p.client.listLinkedDatabasesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncAgentsListLinkedDatabasesPager) PageResponse() SyncAgentsListLinkedDatabasesResponse {
	return p.current
}

type SyncGroupsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current SyncGroupsListByDatabaseResponse.
	PageResponse() SyncGroupsListByDatabaseResponse
}

type syncGroupsListByDatabasePager struct {
	client    *SyncGroupsClient
	current   SyncGroupsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncGroupsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *syncGroupsListByDatabasePager) Err() error {
	return p.err
}

func (p *syncGroupsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncGroupListResult.NextLink == nil || len(*p.current.SyncGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncGroupsListByDatabasePager) PageResponse() SyncGroupsListByDatabaseResponse {
	return p.current
}

type SyncGroupsListHubSchemasPager interface {
	azcore.Pager
	// PageResponse returns the current SyncGroupsListHubSchemasResponse.
	PageResponse() SyncGroupsListHubSchemasResponse
}

type syncGroupsListHubSchemasPager struct {
	client    *SyncGroupsClient
	current   SyncGroupsListHubSchemasResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncGroupsListHubSchemasResponse) (*azcore.Request, error)
}

func (p *syncGroupsListHubSchemasPager) Err() error {
	return p.err
}

func (p *syncGroupsListHubSchemasPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncFullSchemaPropertiesListResult.NextLink == nil || len(*p.current.SyncFullSchemaPropertiesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHubSchemasHandleError(resp)
		return false
	}
	result, err := p.client.listHubSchemasHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncGroupsListHubSchemasPager) PageResponse() SyncGroupsListHubSchemasResponse {
	return p.current
}

type SyncGroupsListLogsPager interface {
	azcore.Pager
	// PageResponse returns the current SyncGroupsListLogsResponse.
	PageResponse() SyncGroupsListLogsResponse
}

type syncGroupsListLogsPager struct {
	client    *SyncGroupsClient
	current   SyncGroupsListLogsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncGroupsListLogsResponse) (*azcore.Request, error)
}

func (p *syncGroupsListLogsPager) Err() error {
	return p.err
}

func (p *syncGroupsListLogsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncGroupLogListResult.NextLink == nil || len(*p.current.SyncGroupLogListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listLogsHandleError(resp)
		return false
	}
	result, err := p.client.listLogsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncGroupsListLogsPager) PageResponse() SyncGroupsListLogsResponse {
	return p.current
}

type SyncGroupsListSyncDatabaseIDsPager interface {
	azcore.Pager
	// PageResponse returns the current SyncGroupsListSyncDatabaseIDsResponse.
	PageResponse() SyncGroupsListSyncDatabaseIDsResponse
}

type syncGroupsListSyncDatabaseIDsPager struct {
	client    *SyncGroupsClient
	current   SyncGroupsListSyncDatabaseIDsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncGroupsListSyncDatabaseIDsResponse) (*azcore.Request, error)
}

func (p *syncGroupsListSyncDatabaseIDsPager) Err() error {
	return p.err
}

func (p *syncGroupsListSyncDatabaseIDsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncDatabaseIDListResult.NextLink == nil || len(*p.current.SyncDatabaseIDListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSyncDatabaseIDsHandleError(resp)
		return false
	}
	result, err := p.client.listSyncDatabaseIDsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncGroupsListSyncDatabaseIDsPager) PageResponse() SyncGroupsListSyncDatabaseIDsResponse {
	return p.current
}

type SyncMembersListBySyncGroupPager interface {
	azcore.Pager
	// PageResponse returns the current SyncMembersListBySyncGroupResponse.
	PageResponse() SyncMembersListBySyncGroupResponse
}

type syncMembersListBySyncGroupPager struct {
	client    *SyncMembersClient
	current   SyncMembersListBySyncGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncMembersListBySyncGroupResponse) (*azcore.Request, error)
}

func (p *syncMembersListBySyncGroupPager) Err() error {
	return p.err
}

func (p *syncMembersListBySyncGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncMemberListResult.NextLink == nil || len(*p.current.SyncMemberListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySyncGroupHandleError(resp)
		return false
	}
	result, err := p.client.listBySyncGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncMembersListBySyncGroupPager) PageResponse() SyncMembersListBySyncGroupResponse {
	return p.current
}

type SyncMembersListMemberSchemasPager interface {
	azcore.Pager
	// PageResponse returns the current SyncMembersListMemberSchemasResponse.
	PageResponse() SyncMembersListMemberSchemasResponse
}

type syncMembersListMemberSchemasPager struct {
	client    *SyncMembersClient
	current   SyncMembersListMemberSchemasResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SyncMembersListMemberSchemasResponse) (*azcore.Request, error)
}

func (p *syncMembersListMemberSchemasPager) Err() error {
	return p.err
}

func (p *syncMembersListMemberSchemasPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SyncFullSchemaPropertiesListResult.NextLink == nil || len(*p.current.SyncFullSchemaPropertiesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMemberSchemasHandleError(resp)
		return false
	}
	result, err := p.client.listMemberSchemasHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *syncMembersListMemberSchemasPager) PageResponse() SyncMembersListMemberSchemasResponse {
	return p.current
}

type TimeZonesListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current TimeZonesListByLocationResponse.
	PageResponse() TimeZonesListByLocationResponse
}

type timeZonesListByLocationPager struct {
	client    *TimeZonesClient
	current   TimeZonesListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TimeZonesListByLocationResponse) (*azcore.Request, error)
}

func (p *timeZonesListByLocationPager) Err() error {
	return p.err
}

func (p *timeZonesListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TimeZoneListResult.NextLink == nil || len(*p.current.TimeZoneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *timeZonesListByLocationPager) PageResponse() TimeZonesListByLocationResponse {
	return p.current
}

type UsagesListByInstancePoolPager interface {
	azcore.Pager
	// PageResponse returns the current UsagesListByInstancePoolResponse.
	PageResponse() UsagesListByInstancePoolResponse
}

type usagesListByInstancePoolPager struct {
	client    *UsagesClient
	current   UsagesListByInstancePoolResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UsagesListByInstancePoolResponse) (*azcore.Request, error)
}

func (p *usagesListByInstancePoolPager) Err() error {
	return p.err
}

func (p *usagesListByInstancePoolPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageListResult.NextLink == nil || len(*p.current.UsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByInstancePoolHandleError(resp)
		return false
	}
	result, err := p.client.listByInstancePoolHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *usagesListByInstancePoolPager) PageResponse() UsagesListByInstancePoolResponse {
	return p.current
}

type VirtualClustersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualClustersListByResourceGroupResponse.
	PageResponse() VirtualClustersListByResourceGroupResponse
}

type virtualClustersListByResourceGroupPager struct {
	client    *VirtualClustersClient
	current   VirtualClustersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualClustersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *virtualClustersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *virtualClustersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualClusterListResult.NextLink == nil || len(*p.current.VirtualClusterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualClustersListByResourceGroupPager) PageResponse() VirtualClustersListByResourceGroupResponse {
	return p.current
}

type VirtualClustersListPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualClustersListResponse.
	PageResponse() VirtualClustersListResponse
}

type virtualClustersListPager struct {
	client    *VirtualClustersClient
	current   VirtualClustersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualClustersListResponse) (*azcore.Request, error)
}

func (p *virtualClustersListPager) Err() error {
	return p.err
}

func (p *virtualClustersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualClusterListResult.NextLink == nil || len(*p.current.VirtualClusterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualClustersListPager) PageResponse() VirtualClustersListResponse {
	return p.current
}

type VirtualNetworkRulesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkRulesListByServerResponse.
	PageResponse() VirtualNetworkRulesListByServerResponse
}

type virtualNetworkRulesListByServerPager struct {
	client    *VirtualNetworkRulesClient
	current   VirtualNetworkRulesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkRulesListByServerResponse) (*azcore.Request, error)
}

func (p *virtualNetworkRulesListByServerPager) Err() error {
	return p.err
}

func (p *virtualNetworkRulesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkRuleListResult.NextLink == nil || len(*p.current.VirtualNetworkRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkRulesListByServerPager) PageResponse() VirtualNetworkRulesListByServerResponse {
	return p.current
}

type WorkloadClassifiersListByWorkloadGroupPager interface {
	azcore.Pager
	// PageResponse returns the current WorkloadClassifiersListByWorkloadGroupResponse.
	PageResponse() WorkloadClassifiersListByWorkloadGroupResponse
}

type workloadClassifiersListByWorkloadGroupPager struct {
	client    *WorkloadClassifiersClient
	current   WorkloadClassifiersListByWorkloadGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkloadClassifiersListByWorkloadGroupResponse) (*azcore.Request, error)
}

func (p *workloadClassifiersListByWorkloadGroupPager) Err() error {
	return p.err
}

func (p *workloadClassifiersListByWorkloadGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadClassifierListResult.NextLink == nil || len(*p.current.WorkloadClassifierListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByWorkloadGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByWorkloadGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadClassifiersListByWorkloadGroupPager) PageResponse() WorkloadClassifiersListByWorkloadGroupResponse {
	return p.current
}

type WorkloadGroupsListByDatabasePager interface {
	azcore.Pager
	// PageResponse returns the current WorkloadGroupsListByDatabaseResponse.
	PageResponse() WorkloadGroupsListByDatabaseResponse
}

type workloadGroupsListByDatabasePager struct {
	client    *WorkloadGroupsClient
	current   WorkloadGroupsListByDatabaseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WorkloadGroupsListByDatabaseResponse) (*azcore.Request, error)
}

func (p *workloadGroupsListByDatabasePager) Err() error {
	return p.err
}

func (p *workloadGroupsListByDatabasePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadGroupListResult.NextLink == nil || len(*p.current.WorkloadGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDatabaseHandleError(resp)
		return false
	}
	result, err := p.client.listByDatabaseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadGroupsListByDatabasePager) PageResponse() WorkloadGroupsListByDatabaseResponse {
	return p.current
}
