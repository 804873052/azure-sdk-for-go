// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// OperationsHealthClient contains the methods for the OperationsHealth group.
// Don't use this type directly, use NewOperationsHealthClient() instead.
type OperationsHealthClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewOperationsHealthClient creates a new instance of OperationsHealthClient with the specified values.
func NewOperationsHealthClient(con *armcore.Connection, subscriptionID string) *OperationsHealthClient {
	return &OperationsHealthClient{con: con, subscriptionID: subscriptionID}
}

// ListByLocation - Gets a service operation health status.
// If the operation fails it returns a generic error.
func (client *OperationsHealthClient) ListByLocation(locationName string, options *OperationsHealthListByLocationOptions) OperationsHealthListByLocationPager {
	return &operationsHealthListByLocationPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByLocationCreateRequest(ctx, locationName, options)
		},
		advancer: func(ctx context.Context, resp OperationsHealthListByLocationResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.OperationsHealthListResult.NextLink)
		},
	}
}

// listByLocationCreateRequest creates the ListByLocation request.
func (client *OperationsHealthClient) listByLocationCreateRequest(ctx context.Context, locationName string, options *OperationsHealthListByLocationOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/operationsHealth"
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-11-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByLocationHandleResponse handles the ListByLocation response.
func (client *OperationsHealthClient) listByLocationHandleResponse(resp *azcore.Response) (OperationsHealthListByLocationResponse, error) {
	result := OperationsHealthListByLocationResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.OperationsHealthListResult); err != nil {
		return OperationsHealthListByLocationResponse{}, err
	}
	return result, nil
}

// listByLocationHandleError handles the ListByLocation error response.
func (client *OperationsHealthClient) listByLocationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
