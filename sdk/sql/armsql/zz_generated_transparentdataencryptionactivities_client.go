// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// TransparentDataEncryptionActivitiesClient contains the methods for the TransparentDataEncryptionActivities group.
// Don't use this type directly, use NewTransparentDataEncryptionActivitiesClient() instead.
type TransparentDataEncryptionActivitiesClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewTransparentDataEncryptionActivitiesClient creates a new instance of TransparentDataEncryptionActivitiesClient with the specified values.
func NewTransparentDataEncryptionActivitiesClient(con *armcore.Connection, subscriptionID string) *TransparentDataEncryptionActivitiesClient {
	return &TransparentDataEncryptionActivitiesClient{con: con, subscriptionID: subscriptionID}
}

// ListByConfiguration - Returns a database's transparent data encryption operation result.
// If the operation fails it returns a generic error.
func (client *TransparentDataEncryptionActivitiesClient) ListByConfiguration(ctx context.Context, resourceGroupName string, serverName string, databaseName string, transparentDataEncryptionName TransparentDataEncryptionName, options *TransparentDataEncryptionActivitiesListByConfigurationOptions) (TransparentDataEncryptionActivitiesListByConfigurationResponse, error) {
	req, err := client.listByConfigurationCreateRequest(ctx, resourceGroupName, serverName, databaseName, transparentDataEncryptionName, options)
	if err != nil {
		return TransparentDataEncryptionActivitiesListByConfigurationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return TransparentDataEncryptionActivitiesListByConfigurationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return TransparentDataEncryptionActivitiesListByConfigurationResponse{}, client.listByConfigurationHandleError(resp)
	}
	return client.listByConfigurationHandleResponse(resp)
}

// listByConfigurationCreateRequest creates the ListByConfiguration request.
func (client *TransparentDataEncryptionActivitiesClient) listByConfigurationCreateRequest(ctx context.Context, resourceGroupName string, serverName string, databaseName string, transparentDataEncryptionName TransparentDataEncryptionName, options *TransparentDataEncryptionActivitiesListByConfigurationOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}/operationResults"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	if databaseName == "" {
		return nil, errors.New("parameter databaseName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{databaseName}", url.PathEscape(databaseName))
	if transparentDataEncryptionName == "" {
		return nil, errors.New("parameter transparentDataEncryptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{transparentDataEncryptionName}", url.PathEscape(string(transparentDataEncryptionName)))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2014-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByConfigurationHandleResponse handles the ListByConfiguration response.
func (client *TransparentDataEncryptionActivitiesClient) listByConfigurationHandleResponse(resp *azcore.Response) (TransparentDataEncryptionActivitiesListByConfigurationResponse, error) {
	result := TransparentDataEncryptionActivitiesListByConfigurationResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.TransparentDataEncryptionActivityListResult); err != nil {
		return TransparentDataEncryptionActivitiesListByConfigurationResponse{}, err
	}
	return result, nil
}

// listByConfigurationHandleError handles the ListByConfiguration error response.
func (client *TransparentDataEncryptionActivitiesClient) listByConfigurationHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
