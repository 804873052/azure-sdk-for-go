// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// UsagesClient contains the methods for the Usages group.
// Don't use this type directly, use NewUsagesClient() instead.
type UsagesClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewUsagesClient creates a new instance of UsagesClient with the specified values.
func NewUsagesClient(con *armcore.Connection, subscriptionID string) *UsagesClient {
	return &UsagesClient{con: con, subscriptionID: subscriptionID}
}

// ListByInstancePool - Gets all instance pool usage metrics
// If the operation fails it returns a generic error.
func (client *UsagesClient) ListByInstancePool(resourceGroupName string, instancePoolName string, options *UsagesListByInstancePoolOptions) UsagesListByInstancePoolPager {
	return &usagesListByInstancePoolPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByInstancePoolCreateRequest(ctx, resourceGroupName, instancePoolName, options)
		},
		advancer: func(ctx context.Context, resp UsagesListByInstancePoolResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.UsageListResult.NextLink)
		},
	}
}

// listByInstancePoolCreateRequest creates the ListByInstancePool request.
func (client *UsagesClient) listByInstancePoolCreateRequest(ctx context.Context, resourceGroupName string, instancePoolName string, options *UsagesListByInstancePoolOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/usages"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if instancePoolName == "" {
		return nil, errors.New("parameter instancePoolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{instancePoolName}", url.PathEscape(instancePoolName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.ExpandChildren != nil {
		reqQP.Set("expandChildren", strconv.FormatBool(*options.ExpandChildren))
	}
	reqQP.Set("api-version", "2021-02-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByInstancePoolHandleResponse handles the ListByInstancePool response.
func (client *UsagesClient) listByInstancePoolHandleResponse(resp *azcore.Response) (UsagesListByInstancePoolResponse, error) {
	result := UsagesListByInstancePoolResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.UsageListResult); err != nil {
		return UsagesListByInstancePoolResponse{}, err
	}
	return result, nil
}

// listByInstancePoolHandleError handles the ListByInstancePool error response.
func (client *UsagesClient) listByInstancePoolHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
